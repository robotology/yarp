sudo: required
dist: trusty
language: cpp
cache:
  ccache: true
  timeout: 1000
osx_image: xcode7.3

os:
  - linux
  - osx

compiler:
  - gcc
  - clang

env:
  global:
    - TRAVIS_CMAKE_GENERATOR="Unix Makefiles"
    - TRAVIS_BUILD_TYPE=Release
    - TRAVIS_WITH_INTEGRATION_TESTS=false
    - TRAVIS_STATIC=false
    - TRAVIS_WITH_VALGRIND=false

  matrix:
    # Normal build
    - TRAVIS_WITH_ACE=true TRAVIS_WITH_CXX11=false
    # C++11 build
    - TRAVIS_WITH_ACE=true TRAVIS_WITH_CXX11=true
    # No ACE build
    - TRAVIS_WITH_ACE=false TRAVIS_WITH_CXX11=false
    # C++11 - No ACE build
    - TRAVIS_WITH_ACE=false TRAVIS_WITH_CXX11=true

matrix:
  include:
    # Normal build with Ninja generator (linux, gcc)
    - os: linux
      compiler: gcc
      env: TRAVIS_WITH_ACE=true TRAVIS_WITH_CXX11=false TRAVIS_CMAKE_GENERATOR="Ninja"

    # Normal build with Ninja generator (linux, clang)
    - os: linux
      compiler: clang
      env: TRAVIS_WITH_ACE=true TRAVIS_WITH_CXX11=false TRAVIS_CMAKE_GENERATOR="Ninja"

    # Normal build with integration tests (linux, gcc)
    - os: linux
      compiler: gcc
      env: TRAVIS_WITH_ACE=true TRAVIS_WITH_CXX11=false TRAVIS_WITH_INTEGRATION_TESTS=true

    # Normal build with integration tests (linux, clang)
    - os: linux
      compiler: clang
      env: TRAVIS_WITH_ACE=true TRAVIS_WITH_CXX11=false TRAVIS_WITH_INTEGRATION_TESTS=true

    # Static build (linux, gcc)
    - os: linux
      compiler: gcc
      env: TRAVIS_WITH_ACE=true TRAVIS_WITH_CXX11=false TRAVIS_STATIC=true

    # Static build (linux, clang)
    - os: linux
      compiler: clang
      env: TRAVIS_WITH_ACE=true TRAVIS_WITH_CXX11=false TRAVIS_STATIC=true

    # Static build, no ACE (linux, gcc)
    - os: linux
      compiler: gcc
      env: TRAVIS_WITH_ACE=false TRAVIS_WITH_CXX11=false TRAVIS_STATIC=true

    # Static build, no ACE (linux, clang)
    - os: linux
      compiler: clang
      env: TRAVIS_WITH_ACE=false TRAVIS_WITH_CXX11=false TRAVIS_STATIC=true

    # Normal build with valgrind (linux, gcc)
    - os: linux
      compiler: gcc
      env: TRAVIS_WITH_ACE=true TRAVIS_WITH_CXX11=false TRAVIS_WITH_VALGRIND=true

    # C++11 build with valgrind (linux, gcc)
    - os: linux
      compiler: gcc
      env: TRAVIS_WITH_ACE=true TRAVIS_WITH_CXX11=true TRAVIS_WITH_VALGRIND=true

    # No ACE build with valgrind (linux, gcc)
    - os: linux
      compiler: gcc
      env: TRAVIS_WITH_ACE=false TRAVIS_WITH_CXX11=false TRAVIS_WITH_VALGRIND=true

    # C++11 build with valgrind (linux, gcc)
    - os: linux
      compiler: gcc
      env: TRAVIS_WITH_ACE=false TRAVIS_WITH_CXX11=true TRAVIS_WITH_VALGRIND=true

    # Normal build with Coverage (linux, gcc)
#    - os: linux
#      compiler: gcc
#      env: TRAVIS_WITH_ACE=true TRAVIS_WITH_CXX11=false TRAVIS_BUILD_TYPE=Profile

    # Normal build with Xcode generator (osx, clang)
    - os: osx
      compiler: clang
      env: TRAVIS_WITH_ACE=true TRAVIS_WITH_CXX11=false TRAVIS_CMAKE_GENERATOR="Xcode"

  allow_failures:
    # Normal build with integration tests (sometimes integration::rpc test fails)
    - env: TRAVIS_WITH_ACE=true TRAVIS_WITH_CXX11=false TRAVIS_WITH_INTEGRATION_TESTS=true

    # Normal build with Xcode generator (idl demo tests fail)
    - env: TRAVIS_WITH_ACE=true TRAVIS_WITH_CXX11=false TRAVIS_CMAKE_GENERATOR="Xcode"

branches:
  except:
    - /^*appveyor*$/

notifications:
  irc:
    channels:
      - "chat.freenode.net#yarpers"
    template:
      - "%{repository}/%{branch} (%{commit} - %{author}): %{build_url}: %{message}"
    use_notice: true
    skip_join: true


before_install:
  # Prepare ros environment variables
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if $TRAVIS_WITH_INTEGRATION_TESTS; then export ROS_CI_DESKTOP=`lsb_release -cs`; fi; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if $TRAVIS_WITH_INTEGRATION_TESTS; then export ROS_CI_VERSION=indigo; fi; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if $TRAVIS_WITH_INTEGRATION_TESTS; then export ROS_CI_PREFIX=ros-${ROS_CI_VERSION}-; fi; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if $TRAVIS_WITH_INTEGRATION_TESTS; then export ROS_HOSTNAME=localhost; fi; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if $TRAVIS_WITH_INTEGRATION_TESTS; then export ROS_MASTER_URI=http://localhost:11311; fi; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if $TRAVIS_WITH_INTEGRATION_TESTS; then export ROBOT=sim; fi; fi

  # Update repositories (macOS)
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew update; fi

  # Add additional repositories
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if $TRAVIS_WITH_INTEGRATION_TESTS; then echo "deb http://packages.ros.org/ros/ubuntu $ROS_CI_DESKTOP main" | sudo tee /etc/apt/sources.list.d/ros-latest.list; fi; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if $TRAVIS_WITH_INTEGRATION_TESTS; then wget http://packages.ros.org/ros.key -O - | sudo apt-key add -; fi; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew tap homebrew/science; fi

  # Update repositories (Linux)
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get update -qq; fi

  # Install missing build tools
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if [ "$TRAVIS_CMAKE_GENERATOR" == "Ninja" ]; then sudo apt-get install ninja-build; fi; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if [ "$TRAVIS_BUILD_TYPE" == "Profile" ]; then sudo apt-get -y install lcov; fi; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if [ "$TRAVIS_BUILD_TYPE" == "Profile" ]; then sudo gem install coveralls-lcov; fi; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if $TRAVIS_WITH_VALGRIND; then sudo apt-get install -y valgrind; fi; fi

  # Install ccache on osx
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew install ccache; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then export PATH="/usr/local/opt/ccache/libexec:$PATH"; fi

  # Use ccache also for clang and clang++ on linux
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if [ "$CC" == "clang" ]; then sudo ln -s ../../bin/ccache /usr/lib/ccache/clang; fi; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if [ "$CC" == "clang" ]; then export CFLAGS="-Qunused-arguments"; fi; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if [ "$CXX" == "clang++" ]; then sudo ln -s ../../bin/ccache /usr/lib/ccache/clang++; fi; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if [ "$CXX" == "clang++" ]; then export CXXFLAGS="-Qunused-arguments"; fi; fi

  # Print some more system information after installing all build tools
  - echo "-------------------- BEGIN SYSTEM INFORMATION --------------------"
  - uname -a
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then lsb_release -a; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then system_profiler SPSoftwareDataType; fi
  - env
  - which cmake
  - cmake --version
  - which $CC
  - $CC --version
  - which $CXX
  - $CXX --version
  - which ccache
  - ccache --version
  - ccache -s
  - echo "--------------------  END SYSTEM INFORMATION  --------------------"


install:
  # Install ACE
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if $TRAVIS_WITH_ACE; then sudo apt-get -y install libace-dev; fi; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then if $TRAVIS_WITH_ACE; then brew install ace; fi; fi

  # Install other core dependencies (sqlite, tinyxml)
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install -y libsqlite3-dev libtinyxml-dev; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew install sqlite tinyxml; fi

  # Install GTK2 GUIs dependencies
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install -y libgtkmm-2.4-dev libgtkdataboxmm-dev libgoocanvasmm-dev; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew install gtkmm gtk+ gtkdatabox goocanvas; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew link --force gettext; fi # Fix goocanvas build

  # Install Qt5 GUIs dependencies
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install -y qtbase5-dev qtdeclarative5-dev qtmultimedia5-dev; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew install qt5; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then export Qt5_DIR="/usr/local/opt/qt5/lib/cmake/Qt5"; fi

  # Install GPL dependencies (gsl, readline, qcustomplot)
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install -y libgsl0-dev libreadline-dev libqcustomplot-dev; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew install gsl readline; fi

  # Install other dependencies (opencv)
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get install -y libopencv-dev; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew install opencv; fi

  # Install swig stuff
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if $TRAVIS_WITH_INTEGRATION_TESTS; then sudo apt-get -y install liblua5.1-0-dev lua5.1 tcl-dev tk-dev mono-mcs; fi; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if $TRAVIS_WITH_INTEGRATION_TESTS; then wget https://github.com/robotology-dependencies/swigs/releases/download/v0.0.5/swigs.zip; fi; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if $TRAVIS_WITH_INTEGRATION_TESTS; then unzip -q swigs.zip; mkdir -p cache; mv swigs cache/swig; fi; fi

  # Install ros stuff
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if $TRAVIS_WITH_INTEGRATION_TESTS; then sudo apt-get -y install ${ROS_CI_PREFIX}desktop-full; fi; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if $TRAVIS_WITH_INTEGRATION_TESTS; then sudo rosdep init && rosdep update; fi; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then if $TRAVIS_WITH_INTEGRATION_TESTS; then source /opt/ros/${ROS_CI_VERSION}/setup.bash; fi; fi


before_script:
  # Prepare build directory
  - mkdir -p build
  - if $TRAVIS_WITH_INTEGRATION_TESTS; then ln -s ../cache build/cache; fi

  # Prepare cmake options
  - . scripts/admin/generate-cmake-options.sh $(hostname) $(lsb_release -cs) continuous
  - export YARP_CMAKE_OPTIONS=" $CMAKE_OPTIONS"
  - if ! $TRAVIS_WITH_ACE; then export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DSKIP_ACE=ON -DYARP_TEST_HEAP=ON"; fi
  - if $TRAVIS_WITH_CXX11; then export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DYARP_EXPERIMENTAL_CXX11=ON"; fi
  - if $TRAVIS_WITH_INTEGRATION_TESTS; then export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DYARP_TEST_INTEGRATION=ON"; fi
  - if $TRAVIS_STATIC; then export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DCREATE_SHARED_LIBRARY=ON"; fi
  - if $TRAVIS_WITH_VALGRIND; then export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DYARP_VALGRIND_TESTS=ON -DYARP_VALGRIND_DRD_TESTS=OFF -DYARP_VALGRIND_HELGRIND_TESTS=OFF YARP_VALGRIND_MEMCHECK_TESTS=ON YARP_VALGRIND_SGCHECK_TESTS=OFF"; fi

  # Run CMake
  - (cd build; cmake -G"${TRAVIS_CMAKE_GENERATOR}" -DCMAKE_BUILD_TYPE=${TRAVIS_BUILD_TYPE} ${YARP_CMAKE_OPTIONS} ..)

  # Reset coverage information
  - if [ "$TRAVIS_BUILD_TYPE" == "Profile" ]; then (cd build; lcov --directory . --zerocounters); fi


script:
  # Build yarp
  - (cd build; cmake --build . --config ${TRAVIS_BUILD_TYPE})

  # Configure yarp
  - if $TRAVIS_WITH_INTEGRATION_TESTS; then build/bin/yarp conf 0 0 local; fi

  # Run unit tests
  - (cd build; travis_wait 30 ctest --output-on-failure --build . -C ${TRAVIS_BUILD_TYPE})

  # Test installation
  - (cd build; sudo cmake --build . --config ${TRAVIS_BUILD_TYPE} --target install)

  # Build also the os examples
  - mkdir example/os/build
  - (cd example/os/build; cmake -G"${TRAVIS_CMAKE_GENERATOR}" -DCMAKE_BUILD_TYPE=${TRAVIS_BUILD_TYPE} ..)
  - (cd example/os/build; cmake --build . --config ${TRAVIS_BUILD_TYPE})


after_success:
  # Capture coverage info for Profile builds
  - if [ "$TRAVIS_BUILD_TYPE" == "Profile" ]; then (cd build; lcov --directory . --capture --output-file coverage.info); fi
  # Filter out system and test code
  - if [ "$TRAVIS_BUILD_TYPE" == "Profile" ]; then (cd build; lcov --remove coverage.info '/usr/*' 'tests/*' 'example/*' 'extern/*' 'idls/*' '*/harness/*' 'yarp/build/*' 'src/libYARP_serversql/*' 'src/libYARP_name/*' --output-file coverage.info); fi
  # Debug before upload
  - if [ "$TRAVIS_BUILD_TYPE" == "Profile" ]; then (cd build; lcov --list coverage.info); fi
  # Uploads to coveralls
  - if [ "$TRAVIS_BUILD_TYPE" == "Profile" ]; then (cd build; coveralls-lcov --source-encoding=ISO-8859-1 coverage.info); fi
