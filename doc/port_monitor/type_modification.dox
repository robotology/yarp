/**
 * @page type_modification An example which shows how to use a Lua script to create a new data type in a port

\author Ali Paikan

\section type_modification_desc Description
This example demonstrates how to use the port monitor carrier to substitute a data type with another one.
The port '/write' from 'yarp write' module is connected to the '/read' port of 'yarp read' using a portmonitor plugged into the receiver side. The portmoniotr loads a Lua script (\c 'type_modifier.lua') which expects to see a command such as 'random N' (where N is an integer number). The command is, then, completely substituted with a vector of N random values which will be delivered to the 'yarp read'. The port monitor also checks for the validity of the command

<br>

\image html type_modification.png ""


\section type_modification_req Requirements
\li Enable and compile portmonitor carrier (ENABLE_yarpcar_portmonitor_carrier=ON in YARP cmake).

\li Compile Yarp with Lua binding support (see \ref yarp_swig "Using YARP from python, java, ruby, C#, and other languages").

\li Set LUA_CPATH to include Yarp-Lua binding library  (e.g., export LUA_CPATH=";;;$YARP_ROOT/build/lib/lua/?.so")


\section type_modification_running Running the example

\li Open a terminal and run yarpserver
\verbatim
   $ yarpserver
\endverbatim

\li Open another terminal (lets call this the receiver terminal) and change to the 'type_modification' directory:
\verbatim
   $ cd $YARP_ROOT/example/portmonitor/type_modification
   $ yarp read /read
\endverbatim

\li Open another terminal (lets call this the sender terminal) and type
\verbatim
   $ yarp write /write
\endverbatim

\li In another terminal connect the port as follow
\verbatim
   $ yarp connect /write /read tcp+recv.portmonitor+type.lua+file.type_modifier
\endverbatim

Now if you write a valid command in the 'sender' terminal (e.g., random 3), you will see the command is completely substituted by a vector of 3 random values. For example:

\verbatim
[sender terminal]
   random 3
\endverbatim

\verbatim
[receiver terminal]
   0.513401 0.95223 0.916195
\endverbatim


\htmlonly

\section type_modification_scripts Scripts

\subsection type_modification_type_modifier type_modifier.lua

<pre style="background:#fff;color:#000"><span style="color:#00b418">-- loading lua-yarp binding library</span>
<span style="color:#3c4c72;font-weight:700">require</span>(<span style="color:#d80800">"yarp"</span>)

<pre style="background:#fff;color:#000"><span style="color:#00b418">--</span>
<span style="color:#00b418">-- accept is called when the port receives new data</span>
<span style="color:#00b418">-- @param thing The Things abstract data type</span>
<span style="color:#00b418">-- @return Boolean</span>
<span style="color:#00b418">-- if false is returned, the data will be ignored </span>
<span style="color:#00b418">-- and update() will never be called</span>
PortMonitor.accept <span style="color:#0100b6;font-weight:700">=</span> <span style="color:#0100b6;font-weight:700">function</span>(thing)
     bt <span style="color:#0100b6;font-weight:700">=</span> thing:asBottle()
     <span style="color:#0100b6;font-weight:700">if</span> bt:size() <span style="color:#0100b6;font-weight:700">&lt;</span> <span style="color:#cd0000;font-style:italic">2</span> <span style="color:#0100b6;font-weight:700">or</span> bt:get(<span style="color:#cd0000;font-style:italic">0</span>):asString() <span style="color:#0100b6;font-weight:700">~=</span> <span style="color:#d80800">"random"</span> <span style="color:#0100b6;font-weight:700">then</span>
        <span style="color:#3c4c72;font-weight:700">print</span>(<span style="color:#d80800">"type_modifier: invalid command! (e.g., random 10)"</span>)
        <span style="color:#0100b6;font-weight:700">return</span> <span style="color:#585cf6;font-style:italic">false</span>;
     <span style="color:#0100b6;font-weight:700">end</span>
    <span style="color:#0100b6;font-weight:700">return</span> <span style="color:#585cf6;font-style:italic">true</span>
<span style="color:#0100b6;font-weight:700">end</span>

<span style="color:#00b418">--</span>
<span style="color:#00b418">-- update is called when the port receives new data</span>
<span style="color:#00b418">-- @param thing The Things abstract data type</span>
<span style="color:#00b418">-- @return Things</span>
PortMonitor.update <span style="color:#0100b6;font-weight:700">=</span> <span style="color:#0100b6;font-weight:700">function</span>(thing)
    bt <span style="color:#0100b6;font-weight:700">=</span> thing:asBottle()
    th <span style="color:#0100b6;font-weight:700">=</span> yarp.Things()
    vec <span style="color:#0100b6;font-weight:700">=</span> yarp.Vector()
    <span style="color:#0100b6;font-weight:700">for</span> i<span style="color:#0100b6;font-weight:700">=</span><span style="color:#cd0000;font-style:italic">1</span>,bt:get(<span style="color:#cd0000;font-style:italic">1</span>):asInt() <span style="color:#0100b6;font-weight:700">do</span>
        vec:push_back(<span style="color:#3c4c72;font-weight:700">math.random</span>())
    <span style="color:#0100b6;font-weight:700">end</span>
    th:setPortWriter(vec)
    <span style="color:#0100b6;font-weight:700">return</span> th
<span style="color:#0100b6;font-weight:700">end</span>

</pre>
\endhtmlonly

*/
