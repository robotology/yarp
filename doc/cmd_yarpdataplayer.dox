/**
\page yarpdataplayer yarpdataplayer: replay recorded data

\ingroup yarp_guis
\ingroup yarp_tools

A module that reproduces in a synchronized way, previously acquired data
(using \ref yarpdatadumper) from a source of input.

\section intro_sec Description

This module provides the user a simple but informative
user-interface in order to manipulate the previously acquired data.
When playing it uses the timestamps provided from the time of acquisition
to synchronize the sending of the data as if the robot was present.

\image html datasetplayer.jpg
\image latex datasetplayer.jpg "The yarpdataplayer GUI running on Windows" width=6cm

\section lib_sec Libraries
- OpenCV libraries.
- GTKMM or Qt5 libraries.

\section running_sec Running
yarpdataplayer can run with or without the GUI (for server use and
commands are sent via the rpc port)
For gui run normally \e yarpdataplayer .
Without GUI run with the extra parameter \e hidden:

\verbatim
  yarpdataplayer --hidden
\endverbatim

\section file-sec yarpdatadumper file example
yarpdatadumper data.log file example:

\verbatim
  9566    1324373535.040288   -2.32967 0.043956 1.450549 -0.56044 1.704894 4.136408
  etc...
\endverbatim

yarpdatadumper info.log file example:

\verbatim
  Type: Bottle;
  [1324373535.040288] /foo/state:o [connected]
  etc...
\endverbatim

\e Type: is used to identify what kind of data the player is
   required to send.

\e The names of the ports open up by the player are initially
   set up based on the content of info.log file. This can be
   then changed using the GUI.

\section parameters_sec Parameters

\verbatim
--hidden
\endverbatim
- run with or without gui


\verbatim
--withExtraTimeCol index
\endverbatim
- loads the log files created by the datadumper with both rx and tx time.
  The user must select which timestamp to use (txTime index = 1 or
  rxTime index = 2)

\verbatim
--name modName
\endverbatim
- The parameter \e modName identifies the stem-name of the open
  ports.

 \section portsif_sec Ports Interface
 The interface to this module is implemented through
 \ref dataSetPlayer_IDL . \n

- The ports belonging to each of the parts are dynamically created and
  can be changed using the GUI.

\section in_files_sec Input Data Files
The player will look, in a recursive way, into directories in order to
create the parts needed and retrieve the data.

The data name is the default \ref yarpdatadumper names: data.log and
info.log.

An example directory tree containing data (data.log+info.log)
can be:
\code
/experiment1/
             /head/data.log;info.log
             /torso/data.log;info.log;
             /images/leftCamera/data.log;info.log
             /images/rightCamera/data.log;info.log
             /left_leg/data.log;info.log
             /right_leg/data.log;info.log
\endcode

If the directory indicated is either "experiment1" or within experiment,
the player will successfully load all required data.

The parts name will be taken from each subdirectory of the /experiment1
forder.

\note Currently, if the directory selected is (in this example) head,
torso etc, the player will not load the files as it will not be able to
find subdirs.

\todo
 - main slider bar selection. This needs an on-click and on-release
   event in order not to interfere with update and playback
 - when the search for a directory has not provided anything (user
   selected directory containing only *.log files)

\section tested_os_sec Tested OS
Windows, Linux

\sa yarpdatadumper
\sa yarpdataplayerExample

\author Vadim Tikhanoff and Ali Paikan
*/
