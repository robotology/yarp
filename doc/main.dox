// -*- mode:C++; tab-width:4; c-basic-offset:4; indent-tabs-mode:nil -*-

/*
 * Copyright (C) 2010 RobotCub Consortium
 * CopyPolicy: Released under the terms of the LGPLv2.1 or later, see LGPL.TXT
 *
 */


/**
\mainpage Welcome to YARP

\image html yarp-yal02-100.png

YARP stands for Yet Another Robot Platform.  What is it?
If data is the bloodstream of your robot, then YARP is
the circulatory system.

\li Source code: https://github.com/robotology/yarp
\li File an issue: https://github.com/robotology/yarp/issues/new

More specifically, YARP supports building a robot control system as a
\ref note_ports "collection of programs" communicating in a
peer-to-peer way, with an extensible \ref carrier_config "family of connection types"
(tcp, udp, multicast, local, MPI,
mjpg-over-http, XML/RPC, tcpros, ...) that can be swapped in and out to
match your needs.
We also support similarly flexible interfacing
with hardware devices.  Our strategic goal
is to increase the longevity of robot software projects.

YARP is <i>not</i> an operating system for your robot.  We figure you
already have an operating system, or perhaps several.  Nor does it do
package management (we like the package managers we have).  We're not
out for world domination [2].  It is easy to interoperate with YARP-using
programs without yourself necessarily having to use YARP codebase --
see the
\ref yarp_without_yarp "YARP without YARP" tutorial. YARP is written
in C++.  The <a href="http://www.cs.wustl.edu/~schmidt/ACE.html">ACE</a>
library is used for Windows builds, and to support extra
protocols.  On Linux and Mac OSX, ACE can optionally be omitted,
giving a very light footprint (with the trade-off being the
loss of support for some non-TCP-based protocols).
YARP is free and open, under the LGPL (*).

Getting set up:
\li \subpage install
\li \subpage yarp_cluster
\li \subpage yarp

The basics of using YARP:
\li \ref yarp_cmake_hello
\li \subpage tutorials
\li \ref note_ports
\li \ref note_devices
\li \ref yarp_data_dirs

Some helpful programs:
\li \subpage yarpdev
\li \subpage yarprun
\li \subpage yarpmanager
\li \subpage yarpscope
\li \subpage yarpdatadumper
\li \subpage yarpdataplayer
\li \subpage yarpmotorgui
\li \subpage yarpview
\li \subpage yarp_yarp-config

Interoperability:
\li \ref yarp_without_yarp
\li \ref yarp_with_ros
\li \ref yarp_swig
\li \ref portmonitor

More information:
\li \subpage what_is_yarp

YARP resources:
\li \ref download
\li <a href="http://wiki.icub.org/wiki/YARP">Wiki</a>
\li <a href="http://wiki.icub.org/wiki/Robotcub-hackers">Mailing&nbsp;list</a>

Related links:
\li <a href="http://www.icub.org">iCub family</a>
\li <a href="http://playerstage.sourceforge.net/">Player/Stage</a>
\li <a href="http://www.orocos.org/">Orocos</a>
\li <a href="http://www.ros.org">ROS</a>
\li <a href="http://gostai.com/products/urbi/">Urbi</a>

Papers:

[1] A middle way for robotics middleware, Fitzpatrick, P., Ceseracciu, E.,
Domenichelli, D., Paikan, A., Metta, G., and Natale, L., Journal of Software Engineering for Robotics, 5(2): 42-49, 2014. [<a href="http://joser.unibg.it/index.php?journal=joser&page=article&op=view&path%5B%5D=69">pdf]</a> 

[2] Data Flow Port's Monitoring and Arbitration, Paikan, A., Fitzpatrick, P., Metta, G., and Natale, L., Journal of Software Engneering for Robotics, vol. 5, no. 1, pp. 80-88, 2014. [<a href="http://joser.unibg.it/index.php?journal=joser&page=article&op=view&path%5B%5D=72">pdf</a>]

[3] Towards Long-Lived Robot Genes, Paul Fitzpatrick, Giorgio Metta, and Lorenzo Natale,  Robotics and Autonomous Systems, 56(1):29-45, 2008. [<a href="http://wiki.icub.org/yarp/media/humantech07towards.pdf">pdf]</a>

[4] YARP: Yet Another Robot Platform, Giorgio Metta, Paul Fitzpatrick, and Lorenzo Natale, International Journal of Advanced Robotic Systems, 3(1):43-48, 2006. [<a href="http://wiki.icub.org/yarp/media/humanoids06long.pdf">pdf]</a>

(*) Certain optional plugin devices, carriers, or libraries are under the GPL.

 *
 */
