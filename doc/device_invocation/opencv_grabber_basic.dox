/**
 * \ingroup dev_examples
 *
 * \defgroup opencv_grabber_basic Example for opencv_grabber (opencv_grabber_basic)

Instantiates \ref cmd_device_opencv_grabber "opencv_grabber" device implemented by OpenCVGrabber.
\verbatim
# read a camera using opencv
device opencv_grabber
\endverbatim
If this text is saved in a file called opencv_grabber_basic.ini then the device can be created by doing:
\verbatim
yarpdev --file opencv_grabber_basic.ini
\endverbatim
Of course, the configuration could be passed just as command line options, or as a yarp::os::Property object in a program:
\code
Property p;
p.fromConfigFile("opencv_grabber_basic.ini");
// of course you could construct the Property object on-the-fly
PolyDriver dev;
dev.open(p);
if (dev.isValid()) { /* use the device via view method */ }
\endcode
Here is a list of properties checked when starting up a device based on this configuration file.
Note that which properties are checked can depend on whether other properties are present.
In some cases properties can also vary between operating systems.
So this is just an example

<table>
<tr><td>PROPERTY</td><td>DESCRIPTION</td><td>DEFAULT</td></tr>
<tr><td>device</td><td></td><td></td></tr>
<tr><td>movie</td><td>if present, read from specified file rather than camera</td><td></td></tr>
<tr><td>camera</td><td>if present, read from camera identified by this index</td><td>0</td></tr>
<tr><td>framerate</td><td>if present, specifies desired camera device framerate</td><td></td></tr>
<tr><td>flip_x</td><td>if present, flip the image along the x-axis</td><td></td></tr>
<tr><td>flip_y</td><td>if present, flip the image along the y-axis</td><td></td></tr>
<tr><td>transpose</td><td>if present, rotate the image along of 90 degrees</td><td></td></tr>
<tr><td>width</td><td>if present, specifies desired image width</td><td></td></tr>
<tr><td>height</td><td>if present, specifies desired image height</td><td></td></tr>
</table>

\sa OpenCVGrabber

 */
