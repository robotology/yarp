name: CI Workflow Debug

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_target:
    types: [opened, synchronize, reopened]
    branches:
      - 'master'
      - 'yarp-*'
      - 'feature/*'
      - 'CI/*'

jobs:

  select_environment:
    name: 'Prepare Environment'
    runs-on: ubuntu-20.04
    outputs:
      timestamp: ${{ steps.select.outputs.timestamp }}
      repository: ${{ steps.select.outputs.repository }}
      ref: ${{ steps.select.outputs.ref }}
      environment: ${{ steps.select.outputs.environment }}
      sha: ${{ steps.select.outputs.sha }}
      head_ref: ${{ steps.select.outputs.head_ref }}
      base_ref: ${{ steps.select.outputs.base_ref }}
      pr_number: ${{ steps.select.outputs.pr_number }}
      yarp_version: ${{ steps.select.outputs.yarp_version }}
    steps:
    - name: "Set output variables"
      id: select
      run: |
        echo "timestamp=$(/bin/date -u +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

        echo "repository=${{ github.repository }}" >> $GITHUB_OUTPUT

        if [[ "$GITHUB_EVENT_NAME" = "pull_request_target" ]]; then
          echo "environment=code-analysis_unsafe" >> $GITHUB_OUTPUT
          echo "ref=refs/pull/$(cat $GITHUB_EVENT_PATH | jq .number)/merge" >> $GITHUB_OUTPUT
        else
          echo "environment=code-analysis" >> $GITHUB_OUTPUT
          echo "ref=${{ github.ref }}" >> $GITHUB_OUTPUT
        fi
        if [[ "$GITHUB_EVENT_NAME" = "pull_request" || "$GITHUB_EVENT_NAME" == "pull_request_target" ]]; then
          echo "sha=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
          echo "head_ref=${GITHUB_HEAD_REF}" >> $GITHUB_OUTPUT
          echo "base_ref=${GITHUB_BASE_REF}" >> $GITHUB_OUTPUT
          echo "pr_number=$(cat $GITHUB_EVENT_PATH | jq .number)" >> $GITHUB_OUTPUT
        else
          echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT
        fi

        # Get YARP Project Version
        if [[ "$GITHUB_EVENT_NAME" = "release" ]]; then
          echo "yarp_version=$(awk '/ VERSION /{print $2}' CMakeLists.txt)" >> $GITHUB_OUTPUT
        fi

    - name: 'Debug output variables'
      env:
        TIMESTAMP: ${{ steps.select.outputs.timestamp }}
        REPOSITORY: ${{ steps.select.outputs.repository }}
        REF: ${{ steps.select.outputs.ref }}
        ENVIRONMENT: ${{ steps.select.outputs.environment }}
        SHA: ${{ steps.select.outputs.sha }}
        HEAD_REF: ${{ steps.select.outputs.head_ref }}
        BASE_REF: ${{ steps.select.outputs.base_ref }}
        PR_NUMBER: ${{ steps.select.outputs.pr_number }}
        YARP_VERSION: ${{ steps.select.outputs.yarp_version }}
      run: |
        echo "TIMESTAMP = ${TIMESTAMP}"
        echo "REPOSITORY = ${REPOSITORY}"
        echo "REF = ${REF}"
        echo "ENVIRONMENT = ${ENVIRONMENT}"
        echo "SHA = ${SHA}"
        echo "HEAD_REF = ${HEAD_REF}"
        echo "BASE_REF = ${BASE_REF}"
        echo "PR_NUMBER = ${PR_NUMBER}"
        echo "YARP_VERSION = ${YARP_VERSION}"

    - name: "Print Environment"
      run: |
        env

    - name: "Print Event Json"
      run: |
        echo "::group::install jq"
        sudo apt-get update -qq
        sudo apt-get install -qq -y jq
        echo "::endgroup::"

        cat $GITHUB_EVENT_PATH | jq -C

  clone_repo:
    name: 'Clone Repository'
    needs: select_environment
    runs-on: ubuntu-20.04
    steps:
    - name: Clone repository
      uses: actions/checkout@v2
      with:
        repository: ${{ needs.select_environment.outputs.repository }}
        ref: ${{ needs.select_environment.outputs.ref }}
