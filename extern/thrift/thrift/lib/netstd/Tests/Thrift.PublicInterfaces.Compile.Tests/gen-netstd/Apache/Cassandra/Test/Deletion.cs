/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace Apache.Cassandra.Test
{

  /// <summary>
  /// Note that the timestamp is only optional in case of counter deletion.
  /// </summary>
  [DataContract(Namespace="")]
  public partial class Deletion : TBase
  {
    private long _timestamp;
    private byte[] _super_column;
    private global::Apache.Cassandra.Test.SlicePredicate _predicate;

    [DataMember(Order = 0)]
    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    [DataMember(Order = 0)]
    public byte[] Super_column
    {
      get
      {
        return _super_column;
      }
      set
      {
        __isset.super_column = true;
        this._super_column = value;
      }
    }

    [DataMember(Order = 0)]
    public global::Apache.Cassandra.Test.SlicePredicate Predicate
    {
      get
      {
        return _predicate;
      }
      set
      {
        __isset.predicate = true;
        this._predicate = value;
      }
    }


    [DataMember(Order = 1)]
    public Isset __isset;
    [DataContract]
    public struct Isset
    {
      [DataMember]
      public bool timestamp;
      [DataMember]
      public bool super_column;
      [DataMember]
      public bool predicate;
    }

    #region XmlSerializer support

    public bool ShouldSerializeTimestamp()
    {
      return __isset.timestamp;
    }

    public bool ShouldSerializeSuper_column()
    {
      return __isset.super_column;
    }

    public bool ShouldSerializePredicate()
    {
      return __isset.predicate;
    }

    #endregion XmlSerializer support

    public Deletion()
    {
    }

    public Deletion DeepCopy()
    {
      var tmp62 = new Deletion();
      if(__isset.timestamp)
      {
        tmp62.Timestamp = this.Timestamp;
      }
      tmp62.__isset.timestamp = this.__isset.timestamp;
      if((Super_column != null) && __isset.super_column)
      {
        tmp62.Super_column = this.Super_column.ToArray();
      }
      tmp62.__isset.super_column = this.__isset.super_column;
      if((Predicate != null) && __isset.predicate)
      {
        tmp62.Predicate = (global::Apache.Cassandra.Test.SlicePredicate)this.Predicate.DeepCopy();
      }
      tmp62.__isset.predicate = this.__isset.predicate;
      return tmp62;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                Timestamp = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Super_column = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                Predicate = new global::Apache.Cassandra.Test.SlicePredicate();
                await Predicate.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("Deletion");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if(__isset.timestamp)
        {
          field.Name = "timestamp";
          field.Type = TType.I64;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Timestamp, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Super_column != null) && __isset.super_column)
        {
          field.Name = "super_column";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Super_column, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Predicate != null) && __isset.predicate)
        {
          field.Name = "predicate";
          field.Type = TType.Struct;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Predicate.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Deletion other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.timestamp == other.__isset.timestamp) && ((!__isset.timestamp) || (System.Object.Equals(Timestamp, other.Timestamp))))
        && ((__isset.super_column == other.__isset.super_column) && ((!__isset.super_column) || (TCollections.Equals(Super_column, other.Super_column))))
        && ((__isset.predicate == other.__isset.predicate) && ((!__isset.predicate) || (System.Object.Equals(Predicate, other.Predicate))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.timestamp)
        {
          hashcode = (hashcode * 397) + Timestamp.GetHashCode();
        }
        if((Super_column != null) && __isset.super_column)
        {
          hashcode = (hashcode * 397) + Super_column.GetHashCode();
        }
        if((Predicate != null) && __isset.predicate)
        {
          hashcode = (hashcode * 397) + Predicate.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("Deletion(");
      int tmp63 = 0;
      if(__isset.timestamp)
      {
        if(0 < tmp63++) { sb.Append(", "); }
        sb.Append("Timestamp: ");
        Timestamp.ToString(sb);
      }
      if((Super_column != null) && __isset.super_column)
      {
        if(0 < tmp63++) { sb.Append(", "); }
        sb.Append("Super_column: ");
        Super_column.ToString(sb);
      }
      if((Predicate != null) && __isset.predicate)
      {
        if(0 < tmp63++) { sb.Append(", "); }
        sb.Append("Predicate: ");
        Predicate.ToString(sb);
      }
      sb.Append(')');
      return sb.ToString();
    }
  }

}
