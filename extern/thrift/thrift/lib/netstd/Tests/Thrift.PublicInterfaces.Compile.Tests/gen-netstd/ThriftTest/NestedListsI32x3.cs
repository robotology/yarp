/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace ThriftTest
{

[DataContract(Namespace="")]
public partial class NestedListsI32x3 : TBase
{
  private List<List<List<int>>> _integerlist;

  [DataMember(Order = 0)]
  public List<List<List<int>>> Integerlist
  {
    get
    {
      return _integerlist;
    }
    set
    {
      __isset.integerlist = true;
      this._integerlist = value;
    }
  }


  [DataMember(Order = 1)]
  public Isset __isset;
  [DataContract]
  public struct Isset
  {
    [DataMember]
    public bool integerlist;
  }

  #region XmlSerializer support

  public bool ShouldSerializeIntegerlist()
  {
    return __isset.integerlist;
  }

  #endregion XmlSerializer support

  public NestedListsI32x3()
  {
  }

  public NestedListsI32x3 DeepCopy()
  {
    var tmp127 = new NestedListsI32x3();
    if((Integerlist != null) && __isset.integerlist)
    {
      tmp127.Integerlist = this.Integerlist.DeepCopy();
    }
    tmp127.__isset.integerlist = this.__isset.integerlist;
    return tmp127;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List)
            {
              {
                TList _list128 = await iprot.ReadListBeginAsync(cancellationToken);
                Integerlist = new List<List<List<int>>>(_list128.Count);
                for(int _i129 = 0; _i129 < _list128.Count; ++_i129)
                {
                  List<List<int>> _elem130;
                  {
                    TList _list131 = await iprot.ReadListBeginAsync(cancellationToken);
                    _elem130 = new List<List<int>>(_list131.Count);
                    for(int _i132 = 0; _i132 < _list131.Count; ++_i132)
                    {
                      List<int> _elem133;
                      {
                        TList _list134 = await iprot.ReadListBeginAsync(cancellationToken);
                        _elem133 = new List<int>(_list134.Count);
                        for(int _i135 = 0; _i135 < _list134.Count; ++_i135)
                        {
                          int _elem136;
                          _elem136 = await iprot.ReadI32Async(cancellationToken);
                          _elem133.Add(_elem136);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      _elem130.Add(_elem133);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                  Integerlist.Add(_elem130);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("NestedListsI32x3");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if((Integerlist != null) && __isset.integerlist)
      {
        field.Name = "integerlist";
        field.Type = TType.List;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.List, Integerlist.Count), cancellationToken);
          foreach (List<List<int>> _iter137 in Integerlist)
          {
            {
              await oprot.WriteListBeginAsync(new TList(TType.List, _iter137.Count), cancellationToken);
              foreach (List<int> _iter138 in _iter137)
              {
                {
                  await oprot.WriteListBeginAsync(new TList(TType.I32, _iter138.Count), cancellationToken);
                  foreach (int _iter139 in _iter138)
                  {
                    await oprot.WriteI32Async(_iter139, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
                }
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is NestedListsI32x3 other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.integerlist == other.__isset.integerlist) && ((!__isset.integerlist) || (TCollections.Equals(Integerlist, other.Integerlist))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Integerlist != null) && __isset.integerlist)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Integerlist);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("NestedListsI32x3(");
    int tmp140 = 0;
    if((Integerlist != null) && __isset.integerlist)
    {
      if(0 < tmp140++) { sb.Append(", "); }
      sb.Append("Integerlist: ");
      Integerlist.ToString(sb);
    }
    sb.Append(')');
    return sb.ToString();
  }
}

}
