/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace Apache.Cassandra.Test
{

  /// <summary>
  /// ColumnParent is used when selecting groups of columns from the same ColumnFamily. In directory structure terms, imagine
  /// ColumnParent as ColumnPath + '/../'.
  /// 
  /// See also <a href="cassandra.html#Struct_ColumnPath">ColumnPath</a>
  /// </summary>
  [DataContract(Namespace="")]
  public partial class ColumnParent : TBase
  {
    private byte[] _super_column;

    [DataMember(Order = 0)]
    public string Column_family { get; set; }

    [DataMember(Order = 0)]
    public byte[] Super_column
    {
      get
      {
        return _super_column;
      }
      set
      {
        __isset.super_column = true;
        this._super_column = value;
      }
    }


    [DataMember(Order = 1)]
    public Isset __isset;
    [DataContract]
    public struct Isset
    {
      [DataMember]
      public bool super_column;
    }

    #region XmlSerializer support

    public bool ShouldSerializeSuper_column()
    {
      return __isset.super_column;
    }

    #endregion XmlSerializer support

    public ColumnParent()
    {
    }

    public ColumnParent(string column_family) : this()
    {
      this.Column_family = column_family;
    }

    public ColumnParent DeepCopy()
    {
      var tmp32 = new ColumnParent();
      if((Column_family != null))
      {
        tmp32.Column_family = this.Column_family;
      }
      if((Super_column != null) && __isset.super_column)
      {
        tmp32.Super_column = this.Super_column.ToArray();
      }
      tmp32.__isset.super_column = this.__isset.super_column;
      return tmp32;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_column_family = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 3:
              if (field.Type == TType.String)
              {
                Column_family = await iprot.ReadStringAsync(cancellationToken);
                isset_column_family = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Super_column = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_column_family)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("ColumnParent");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if((Column_family != null))
        {
          field.Name = "column_family";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Column_family, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Super_column != null) && __isset.super_column)
        {
          field.Name = "super_column";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(Super_column, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ColumnParent other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Column_family, other.Column_family)
        && ((__isset.super_column == other.__isset.super_column) && ((!__isset.super_column) || (TCollections.Equals(Super_column, other.Super_column))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Column_family != null))
        {
          hashcode = (hashcode * 397) + Column_family.GetHashCode();
        }
        if((Super_column != null) && __isset.super_column)
        {
          hashcode = (hashcode * 397) + Super_column.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("ColumnParent(");
      if((Column_family != null))
      {
        sb.Append(", Column_family: ");
        Column_family.ToString(sb);
      }
      if((Super_column != null) && __isset.super_column)
      {
        sb.Append(", Super_column: ");
        Super_column.ToString(sb);
      }
      sb.Append(')');
      return sb.ToString();
    }
  }

}
