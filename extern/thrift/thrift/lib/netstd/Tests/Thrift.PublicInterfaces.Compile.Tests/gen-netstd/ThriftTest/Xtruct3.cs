/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace ThriftTest
{

  [DataContract(Namespace="")]
  public partial class Xtruct3 : TBase
  {
    private string _string_thing;
    private int _changed;
    private int _i32_thing;
    private long _i64_thing;

    [DataMember(Order = 0)]
    public string String_thing
    {
      get
      {
        return _string_thing;
      }
      set
      {
        __isset.string_thing = true;
        this._string_thing = value;
      }
    }

    [DataMember(Order = 0)]
    public int Changed
    {
      get
      {
        return _changed;
      }
      set
      {
        __isset.changed = true;
        this._changed = value;
      }
    }

    [DataMember(Order = 0)]
    public int I32_thing
    {
      get
      {
        return _i32_thing;
      }
      set
      {
        __isset.i32_thing = true;
        this._i32_thing = value;
      }
    }

    [DataMember(Order = 0)]
    public long I64_thing
    {
      get
      {
        return _i64_thing;
      }
      set
      {
        __isset.i64_thing = true;
        this._i64_thing = value;
      }
    }


    [DataMember(Order = 1)]
    public Isset __isset;
    [DataContract]
    public struct Isset
    {
      [DataMember]
      public bool string_thing;
      [DataMember]
      public bool changed;
      [DataMember]
      public bool i32_thing;
      [DataMember]
      public bool i64_thing;
    }

    #region XmlSerializer support

    public bool ShouldSerializeString_thing()
    {
      return __isset.string_thing;
    }

    public bool ShouldSerializeChanged()
    {
      return __isset.changed;
    }

    public bool ShouldSerializeI32_thing()
    {
      return __isset.i32_thing;
    }

    public bool ShouldSerializeI64_thing()
    {
      return __isset.i64_thing;
    }

    #endregion XmlSerializer support

    public Xtruct3()
    {
    }

    public Xtruct3 DeepCopy()
    {
      var tmp8 = new Xtruct3();
      if((String_thing != null) && __isset.string_thing)
      {
        tmp8.String_thing = this.String_thing;
      }
      tmp8.__isset.string_thing = this.__isset.string_thing;
      if(__isset.changed)
      {
        tmp8.Changed = this.Changed;
      }
      tmp8.__isset.changed = this.__isset.changed;
      if(__isset.i32_thing)
      {
        tmp8.I32_thing = this.I32_thing;
      }
      tmp8.__isset.i32_thing = this.__isset.i32_thing;
      if(__isset.i64_thing)
      {
        tmp8.I64_thing = this.I64_thing;
      }
      tmp8.__isset.i64_thing = this.__isset.i64_thing;
      return tmp8;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                String_thing = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Changed = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.I32)
              {
                I32_thing = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 11:
              if (field.Type == TType.I64)
              {
                I64_thing = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("Xtruct3");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if((String_thing != null) && __isset.string_thing)
        {
          field.Name = "string_thing";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(String_thing, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.changed)
        {
          field.Name = "changed";
          field.Type = TType.I32;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Changed, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.i32_thing)
        {
          field.Name = "i32_thing";
          field.Type = TType.I32;
          field.ID = 9;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(I32_thing, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.i64_thing)
        {
          field.Name = "i64_thing";
          field.Type = TType.I64;
          field.ID = 11;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(I64_thing, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Xtruct3 other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.string_thing == other.__isset.string_thing) && ((!__isset.string_thing) || (System.Object.Equals(String_thing, other.String_thing))))
        && ((__isset.changed == other.__isset.changed) && ((!__isset.changed) || (System.Object.Equals(Changed, other.Changed))))
        && ((__isset.i32_thing == other.__isset.i32_thing) && ((!__isset.i32_thing) || (System.Object.Equals(I32_thing, other.I32_thing))))
        && ((__isset.i64_thing == other.__isset.i64_thing) && ((!__isset.i64_thing) || (System.Object.Equals(I64_thing, other.I64_thing))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((String_thing != null) && __isset.string_thing)
        {
          hashcode = (hashcode * 397) + String_thing.GetHashCode();
        }
        if(__isset.changed)
        {
          hashcode = (hashcode * 397) + Changed.GetHashCode();
        }
        if(__isset.i32_thing)
        {
          hashcode = (hashcode * 397) + I32_thing.GetHashCode();
        }
        if(__isset.i64_thing)
        {
          hashcode = (hashcode * 397) + I64_thing.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("Xtruct3(");
      int tmp9 = 0;
      if((String_thing != null) && __isset.string_thing)
      {
        if(0 < tmp9++) { sb.Append(", "); }
        sb.Append("String_thing: ");
        String_thing.ToString(sb);
      }
      if(__isset.changed)
      {
        if(0 < tmp9++) { sb.Append(", "); }
        sb.Append("Changed: ");
        Changed.ToString(sb);
      }
      if(__isset.i32_thing)
      {
        if(0 < tmp9++) { sb.Append(", "); }
        sb.Append("I32_thing: ");
        I32_thing.ToString(sb);
      }
      if(__isset.i64_thing)
      {
        if(0 < tmp9++) { sb.Append(", "); }
        sb.Append("I64_thing: ");
        I64_thing.ToString(sb);
      }
      sb.Append(')');
      return sb.ToString();
    }
  }

}
