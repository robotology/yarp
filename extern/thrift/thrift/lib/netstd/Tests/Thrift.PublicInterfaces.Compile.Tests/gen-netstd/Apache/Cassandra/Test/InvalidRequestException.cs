/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace Apache.Cassandra.Test
{

  /// <summary>
  /// Invalid request could mean keyspace or column family does not exist, required parameters are missing, or a parameter is malformed.
  /// why contains an associated error message.
  /// </summary>
  public partial class InvalidRequestException : TException, TBase
  {

    [DataMember(Order = 0)]
    public string Why { get; set; }

    public InvalidRequestException()
    {
    }

    public InvalidRequestException(string why) : this()
    {
      this.Why = why;
    }

    public InvalidRequestException DeepCopy()
    {
      var tmp20 = new InvalidRequestException();
      if((Why != null))
      {
        tmp20.Why = this.Why;
      }
      return tmp20;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_why = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Why = await iprot.ReadStringAsync(cancellationToken);
                isset_why = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_why)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("InvalidRequestException");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if((Why != null))
        {
          field.Name = "why";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Why, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is InvalidRequestException other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(Why, other.Why);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Why != null))
        {
          hashcode = (hashcode * 397) + Why.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("InvalidRequestException(");
      if((Why != null))
      {
        sb.Append(", Why: ");
        Why.ToString(sb);
      }
      sb.Append(')');
      return sb.ToString();
    }
  }


  [DataContract]
  public partial class InvalidRequestExceptionFault
  {

    [DataMember(Order = 0)]
    public string Why { get; set; }

  }

}
