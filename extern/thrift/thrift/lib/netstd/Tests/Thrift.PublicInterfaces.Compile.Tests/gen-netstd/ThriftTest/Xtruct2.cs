/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace ThriftTest
{

  [DataContract(Namespace="")]
  public partial class Xtruct2 : TBase
  {
    private sbyte _byte_thing;
    private global::ThriftTest.Xtruct _struct_thing;
    private int _i32_thing;

    [DataMember(Order = 0)]
    public sbyte Byte_thing
    {
      get
      {
        return _byte_thing;
      }
      set
      {
        __isset.byte_thing = true;
        this._byte_thing = value;
      }
    }

    [DataMember(Order = 0)]
    public global::ThriftTest.Xtruct Struct_thing
    {
      get
      {
        return _struct_thing;
      }
      set
      {
        __isset.struct_thing = true;
        this._struct_thing = value;
      }
    }

    [DataMember(Order = 0)]
    public int I32_thing
    {
      get
      {
        return _i32_thing;
      }
      set
      {
        __isset.i32_thing = true;
        this._i32_thing = value;
      }
    }


    [DataMember(Order = 1)]
    public Isset __isset;
    [DataContract]
    public struct Isset
    {
      [DataMember]
      public bool byte_thing;
      [DataMember]
      public bool struct_thing;
      [DataMember]
      public bool i32_thing;
    }

    #region XmlSerializer support

    public bool ShouldSerializeByte_thing()
    {
      return __isset.byte_thing;
    }

    public bool ShouldSerializeStruct_thing()
    {
      return __isset.struct_thing;
    }

    public bool ShouldSerializeI32_thing()
    {
      return __isset.i32_thing;
    }

    #endregion XmlSerializer support

    public Xtruct2()
    {
    }

    public Xtruct2 DeepCopy()
    {
      var tmp6 = new Xtruct2();
      if(__isset.byte_thing)
      {
        tmp6.Byte_thing = this.Byte_thing;
      }
      tmp6.__isset.byte_thing = this.__isset.byte_thing;
      if((Struct_thing != null) && __isset.struct_thing)
      {
        tmp6.Struct_thing = (global::ThriftTest.Xtruct)this.Struct_thing.DeepCopy();
      }
      tmp6.__isset.struct_thing = this.__isset.struct_thing;
      if(__isset.i32_thing)
      {
        tmp6.I32_thing = this.I32_thing;
      }
      tmp6.__isset.i32_thing = this.__isset.i32_thing;
      return tmp6;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Byte)
              {
                Byte_thing = await iprot.ReadByteAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Struct_thing = new global::ThriftTest.Xtruct();
                await Struct_thing.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                I32_thing = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("Xtruct2");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if(__isset.byte_thing)
        {
          field.Name = "byte_thing";
          field.Type = TType.Byte;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteByteAsync(Byte_thing, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Struct_thing != null) && __isset.struct_thing)
        {
          field.Name = "struct_thing";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Struct_thing.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.i32_thing)
        {
          field.Name = "i32_thing";
          field.Type = TType.I32;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(I32_thing, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Xtruct2 other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.byte_thing == other.__isset.byte_thing) && ((!__isset.byte_thing) || (System.Object.Equals(Byte_thing, other.Byte_thing))))
        && ((__isset.struct_thing == other.__isset.struct_thing) && ((!__isset.struct_thing) || (System.Object.Equals(Struct_thing, other.Struct_thing))))
        && ((__isset.i32_thing == other.__isset.i32_thing) && ((!__isset.i32_thing) || (System.Object.Equals(I32_thing, other.I32_thing))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.byte_thing)
        {
          hashcode = (hashcode * 397) + Byte_thing.GetHashCode();
        }
        if((Struct_thing != null) && __isset.struct_thing)
        {
          hashcode = (hashcode * 397) + Struct_thing.GetHashCode();
        }
        if(__isset.i32_thing)
        {
          hashcode = (hashcode * 397) + I32_thing.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("Xtruct2(");
      int tmp7 = 0;
      if(__isset.byte_thing)
      {
        if(0 < tmp7++) { sb.Append(", "); }
        sb.Append("Byte_thing: ");
        Byte_thing.ToString(sb);
      }
      if((Struct_thing != null) && __isset.struct_thing)
      {
        if(0 < tmp7++) { sb.Append(", "); }
        sb.Append("Struct_thing: ");
        Struct_thing.ToString(sb);
      }
      if(__isset.i32_thing)
      {
        if(0 < tmp7++) { sb.Append(", "); }
        sb.Append("I32_thing: ");
        I32_thing.ToString(sb);
      }
      sb.Append(')');
      return sb.ToString();
    }
  }

}
