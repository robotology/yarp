/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace ThriftTest
{

[DataContract(Namespace="")]
public partial class OneField : TBase
{
  private global::ThriftTest.EmptyStruct _field;

  [DataMember(Order = 0)]
  public global::ThriftTest.EmptyStruct Field
  {
    get
    {
      return _field;
    }
    set
    {
      __isset.field = true;
      this._field = value;
    }
  }


  [DataMember(Order = 1)]
  public Isset __isset;
  [DataContract]
  public struct Isset
  {
    [DataMember]
    public bool field;
  }

  #region XmlSerializer support

  public bool ShouldSerializeField()
  {
    return __isset.field;
  }

  #endregion XmlSerializer support

  public OneField()
  {
  }

  public OneField DeepCopy()
  {
    var tmp69 = new OneField();
    if((Field != null) && __isset.field)
    {
      tmp69.Field = (global::ThriftTest.EmptyStruct)this.Field.DeepCopy();
    }
    tmp69.__isset.field = this.__isset.field;
    return tmp69;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct)
            {
              Field = new global::ThriftTest.EmptyStruct();
              await Field.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("OneField");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if((Field != null) && __isset.field)
      {
        field.Name = "field";
        field.Type = TType.Struct;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Field.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is OneField other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.field == other.__isset.field) && ((!__isset.field) || (System.Object.Equals(Field, other.Field))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Field != null) && __isset.field)
      {
        hashcode = (hashcode * 397) + Field.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("OneField(");
    int tmp70 = 0;
    if((Field != null) && __isset.field)
    {
      if(0 < tmp70++) { sb.Append(", "); }
      sb.Append("Field: ");
      Field.ToString(sb);
    }
    sb.Append(')');
    return sb.ToString();
  }
}

}
