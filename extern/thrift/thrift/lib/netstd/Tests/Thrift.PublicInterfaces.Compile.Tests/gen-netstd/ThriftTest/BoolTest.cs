/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace ThriftTest
{

[DataContract(Namespace="")]
public partial class BoolTest : TBase
{
  private bool _b;
  private string _s;

  [DataMember(Order = 0)]
  public bool B
  {
    get
    {
      return _b;
    }
    set
    {
      __isset.b = true;
      this._b = value;
    }
  }

  [DataMember(Order = 0)]
  public string S
  {
    get
    {
      return _s;
    }
    set
    {
      __isset.s = true;
      this._s = value;
    }
  }


  [DataMember(Order = 1)]
  public Isset __isset;
  [DataContract]
  public struct Isset
  {
    [DataMember]
    public bool b;
    [DataMember]
    public bool s;
  }

  #region XmlSerializer support

  public bool ShouldSerializeB()
  {
    return __isset.b;
  }

  public bool ShouldSerializeS()
  {
    return __isset.s;
  }

  #endregion XmlSerializer support

  public BoolTest()
  {
    this._b = true;
    this.__isset.b = true;
    this._s = "true";
    this.__isset.s = true;
  }

  public BoolTest DeepCopy()
  {
    var tmp193 = new BoolTest();
    if(__isset.b)
    {
      tmp193.B = this.B;
    }
    tmp193.__isset.b = this.__isset.b;
    if((S != null) && __isset.s)
    {
      tmp193.S = this.S;
    }
    tmp193.__isset.s = this.__isset.s;
    return tmp193;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool)
            {
              B = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              S = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("BoolTest");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if(__isset.b)
      {
        field.Name = "b";
        field.Type = TType.Bool;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(B, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((S != null) && __isset.s)
      {
        field.Name = "s";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(S, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is BoolTest other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.b == other.__isset.b) && ((!__isset.b) || (System.Object.Equals(B, other.B))))
      && ((__isset.s == other.__isset.s) && ((!__isset.s) || (System.Object.Equals(S, other.S))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.b)
      {
        hashcode = (hashcode * 397) + B.GetHashCode();
      }
      if((S != null) && __isset.s)
      {
        hashcode = (hashcode * 397) + S.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("BoolTest(");
    int tmp194 = 0;
    if(__isset.b)
    {
      if(0 < tmp194++) { sb.Append(", "); }
      sb.Append("B: ");
      B.ToString(sb);
    }
    if((S != null) && __isset.s)
    {
      if(0 < tmp194++) { sb.Append(", "); }
      sb.Append("S: ");
      S.ToString(sb);
    }
    sb.Append(')');
    return sb.ToString();
  }
}

}
