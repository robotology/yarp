/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace Apache.Cassandra.Test
{

  /// <summary>
  /// Authentication requests can contain any data, dependent on the IAuthenticator used
  /// </summary>
  [DataContract(Namespace="")]
  public partial class AuthenticationRequest : TBase
  {

    [DataMember(Order = 0)]
    public Dictionary<string, string> Credentials { get; set; }

    public AuthenticationRequest()
    {
    }

    public AuthenticationRequest(Dictionary<string, string> credentials) : this()
    {
      this.Credentials = credentials;
    }

    public AuthenticationRequest DeepCopy()
    {
      var tmp82 = new AuthenticationRequest();
      if((Credentials != null))
      {
        tmp82.Credentials = this.Credentials.DeepCopy();
      }
      return tmp82;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_credentials = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map83 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Credentials = new Dictionary<string, string>(_map83.Count);
                  for(int _i84 = 0; _i84 < _map83.Count; ++_i84)
                  {
                    string _key85;
                    string _val86;
                    _key85 = await iprot.ReadStringAsync(cancellationToken);
                    _val86 = await iprot.ReadStringAsync(cancellationToken);
                    Credentials[_key85] = _val86;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
                isset_credentials = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_credentials)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AuthenticationRequest");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if((Credentials != null))
        {
          field.Name = "credentials";
          field.Type = TType.Map;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Credentials.Count), cancellationToken);
            foreach (string _iter87 in Credentials.Keys)
            {
              await oprot.WriteStringAsync(_iter87, cancellationToken);
              await oprot.WriteStringAsync(Credentials[_iter87], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is AuthenticationRequest other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Credentials, other.Credentials);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Credentials != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Credentials);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AuthenticationRequest(");
      if((Credentials != null))
      {
        sb.Append(", Credentials: ");
        Credentials.ToString(sb);
      }
      sb.Append(')');
      return sb.ToString();
    }
  }

}
