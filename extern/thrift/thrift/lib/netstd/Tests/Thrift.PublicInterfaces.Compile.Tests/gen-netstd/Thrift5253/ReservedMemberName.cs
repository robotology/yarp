/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using System.ServiceModel;
using System.Runtime.Serialization;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace Thrift5253
{

  [DataContract(Namespace="")]
  public partial class ReservedMemberName : TBase
  {
    private int _Isset;

    [DataMember(Order = 0)]
    public int Isset_
    {
      get
      {
        return _Isset;
      }
      set
      {
        __isset.Isset_ = true;
        this._Isset = value;
      }
    }


    [DataMember(Order = 1)]
    public Isset __isset;
    [DataContract]
    public struct Isset
    {
      [DataMember]
      public bool Isset_;
    }

    #region XmlSerializer support

    public bool ShouldSerializeIsset_()
    {
      return __isset.Isset_;
    }

    #endregion XmlSerializer support

    public ReservedMemberName()
    {
    }

    public ReservedMemberName DeepCopy()
    {
      var tmp16 = new ReservedMemberName();
      if(__isset.Isset_)
      {
        tmp16.Isset_ = this.Isset_;
      }
      tmp16.__isset.Isset_ = this.__isset.Isset_;
      return tmp16;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Isset_ = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("ReservedMemberName");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if(__isset.Isset_)
        {
          field.Name = "Isset";
          field.Type = TType.I32;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Isset_, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is ReservedMemberName other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.Isset_ == other.__isset.Isset_) && ((!__isset.Isset_) || (System.Object.Equals(Isset_, other.Isset_))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.Isset_)
        {
          hashcode = (hashcode * 397) + Isset_.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("ReservedMemberName(");
      int tmp17 = 0;
      if(__isset.Isset_)
      {
        if(0 < tmp17++) { sb.Append(", "); }
        sb.Append("Isset_: ");
        Isset_.ToString(sb);
      }
      sb.Append(')');
      return sb.ToString();
    }
  }

}
