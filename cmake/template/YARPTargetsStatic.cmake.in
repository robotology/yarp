# Copyright (C) 2006-2018 Istituto Italiano di Tecnologia (IIT)
# All rights reserved.
#
# This software may be modified and distributed under the terms of the
# BSD-3-Clause license. See the accompanying LICENSE file for details.


# For static builds, all the dependencies used by targets in YARPTargets.cmake
# must be available before including the file, but due to the recursive
# dependencies in YARP_init, we are forced to use a hack

# Pretend to be looking for a different package (YARP_static_hack)
set(_CMAKE_FIND_PACKAGE_NAME ${CMAKE_FIND_PACKAGE_NAME})
set(CMAKE_FIND_PACKAGE_NAME YARP_static_hack)

# Include the targets file. This will set the YARP_static_hack_NOT_FOUND_MESSAGE
# variable because some targets are still missing.
include("${CMAKE_CURRENT_LIST_DIR}/YARPTargets.cmake")

# Include all targets files for the missing targets found in the
# YARP_static_hack_NOT_FOUND_MESSAGE variable
# Accumulate all targets not found in the _expected_targets variable
string(REGEX REPLACE ".+:  (.+)" "\\1" _targets "${YARP_static_hack_NOT_FOUND_MESSAGE}")
string(REGEX REPLACE " " ";" _targets "${_targets}")
set(_expected_targets ${_targets})
string(REGEX REPLACE "YARP::" "" _targets "${_targets}")
foreach(_target ${_targets})
  include("${YARP_CMAKECONFIG_DIR}/${_target}/${_target}Targets.cmake")
  string(REGEX REPLACE ".+:  (.+)" "\\1" _ts "${YARP_static_hack_NOT_FOUND_MESSAGE}")
  string(REGEX REPLACE " " ";" _ts "${_ts}")
  list(APPEND _expected_targets "${_ts}")
endforeach()
if(NOT "${_expected_targets}" STREQUAL "")
  list(REMOVE_DUPLICATES _expected_targets)
endif()

# Properly find the dependencies. This will force to include all the
# dependencies also for packages in other exports
foreach(_target ${_targets})
  # FIXME Remove this check when CMake 3.9 or later is required
  if (CMAKE_VERSION VERSION_LESS 3.9)
    find_package(${_target}
                 ${_YARP_FIND_PARTS_QUIET}
                 ${_YARP_FIND_PARTS_REQUIRED}
                 HINTS "${YARP_CMAKECONFIG_DIR}"
                 NO_DEFAULT_PATH)
  else()
    find_dependency(${_target}
                    HINTS "${YARP_CMAKECONFIG_DIR}"
                    NO_DEFAULT_PATH)
  endif()
endforeach()

# Restore the original situation
unset(YARP_static_hack_FOUND)
unset(YARP_static_hack_NOT_FOUND_MESSAGE)
set(CMAKE_FIND_PACKAGE_NAME ${_CMAKE_FIND_PACKAGE_NAME})
unset(_CMAKE_FIND_PACKAGE_NAME)

# Finally perform the check, usually performed inside the target files
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
foreach(_target ${_expected_targets} )
  if(NOT TARGET "${_target}" )
    message(FATAL_ERROR "set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets \"${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets} ${_target}\")")
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets "${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets} ${_target}")
  endif()
endforeach()

if(DEFINED ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
  if(CMAKE_FIND_PACKAGE_NAME)
    set( ${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    set( ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  else()
    message(FATAL_ERROR "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  endif()
endif()
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
