# Copyright (C) 2006-2019 Istituto Italiano di Tecnologia (IIT)
# Copyright (C) 2006-2010 RobotCub Consortium
# All rights reserved.
#
# This software may be modified and distributed under the terms of the
# BSD-3-Clause license. See the accompanying LICENSE file for details.



include(CMakeDependentOption)


# Version
set(YARP_VERSION_MAJOR "@YARP_VERSION_MAJOR@")
set(YARP_VERSION_MINOR "@YARP_VERSION_MINOR@")
set(YARP_VERSION_PATCH "@YARP_VERSION_PATCH@")
set(YARP_VERSION_TWEAK "@YARP_VERSION_TWEAK@")
set(YARP_VERSION "@YARP_VERSION@")
set(YARP_VERSION_SHORT "@YARP_VERSION_SHORT@")

# Build type and flags
set(YARP_IS_SHARED_LIBRARY @BUILD_SHARED_LIBS@)

set(YARP_C_COMPILER_ID "@CMAKE_C_COMPILER_ID@")
set(YARP_C_COMPILER_VERSION "@CMAKE_C_COMPILER_VERSION@")
set(YARP_C_FLAGS "@CMAKE_C_FLAGS@")

set(YARP_CXX_COMPILER_ID "@CMAKE_CXX_COMPILER_ID@")
set(YARP_CXX_COMPILER_VERSION "@CMAKE_CXX_COMPILER_VERSION@")
set(YARP_CXX_FLAGS "@CMAKE_CXX_FLAGS@")


@PACKAGE_INIT@


# Check if deprecated methods are built
set(YARP_NO_DEPRECATED @YARP_NO_DEPRECATED@)
if(YARP_NO_DEPRECATED)
  add_definitions("-DYARP_NO_DEPRECATED")
else(YARP_NO_DEPRECATED)
  set_and_check(YARP_BINDINGS "@PACKAGE_YARP_BINDINGS@")
endif(YARP_NO_DEPRECATED)

# Disable deprecated warnings, but add an option to enable it
cmake_dependent_option(YARP_NO_DEPRECATED_WARNINGS
                       "Do not warn when using YARP deprecated declarations" FALSE
                       "NOT YARP_NO_DEPRECATED" FALSE)
mark_as_advanced(YARP_NO_DEPRECATED_WARNINGS)
if(YARP_NO_DEPRECATED_WARNINGS)
  add_definitions("-DYARP_NO_DEPRECATED_WARNINGS")
endif()


# Install prefix
set(YARP_INSTALL_PREFIX "@PACKAGE_YARP_INSTALL_PREFIX@")

# Directory containing CMake config files for other exports
set(YARP_CMAKECONFIG_DIR "@PACKAGE_YARP_CMAKECONFIG_DIR@")

# Install directories (relative path)
set(YARP_DATA_INSTALL_DIR "@YARP_DATA_INSTALL_DIR@")
set(YARP_CONFIG_INSTALL_DIR "@YARP_CONFIG_INSTALL_DIR@")
set(YARP_PLUGIN_MANIFESTS_INSTALL_DIR "@YARP_PLUGIN_MANIFESTS_INSTALL_DIR@")
set(YARP_MODULES_INSTALL_DIR "@YARP_MODULES_INSTALL_DIR@")
set(YARP_APPLICATIONS_INSTALL_DIR "@YARP_APPLICATIONS_INSTALL_DIR@")
set(YARP_TEMPLATES_INSTALL_DIR "@YARP_TEMPLATES_INSTALL_DIR@")
set(YARP_APPLICATIONS_TEMPLATES_INSTALL_DIR "@YARP_APPLICATIONS_TEMPLATES_INSTALL_DIR@")
set(YARP_MODULES_TEMPLATES_INSTALL_DIR "@YARP_MODULES_TEMPLATES_INSTALL_DIR@")
set(YARP_CONTEXTS_INSTALL_DIR "@YARP_CONTEXTS_INSTALL_DIR@")
set(YARP_ROBOTS_INSTALL_DIR "@YARP_ROBOTS_INSTALL_DIR@")
set(YARP_STATIC_PLUGINS_INSTALL_DIR "@YARP_STATIC_PLUGINS_INSTALL_DIR@")
set(YARP_DYNAMIC_PLUGINS_INSTALL_DIR "@YARP_DYNAMIC_PLUGINS_INSTALL_DIR@")
set(YARP_QML2_IMPORT_DIR "@YARP_QML2_IMPORT_DIR@")

# Install directories (absolute path)
set_and_check(YARP_DATA_INSTALL_DIR_FULL "@PACKAGE_YARP_DATA_INSTALL_DIR@")
set(YARP_CONFIG_INSTALL_DIR_FULL "@PACKAGE_YARP_CONFIG_INSTALL_DIR@")
set(YARP_PLUGIN_MANIFESTS_INSTALL_DIR_FULL "@PACKAGE_YARP_PLUGIN_MANIFESTS_INSTALL_DIR@")
set(YARP_MODULES_INSTALL_DIR_FULL "@PACKAGE_YARP_MODULES_INSTALL_DIR@")
set(YARP_APPLICATIONS_INSTALL_DIR_FULL "@PACKAGE_YARP_APPLICATIONS_INSTALL_DIR@")
set(YARP_TEMPLATES_INSTALL_DIR_FULL "@PACKAGE_YARP_TEMPLATES_INSTALL_DIR@")
set(YARP_APPLICATIONS_TEMPLATES_INSTALL_DIR_FULL "@PACKAGE_YARP_APPLICATIONS_TEMPLATES_INSTALL_DIR@")
set(YARP_MODULES_TEMPLATES_INSTALL_DIR_FULL "@PACKAGE_YARP_MODULES_TEMPLATES_INSTALL_DIR@")
set(YARP_CONTEXTS_INSTALL_DIR_FULL "@PACKAGE_YARP_CONTEXTS_INSTALL_DIR@")
set(YARP_ROBOTS_INSTALL_DIR_FULL "@PACKAGE_YARP_ROBOTS_INSTALL_DIR@")
set(YARP_STATIC_PLUGINS_INSTALL_DIR_FULL "@PACKAGE_YARP_STATIC_PLUGINS_INSTALL_DIR@")
set(YARP_DYNAMIC_PLUGINS_INSTALL_DIR_FULL "@PACKAGE_YARP_DYNAMIC_PLUGINS_INSTALL_DIR@")
set(YARP_QML2_IMPORT_DIR_FULL "@PACKAGE_YARP_QML2_IMPORT_DIR@")

# Used by YarpIDL.cmake
set(YARP_IDL_BINARY_HINT "@PACKAGE_YARP_IDL_BINARY_HINT@")

# CMake modules directories
set_and_check(YARP_MODULE_DIR "@PACKAGE_YARP_MODULE_DIR@")


# Save the variables, that it should not be modified by find_package(YARP), but
# we need to modify it in order to find all the dependencies.
set(_CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH})
set(_YCM_FOUND ${YCM_FOUND})

# Find YCM if needed:
# * If YARP is static therefore we need YCM (or YARP private version) for private
#   dependencies.
# * If deprecated stuff is enabled, we need YCM (or YARP private version) for
#   compatibility with old versions.
# If YCM is not found, the private version is used instead.
if(NOT YARP_IS_SHARED_LIBRARY OR NOT YARP_NO_DEPRECATED)
  # Until YCM is optional, we always want to look for YCM quietly, therefore we
  # use find_package instead of find_dependency.
  # WARNING find_package(YCM) will overwrite the PACKAGE_PREFIX_DIR variable,
  #         therefore this variable is no longer valid after this line
  get_property(_yarp_ycm_transitive_dependency_set GLOBAL PROPERTY _CMAKE_YCM_TRANSITIVE_DEPENDENCY SET)
  find_package(YCM @YCM_REQUIRED_VERSION@ QUIET)
  # Ensure that YCM is not shown by FeatureSummary if not requested by the user
  if(NOT _yarp_ycm_transitive_dependency_set)
    set_property(GLOBAL PROPERTY _CMAKE_YCM_TRANSITIVE_DEPENDENCY TRUE)
  endif()
  if(NOT YARP_NO_DEPRECATED)
    if(YCM_FOUND)
      set(_YARP_YCM_MODULE_PATH ${YCM_MODULE_PATH})
    else()
      set_and_check(YARP_YCM_MODULE_DIR "@PACKAGE_YARP_YCM_MODULE_DIR@")
      set(_YARP_YCM_MODULE_PATH "${YARP_YCM_MODULE_DIR}/find-modules"
                                "${YARP_YCM_MODULE_DIR}/modules"
                                "${YARP_YCM_MODULE_DIR}/3rdparty"
                                "${YARP_YCM_MODULE_DIR}/cmake-proposed")
      if(${CMAKE_VERSION} VERSION_LESS 3.8)
        list(APPEND _YARP_YCM_MODULE_PATH "${YARP_YCM_MODULE_DIR}/cmake-3.8/Modules")
      endif()

      # We need these paths in order to use the find modules in the following
      # find_package/find_dependency calls (those are automatically added by
      # YCM)
      list(APPEND CMAKE_MODULE_PATH ${_YARP_YCM_MODULE_PATH})
    endif()
  endif()
endif()


if(YARP_FIND_COMPONENTS STREQUAL "")
  # No components requested.
  # Search for the main YARP libraries only.
  set(YARP_FIND_COMPONENTS @YARP_DEFAULT_FIND_COMPONENTS@)
endif()

# Find all requested components
set(YARP_LIBRARIES YARP::YARP_init)
foreach(_yarp_module ${YARP_FIND_COMPONENTS})
  set(_YARP_FIND_PART_${_yarp_module}_REQUIRED)
  # Only propagate REQUIRED if module was not passed to OPTIONAL_COMPONENTS
  if(YARP_FIND_REQUIRED AND YARP_FIND_REQUIRED_${_yarp_module})
    set(_YARP_FIND_PART_${_yarp_module}_REQUIRED REQUIRED)
  endif()
  set(_YARP_FIND_PARTS_QUIET)
  if(YARP_FIND_QUIETLY)
    set(_YARP_FIND_PARTS_QUIET QUIET)
  endif()
  get_property(_yarp_${_yarp_module}_transitive_dependency_set GLOBAL PROPERTY _CMAKE_YARP_${_yarp_module}_TRANSITIVE_DEPENDENCY SET)
  find_package(YARP_${_yarp_module}
               ${_YARP_FIND_PARTS_QUIET}
               ${_YARP_FIND_PART_${_yarp_module}_REQUIRED}
               HINTS "${YARP_CMAKECONFIG_DIR}"
               NO_DEFAULT_PATH)
  # Ensure that YARP components are not shown by FeatureSummary if not requested
  # by the user
  if(NOT _yarp_${_yarp_module}_transitive_dependency_set)
    set_property(GLOBAL PROPERTY _CMAKE_YARP_${_yarp_module}_TRANSITIVE_DEPENDENCY TRUE)
  endif()
  if(YARP_${_yarp_module}_FOUND AND TARGET YARP::YARP_${_yarp_module})
    list(APPEND YARP_LIBRARIES YARP::YARP_${_yarp_module})
  endif()
endforeach()

# Restore the original value of the variables
set(CMAKE_MODULE_PATH ${_CMAKE_MODULE_PATH})
set(YCM_FOUND ${_YCM_FOUND})
unset(_CMAKE_MODULE_PATH)
unset(_YCM_FOUND)


# Ensure that all requested modules are available
check_required_components(YARP)


################################################################################
# Load CMake helper functions

include(${YARP_MODULE_DIR}/YarpPlugin.cmake)
include(${YARP_MODULE_DIR}/YarpInstallationHelpers.cmake)


################################################################################
# If FeatureSummary was included, add DESCRIPTION and URL

if(COMMAND set_package_properties)
    set_package_properties(YARP PROPERTIES DESCRIPTION "A library and toolkit for communication and device interfaces"
                                           URL "https://www.yarp.it/")
endif()


################################################################################
# Print YARP information

if(NOT YCM_FIND_QUIETLY)
  message(STATUS "Found YARP: ${YARP_DIR} (found version \"${YARP_VERSION}\")")
endif()


################################################################################
# Deprecated variables

if(NOT YARP_NO_DEPRECATED AND NOT COMMAND _YARP_DEPRECATED_VARIABLE_WARNING)

  # A macro to print a warning when using deprecated variables, called by
  # variable_watch
  macro(_YARP_DEPRECATED_VARIABLE_WARNING _variable)
    message(DEPRECATION "The ${_variable} variable is deprecated")
  endmacro()

  # YARP_OS_LIBRARY is deprecated since YARP 3.0.0
  set(YARP_OS_LIBRARY YARP::YARP_OS)
  variable_watch(YARP_OS_LIBRARY _yarp_deprecated_variable_warning)

  # YARP_SIG_LIBRARY is deprecated since YARP 3.0.0
  set(YARP_SIG_LIBRARY YARP::YARP_sig)
  variable_watch(YARP_SIG_LIBRARY _yarp_deprecated_variable_warning)

  # YARP_MATH_LIBRARY is deprecated since YARP 3.0.0
  if(TARGET YARP::YARP_math)
    set(YARP_MATH_LIBRARY YARP::YARP_math)
  endif()
  variable_watch(YARP_MATH_LIBRARY _yarp_deprecated_variable_warning)

  # YARP_DEV_LIBRARY is deprecated since YARP 3.0.0
  set(YARP_DEV_LIBRARY YARP::YARP_dev)
  variable_watch(YARP_DEV_LIBRARY _yarp_deprecated_variable_warning)

  # YARP_NAME_LIBRARY is deprecated since YARP 3.0.0
  if(TARGET YARP::YARP_name)
    set(YARP_NAME_LIBRARY YARP::YARP_name)
  endif()
  variable_watch(YARP_NAME_LIBRARY _yarp_deprecated_variable_warning)

  # YARP_INIT_LIBRARY is deprecated since YARP 3.0.0
  set(YARP_INIT_LIBRARY YARP::YARP_init)
  variable_watch(YARP_INIT_LIBRARY _yarp_deprecated_variable_warning)

  # YARP_HAS_MATH_LIB is deprecated since YARP 3.0.0
  set(YARP_HAS_MATH_LIB FALSE)
  if(TARGET YARP::YARP_math)
    set(YARP_HAS_MATH_LIB TRUE)
  endif()
  variable_watch(YARP_HAS_MATH_LIB _yarp_deprecated_variable_warning)

  # YARP_MATH_LIBRARY is deprecated since YARP 3.0.0
  macro(_YARP_HAS_MATH_LIB_IS_DEPRECATED _variable)
    message(DEPRECATION "The ${_variable} variable is deprecated. You can check for YARP_math using find_package(YARP COMPONENTS math)")
  endmacro()
  variable_watch(YARP_MATH_LIBRARY _YARP_HAS_MATH_LIB_IS_DEPRECATED)

  # YARP_VERSION_ABI is deprecated since YARP 3.0.0
  set(YARP_VERSION_ABI "3")
  variable_watch(YARP_VERSION_ABI _yarp_deprecated_variable_warning)

  # YARP_INCLUDE_DIRS is deprecated since YARP 3.0.0
  variable_watch(YARP_INCLUDE_DIRS _yarp_deprecated_variable_warning)

  # YARP_MODULE_PATH is deprecated since YARP 3.0.0
  macro(_YARP_MODULE_PATH_IS_DEPRECATED _variable)
    message(DEPRECATION "The ${_variable} variable is deprecated. CMake find package modules are now in YCM.")
  endmacro()
  set(YARP_MODULE_PATH "${YARP_MODULE_DIR}"
                       "${YARP_MODULE_DIR}/deprecated"
                       ${_YARP_YCM_MODULE_PATH})
  variable_watch(YARP_MODULE_PATH _yarp_module_path_is_deprecated)

  # YARP_DEFINES is deprecated since YARP 3.0.0
  variable_watch(YARP_DEFINES _yarp_deprecated_variable_warning)

  # YARP_HAS_IDL is deprecated since YARP 3.0.0
  variable_watch(YARP_HAS_IDL _yarp_deprecated_variable_warning)

  if(NOT COMMAND yarp_add_idl)
    macro(YARP_ADD_IDL)
      message(DEPRECATION "Calling \"yarp_add_idl\" without including YARP \"idl_tools\" COMPONENT in \"find_package(YARP)\" is deprecated.")
      get_property(_yarp_idl_tools_transitive_dependency_set GLOBAL PROPERTY _CMAKE_YARP_idl_tools_TRANSITIVE_DEPENDENCY SET)
      find_package(YARP_idl_tools
                  ${_YARP_FIND_PARTS_QUIET}
                  ${_YARP_FIND_PART_idl_tools_REQUIRED}
                  HINTS "${YARP_CMAKECONFIG_DIR}"
                  NO_DEFAULT_PATH)
      # Ensure that YARP_idl_tools is not shown by FeatureSummary if not requested
      # by the user
      if(NOT _yarp_idl_tools_transitive_dependency_set)
        set_property(GLOBAL PROPERTY _CMAKE_YARP_idl_tools_TRANSITIVE_DEPENDENCY TRUE)
      endif()
      yarp_add_idl(${ARGN})
    endmacro()
  endif()

  if(NOT COMMAND yarp_idl_to_dir)
    macro(YARP_IDL_TO_DIR)
      message(DEPRECATION "Calling \"yarp_idl_to_dir\" without including YARP \"idl_tools\" COMPONENT in \"find_package(YARP)\" is deprecated.")
      get_property(_yarp_idl_tools_transitive_dependency_set GLOBAL PROPERTY _CMAKE_YARP_idl_tools_TRANSITIVE_DEPENDENCY SET)
      find_package(YARP_idl_tools
                  ${_YARP_FIND_PARTS_QUIET}
                  ${_YARP_FIND_PART_idl_tools_REQUIRED}
                  HINTS "${YARP_CMAKECONFIG_DIR}"
                  NO_DEFAULT_PATH)
      # Ensure that YARP_idl_tools is not shown by FeatureSummary if not requested
      # by the user
      if(NOT _yarp_idl_tools_transitive_dependency_set)
        set_property(GLOBAL PROPERTY _CMAKE_YARP_idl_tools_TRANSITIVE_DEPENDENCY TRUE)
      endif()
      yarp_idl_to_dir(${ARGN})
    endmacro()
  endif()

endif()
