# Copyright (C) 2006-2018 Istituto Italiano di Tecnologia (IIT)
# Copyright (C) 2006-2010 RobotCub Consortium
# All rights reserved.
#
# This software may be modified and distributed under the terms of the
# BSD-3-Clause license. See the accompanying LICENSE file for details.


# Version
set(YARP_VERSION_MAJOR "@YARP_VERSION_MAJOR@")
set(YARP_VERSION_MINOR "@YARP_VERSION_MINOR@")
set(YARP_VERSION_PATCH "@YARP_VERSION_PATCH@")
set(YARP_VERSION_TWEAK "@YARP_VERSION_TWEAK@")
set(YARP_VERSION "@YARP_VERSION@")
set(YARP_VERSION_SHORT "@YARP_VERSION_SHORT@")
set(YARP_VERSION_ABI "@YARP_VERSION_ABI@")


@PACKAGE_INIT@

# Give the details of YARP libraries, include path etc.
set(YARP_LIBRARIES "@YARP_LIBRARIES@")
set(YARP_INCLUDE_DIRS "@PACKAGE_YARP_INCLUDE_DIRS@")
set(YARP_DEFINES "@YARP_ALL_DEFINES@") # only needed if you use ACE directly

# Check if deprecated methods are built
set(YARP_NO_DEPRECATED @YARP_NO_DEPRECATED@)
if(YARP_NO_DEPRECATED)
  add_definitions("-DYARP_NO_DEPRECATED")
else(YARP_NO_DEPRECATED)
  set_and_check(YARP_BINDINGS "@PACKAGE_YARP_BINDINGS@")
endif(YARP_NO_DEPRECATED)

# Disable deprecated warnings, but add an option to enable it
include(CMakeDependentOption)
# FIXME 2.4 Workaround to reset this value to its default, remove it
#           at some point.
if(NOT YARP_NO_DEPRECATED_WARNINGS_DEFAULT_UPDATED)
  unset(YARP_NO_DEPRECATED_WARNINGS CACHE)
  set(YARP_NO_DEPRECATED_WARNINGS_DEFAULT_UPDATED TRUE CACHE BOOL "Workaround to reset this value to its default" INTERNAL)
endif()
cmake_dependent_option(YARP_NO_DEPRECATED_WARNINGS
                       "Do not warn when using YARP deprecated declarations" FALSE
                       "NOT YARP_NO_DEPRECATED" FALSE)
mark_as_advanced(YARP_NO_DEPRECATED_WARNINGS)
if(YARP_NO_DEPRECATED_WARNINGS)
  add_definitions("-DYARP_NO_DEPRECATED_WARNINGS")
endif()

# CMake modules directories
set_and_check(YARP_MODULE_DIR "@PACKAGE_YARP_MODULE_DIR@")
set(YARP_MODULE_PATH "${YARP_MODULE_DIR}")
if(NOT YARP_NO_DEPRECATED)
  list(APPEND YARP_MODULE_PATH "${YARP_MODULE_DIR}/deprecated")

  # find_package(YCM) will overwrite the PACKAGE_PREFIX_DIR variable
  # set by PACKAGE_INIT therefore we save and restore it later
  set(_PACKAGE_PREFIX_DIR ${PACKAGE_PREFIX_DIR})
  set(YCM_REQUIRED_VERSION @YCM_REQUIRED_VERSION@)
  find_package(YCM ${YCM_REQUIRED_VERSION} QUIET)
  set(PACKAGE_PREFIX_DIR ${_PACKAGE_PREFIX_DIR})
  unset(_PACKAGE_PREFIX_DIR)

  if(NOT YCM_FOUND)
    list(APPEND YARP_MODULE_PATH "${YARP_MODULE_DIR}/ycm-${YCM_REQUIRED_VERSION}/find-modules"
                                 "${YARP_MODULE_DIR}/ycm-${YCM_REQUIRED_VERSION}/modules"
                                 "${YARP_MODULE_DIR}/ycm-${YCM_REQUIRED_VERSION}/3rdparty"
                                 "${YARP_MODULE_DIR}/ycm-${YCM_REQUIRED_VERSION}/cmake-proposed")
    if(${CMAKE_VERSION} VERSION_LESS 3.1)
      list(APPEND YARP_MODULE_PATH "${YARP_MODULE_DIR}/ycm-${YCM_REQUIRED_VERSION}/cmake-3.1/Modules")
    endif()
    if(${CMAKE_VERSION} VERSION_LESS 3.8)
      list(APPEND YARP_MODULE_PATH "${YARP_MODULE_DIR}/ycm-${YCM_REQUIRED_VERSION}/cmake-3.8/Modules")
    endif()
  endif()
endif()

# Install prefix
set(YARP_INSTALL_PREFIX "@PACKAGE_YARP_INSTALL_PREFIX@")

# Install directories (relative path)
set(YARP_DATA_INSTALL_DIR "@YARP_DATA_INSTALL_DIR@")
set(YARP_CONFIG_INSTALL_DIR "@YARP_CONFIG_INSTALL_DIR@")
set(YARP_PLUGIN_MANIFESTS_INSTALL_DIR "@YARP_PLUGIN_MANIFESTS_INSTALL_DIR@")
set(YARP_MODULES_INSTALL_DIR "@YARP_MODULES_INSTALL_DIR@")
set(YARP_APPLICATIONS_INSTALL_DIR "@YARP_APPLICATIONS_INSTALL_DIR@")
set(YARP_TEMPLATES_INSTALL_DIR "@YARP_TEMPLATES_INSTALL_DIR@")
set(YARP_APPLICATIONS_TEMPLATES_INSTALL_DIR "@YARP_APPLICATIONS_TEMPLATES_INSTALL_DIR@")
set(YARP_MODULES_TEMPLATES_INSTALL_DIR "@YARP_MODULES_TEMPLATES_INSTALL_DIR@")
set(YARP_CONTEXTS_INSTALL_DIR "@YARP_CONTEXTS_INSTALL_DIR@")
set(YARP_ROBOTS_INSTALL_DIR "@YARP_ROBOTS_INSTALL_DIR@")
set(YARP_STATIC_PLUGINS_INSTALL_DIR "@YARP_STATIC_PLUGINS_INSTALL_DIR@")
set(YARP_DYNAMIC_PLUGINS_INSTALL_DIR "@YARP_DYNAMIC_PLUGINS_INSTALL_DIR@")
set(YARP_QML2_IMPORT_DIR "@YARP_QML2_IMPORT_DIR@")

# Install directories (absolute path)
set_and_check(YARP_DATA_INSTALL_DIR_FULL "@PACKAGE_YARP_DATA_INSTALL_DIR@")
set(YARP_CONFIG_INSTALL_DIR_FULL "@PACKAGE_YARP_CONFIG_INSTALL_DIR@")
set(YARP_PLUGIN_MANIFESTS_INSTALL_DIR_FULL "@PACKAGE_YARP_PLUGIN_MANIFESTS_INSTALL_DIR@")
set(YARP_MODULES_INSTALL_DIR_FULL "@PACKAGE_YARP_MODULES_INSTALL_DIR@")
set(YARP_APPLICATIONS_INSTALL_DIR_FULL "@PACKAGE_YARP_APPLICATIONS_INSTALL_DIR@")
set(YARP_TEMPLATES_INSTALL_DIR_FULL "@PACKAGE_YARP_TEMPLATES_INSTALL_DIR@")
set(YARP_APPLICATIONS_TEMPLATES_INSTALL_DIR_FULL "@PACKAGE_YARP_APPLICATIONS_TEMPLATES_INSTALL_DIR@")
set(YARP_MODULES_TEMPLATES_INSTALL_DIR_FULL "@PACKAGE_YARP_MODULES_TEMPLATES_INSTALL_DIR@")
set(YARP_CONTEXTS_INSTALL_DIR_FULL "@PACKAGE_YARP_CONTEXTS_INSTALL_DIR@")
set(YARP_ROBOTS_INSTALL_DIR_FULL "@PACKAGE_YARP_ROBOTS_INSTALL_DIR@")
set(YARP_STATIC_PLUGINS_INSTALL_DIR_FULL "@PACKAGE_YARP_STATIC_PLUGINS_INSTALL_DIR@")
set(YARP_DYNAMIC_PLUGINS_INSTALL_DIR_FULL "@PACKAGE_YARP_DYNAMIC_PLUGINS_INSTALL_DIR@")
set(YARP_QML2_IMPORT_DIR_FULL "@PACKAGE_YARP_QML2_IMPORT_DIR@")

set(YARP_IS_SHARED_LIBRARY @CREATE_SHARED_LIBRARY@)

# Check if IDL is available
set(YARP_HAS_IDL @YARP_HAS_IDL@)
set(YARP_IDL_BINARY_HINT "@PACKAGE_YARP_IDL_BINARY_HINT@")

if(NOT TARGET YARP::YARP_OS)
  include(${CMAKE_CURRENT_LIST_DIR}/YARPTargets.cmake)
endif()

# Find dependencies required by targets 
if(TARGET YARP::YARP_rtf)
  find_package(RTF QUIET)
endif()


# Export variables for available targets
set(YARP_OS_LIBRARY YARP::YARP_OS)
set(YARP_SIG_LIBRARY YARP::YARP_sig)
if(TARGET YARP::YARP_math)
  set(YARP_MATH_LIBRARY YARP::YARP_math)
endif()
set(YARP_DEV_LIBRARY YARP::YARP_dev)
if(TARGET YARP::YARP_name)
  set(YARP_NAME_LIBRARY YARP::YARP_name)
endif()
set(YARP_INIT_LIBRARY YARP::YARP_init)

# Pass along some compilation options that may be useful for clients
# to check.
set(YARP_HAS_MATH_LIB FALSE)
if(TARGET YARP::YARP_math)
  set(YARP_HAS_MATH_LIB TRUE)
endif()

# Load CMake helper functions
include(${YARP_MODULE_DIR}/YarpIDL.cmake)
include(${YARP_MODULE_DIR}/YarpPlugin.cmake)
include(${YARP_MODULE_DIR}/YarpInstallationHelpers.cmake)
