#!/bin/bash

# Copyright: (C) 2010 RobotCub Consortium
# Author: Paul Fitzpatrick
# CopyPolicy: Released under the terms of the LGPLv2.1 or later, see LGPL.TXT

# run as ./scripts/admin/make-source-package-svn

function prune {
    cd $1
    for f in scripts/debian scripts/junkyard src/modules/dimax_u2c/blob; do
	echo "Removing $f"
	rm -rf $f
    done
    (
	cat src/modules/CMakeLists.txt | grep -v dimax
    ) > /tmp/CMakeLists.txt
    cp /tmp/CMakeLists.txt src/modules
    cd ..
}

ORG=$PWD
BASE=$PWD/source-package
mkdir -p $BASE
cd $BASE

if [ "k$1" = "k" ] ; then
  URL=https://yarp0.svn.sourceforge.net/svnroot/yarp0/trunk/yarp2
  NAME=yarp
  #REV=$(svn info $URL|grep "^Last Changed Rev:"|sed -e 's|.*:\s*||')
  SVN_NAME=$(basename $URL)

  #if [ "k$REV" = "k" ] ; then
  #	echo SVN revision number not found
  #	exit 1
  #fi

  #echo "Working with revision $REV"

  mkdir -p config
  cd config
  cp $ORG/conf/YarpVersion.cmake .
  (
  cat <<EOF
  cmake_minimum_required(VERSION 2.8.7)
  PROJECT(test)
  SET(CMAKE_MODULE_PATH \${PROJECT_SOURCE_DIR})
  INCLUDE(YarpVersion)
  MESSAGE(STATUS "Version is \${YARP_VERSION_MAJOR}.\${YARP_VERSION_MINOR}.\${YARP_VERSION_PATCH}\${YARP_VERSION_MODIFIER}")
EOF
  ) > CMakeLists.txt
  YARP_VERSION=`cmake . | grep "Version is " | sed "s/.*Version is //"`
  echo "YARP version detected as $YARP_VERSION"
  PACKAGE="yarp-$YARP_VERSION"

else

  URL=https://yarp0.svn.sourceforge.net/svnroot/yarp0/tags/$1
  PACKAGE="$1"
  SVN_NAME="$1"

fi

cd $BASE
mkdir -p unix
cd unix
echo "Working in $PWD, making $PACKAGE"

if [ ! -e $PACKAGE ]; then
	rm -rf $SVN_NAME
	svn export $URL || exit 1
	if [ ! "k$SVN_NAME" = "k$PACKAGE" ]; then
	  if [ -f $SVN_NAME ]; then
	    mkdir $PACKAGE || exit 1
	  fi
	  mv $SVN_NAME $PACKAGE || exit 1
        fi
	prune $PACKAGE || exit 1
	rm -f *.tar.gz
else
	echo "Unix checkout exists"
fi
if [ ! -e $PACKAGE.tar.gz ]; then
	echo "Making $PACKAGE.tar.gz"
	tar cvzf $PACKAGE.tar.gz $PACKAGE || exit 1
else
	echo "Unix tarball exists"
fi

cd $BASE
mkdir -p windows
cd windows
echo "Working in $PWD"
if [ ! -e $PACKAGE ]; then
	rm -rf $SVN_NAME
	svn export $URL --native-eol CRLF || exit 1
	if [ ! "k$SVN_NAME" = "k$PACKAGE" ]; then
	  if [ -f $SVN_NAME ]; then
	      mkdir $PACKAGE || exit 1
	  fi
	  mv $SVN_NAME $PACKAGE || exit 1
        fi
	prune $PACKAGE || exit 1
	rm -f *.zip
else
	echo "Windows checkout exists"
fi

if [ ! -e $PACKAGE.zip ]; then
	echo "Making $PACKAGE.zip"
	zip -r $PACKAGE.zip $PACKAGE || exit 1
else
	echo "Windows zip exists"
fi

cd $BASE
echo "==================================================================="
echo $PWD
find . -maxdepth 2

## preparing a directory with the files for rsync to sourceforge.

mkdir -p $PACKAGE
cp windows/$PACKAGE.zip $PACKAGE
cp unix/$PACKAGE.tar.gz $PACKAGE

echo "You can now sync $BASE/$PACKAGE to sourceforge:"
echo "cd $BASE"
echo "rsync --recursive yarp-2.3.14 YOUR_USERNATE,yarp0@frs.sourceforge.net:/home/frs/project/y/ya/yarp0/yarp2"


