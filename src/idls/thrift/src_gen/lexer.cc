

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <cstdio>
#include <cstring>
#include <cerrno>
#include <cstdlib>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;

int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng + (yy_more_offset) >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( &yytext[(yy_more_offset)], (yytext_ptr), yyleng + 1 ); \
	yyleng += (yy_more_offset); \
	(yy_prev_more_offset) = (yy_more_offset); \
	(yy_more_offset) = 0; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 169
#define YY_END_OF_BUFFER 170
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1709] =
    {   0,
        1,  162,    1,  162,  170,  167,  168,  169,    1,  167,
      168,  169,    1,  169,  165,  167,  168,  169,    5,  167,
      168,  169,    6,  167,  168,  169,    7,  167,  168,  169,
      162,  167,  168,  169,  162,  164,  167,  168,  169,  167,
      168,  169,  167,  168,  169,  160,  162,  167,  168,  169,
      160,  162,  167,  168,  169,  163,  164,  167,  168,  169,
      163,  164,  167,  168,  169,  163,  164,  167,  168,  169,
      163,  167,  168,  169,  163,  164,  167,  168,  169,  163,
      164,  167,  168,  169,  163,  164,  167,  168,  169,  163,
      164,  167,  168,  169,  163,  164,  167,  168,  169,  163,

      164,  167,  168,  169,  163,  164,  167,  168,  169,  163,
      164,  167,  168,  169,  163,  164,  167,  168,  169,  163,
      164,  167,  168,  169,  163,  164,  167,  168,  169,  163,
      164,  167,  168,  169,  163,  164,  167,  168,  169,  163,
      164,  167,  168,  169,  163,  164,  167,  168,  169,  163,
      164,  167,  168,  169,  163,  164,  167,  168,  169,  163,
      164,  167,  168,  169,  163,  164,  167,  168,  169,  163,
      164,  167,  168,  169,  163,  164,  167,  168,  169,  163,
      164,  167,  168,  169,    1,    5,  160,  162,  164,  164,
      160,  162,  164,  164,  162,    4,  163,  164,  163,  164,

      164,  162,  163,  164,  163,  164,  163,  163,  163,  164,
      163,  164,  163,  164,  163,  164,   70,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,   84,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  107,  163,  164,  163,  164,  110,  163,  164,
      114,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,

      164,  163,  164,  163,  164,  122,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  162,  162,
      164,  162,  164,    4,  161,  163,  164,   58,  163,  164,
      163,  163,  163,  163,  163,  163,  163,  164,  163,  164,
       68,  163,  164,  163,  164,  163,  164,  163,  164,  163,

      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,   80,  163,  164,
       82,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,   90,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      102,  163,  164,  163,  164,  163,  164,  163,  164,   33,
      163,  164,   34,  163,  164,   35,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,   41,  163,  164,  163,  164,  163,

      164,  163,  164,  118,  163,  164,  163,  164,  120,  163,
      164,  121,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,   43,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  145,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  151,  163,  164,  152,

      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  158,  163,  164,  163,  164,  163,
      164,    2,  163,  164,  163,  163,  163,  163,  163,  163,
      163,  163,  164,  163,  164,   69,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,   31,  163,  164,  163,
      164,   32,  163,  164,   74,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,   86,  163,  164,   87,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,

      164,  163,  164,  163,  164,   52,  163,  164,  163,  164,
       99,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  106,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,   42,  163,  164,  163,
      164,  163,  164,  163,  164,  119,  163,  164,  163,  164,
      163,  164,  123,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  130,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  135,  163,  164,  163,

      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  141,  163,  164,  142,  163,  164,  163,  164,  163,
      164,    9,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,   30,  163,
      164,  163,  164,  155,  163,  164,  163,  164,  157,  163,
      164,  163,  164,  163,  164,    3,    2,  166,   57,  163,
      164,  163,  163,  163,  163,  163,  163,  163,  163,  164,
       67,  163,  164,  163,  164,   56,  163,  164,   72,  163,
      164,  163,  164,   73,  163,  164,   75,  163,  164,   76,

      163,  164,   77,  163,  164,  163,  164,   53,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,   89,  163,  164,  163,  164,  163,
      164,   94,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,    8,  163,  164,  163,  164,  101,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  125,  163,

      164,  163,  164,  163,  164,  163,  164,  163,  164,  129,
      163,  164,  163,  164,  163,  164,  163,  164,  132,  163,
      164,  163,  164,  163,  164,   40,  163,  164,  163,  164,
      163,  164,   39,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  138,  163,  164,  163,  164,  163,  164,
      143,  163,  164,  163,  164,  163,  164,  146,  163,  164,
       47,  147,  163,  164,  163,  164,  163,  164,  150,  163,
      164,  163,  164,  163,  164,  156,  163,  164,  163,  164,
      163,  164,  163,  164,  159,  163,  164,    3,  166,    2,
      166,  163,  163,  163,  163,  163,  163,  163,  163,  164,

       71,  163,  164,   38,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,   83,  163,  164,  163,  164,   36,  163,  164,
      163,  164,   88,  163,  164,  163,  164,   92,  163,  164,
      163,  164,  163,  164,   97,  163,  164,   98,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  105,  163,
      164,  163,  164,  109,  163,  164,  163,  164,  111,  163,
      164,  163,  164,  163,  164,  163,  164,  115,  163,  164,
      116,  163,  164,  163,  164,  117,  163,  164,   44,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,

      164,  124,  128,  163,  164,  163,  164,  163,  164,  163,
      164,  131,  163,  164,  134,  163,  164,  163,  164,  163,
      164,  136,  163,  164,  163,  164,  137,  163,  164,   37,
      163,  164,   46,  163,  164,  139,  163,  164,  163,  164,
       50,  163,  164,  163,  164,  163,  164,  148,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  166,  163,   60,  163,
      163,  163,  163,  163,  163,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,   79,
      163,  164,   81,  163,  164,  163,  164,   85,  163,  164,

      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
       49,  163,  164,  100,  163,  164,  103,  163,  164,  163,
      164,  163,  164,   29,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      126,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,   51,  163,  164,  163,  164,  163,  164,
      163,  164,   45,  163,  164,  163,  164,  153,  163,  164,
      163,  164,   24,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,   61,  163,  163,   63,  163,  163,
      163,   66,  163,  164,  163,  164,   78,  163,  164,  163,

      164,  163,  164,   13,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,   96,  163,  164,  163,
      164,  104,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,   55,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,  133,  163,  164,   54,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  149,
      163,  164,  154,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,   59,  163,  163,  163,  163,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,   95,  163,  164,   48,  163,  164,  163,  164,

      163,  164,  113,  163,  164,  163,  164,   10,  163,  164,
      163,  164,  163,  164,  127,  163,  164,   19,  163,  164,
      163,  164,  163,  164,  163,  164,  144,  163,  164,   28,
      163,  164,  163,  164,  163,  164,  163,  164,  163,   64,
      163,  163,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,   91,  163,  164,   93,  163,  164,  108,  163,
      164,  112,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,  163,  163,  163,  164,   12,  163,  164,  163,
      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,

      164,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  163,  164,  163,  164,   62,  163,  163,   15,  163,
      164,  163,  164,  163,  164,  163,  164,   14,  163,  164,
       20,  163,  164,  163,  164,  163,  164,  163,  164,  163,
      164,  140,  163,  164,  163,  164,   26,  163,  164,   25,
      163,  164,   65,  163,   11,  163,  164,  163,  164,  163,
      164,   18,  163,  164,  163,  164,  163,  164,  163,  164,
       27,  163,  164,  163,  164,  163,  164,   21,  163,  164,
      163,  164,  163,  164,  163,  164,  163,  164,  163,  164,
      163,  164,   16,  163,  164,   17,  163,  164,  163,  164,

       23,  163,  164,  163,  164,   22,  163,  164
    } ;

static yyconst flex_int16_t yy_accept[786] =
    {   0,
        1,    3,    5,    6,    9,   13,   15,   19,   23,   27,
       31,   35,   40,   43,   46,   51,   56,   61,   66,   71,
       75,   80,   85,   90,   95,  100,  105,  110,  115,  120,
      125,  130,  135,  140,  145,  150,  155,  160,  165,  170,
      175,  180,  185,  186,  187,  187,  189,  189,  190,  191,
      194,  195,  196,  196,  197,  197,  199,  201,  201,  202,
      205,  207,  208,  209,  211,  213,  215,  217,  220,  222,
      224,  226,  228,  230,  232,  234,  236,  238,  240,  242,
      245,  247,  249,  251,  253,  255,  257,  259,  261,  263,
      265,  267,  269,  271,  273,  276,  278,  281,  284,  286,

      288,  290,  292,  294,  296,  298,  300,  302,  304,  306,
      309,  311,  313,  315,  317,  319,  321,  323,  325,  327,
      329,  331,  333,  335,  337,  339,  341,  343,  345,  347,
      349,  351,  353,  355,  357,  359,  361,  363,  365,  367,
      369,  370,  372,  374,  374,  374,  375,  376,  378,  381,
      382,  383,  384,  385,  386,  387,  389,  391,  394,  396,
      398,  400,  402,  404,  406,  408,  410,  412,  414,  416,
      418,  420,  422,  424,  426,  428,  431,  434,  436,  438,
      440,  442,  445,  447,  449,  451,  453,  455,  457,  459,
      461,  464,  466,  468,  470,  473,  476,  479,  481,  483,

      485,  487,  489,  491,  493,  495,  498,  500,  502,  504,
      507,  509,  512,  515,  517,  519,  521,  523,  525,  527,
      529,  531,  533,  535,  537,  539,  541,  543,  545,  547,
      549,  551,  553,  556,  558,  560,  562,  564,  566,  568,
      570,  572,  574,  576,  578,  580,  582,  585,  587,  589,
      591,  593,  595,  597,  600,  603,  605,  607,  609,  611,
      613,  615,  618,  620,  622,  622,  622,  622,  622,  622,
      623,  625,  626,  627,  628,  629,  630,  631,  632,  634,
      636,  639,  641,  643,  645,  647,  650,  652,  655,  658,
      660,  662,  664,  666,  668,  670,  672,  674,  676,  678,

      680,  682,  684,  686,  689,  692,  694,  696,  698,  700,
      702,  704,  706,  709,  711,  714,  716,  718,  720,  722,
      724,  726,  728,  731,  733,  735,  737,  739,  741,  743,
      745,  747,  750,  752,  754,  756,  759,  761,  763,  766,
      768,  770,  772,  774,  776,  778,  780,  782,  785,  787,
      789,  791,  793,  795,  797,  800,  802,  804,  806,  808,
      810,  812,  814,  816,  818,  820,  822,  825,  828,  830,
      832,  835,  837,  839,  841,  843,  845,  847,  849,  852,
      854,  857,  859,  862,  864,  866,  866,  866,  867,  867,
      867,  867,  867,  869,  872,  873,  874,  875,  876,  877,

      878,  879,  881,  884,  886,  889,  892,  894,  897,  900,
      903,  906,  908,  911,  913,  915,  917,  919,  921,  923,
      925,  927,  929,  931,  933,  935,  938,  940,  942,  945,
      947,  949,  951,  953,  955,  958,  960,  963,  965,  967,
      969,  971,  973,  975,  977,  979,  981,  983,  985,  987,
      989,  991,  993,  995,  997,  999, 1002, 1004, 1006, 1008,
     1010, 1013, 1015, 1017, 1019, 1022, 1024, 1026, 1029, 1031,
     1033, 1036, 1038, 1040, 1042, 1044, 1047, 1049, 1051, 1054,
     1056, 1058, 1061, 1065, 1067, 1069, 1072, 1074, 1076, 1079,
     1081, 1083, 1085, 1088, 1088, 1089, 1089, 1090, 1090, 1092,

     1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1104, 1107,
     1109, 1111, 1113, 1115, 1117, 1119, 1121, 1123, 1126, 1128,
     1131, 1133, 1136, 1138, 1141, 1143, 1145, 1148, 1151, 1153,
     1155, 1157, 1159, 1162, 1164, 1167, 1169, 1172, 1174, 1176,
     1178, 1181, 1184, 1186, 1189, 1192, 1194, 1196, 1198, 1200,
     1202, 1206, 1208, 1210, 1212, 1215, 1218, 1220, 1222, 1225,
     1227, 1230, 1233, 1236, 1239, 1241, 1244, 1246, 1248, 1251,
     1253, 1255, 1257, 1259, 1261, 1263, 1265, 1267, 1268, 1269,
     1271, 1272, 1273, 1274, 1275, 1276, 1278, 1280, 1282, 1284,
     1286, 1288, 1290, 1293, 1296, 1298, 1301, 1303, 1305, 1307,

     1309, 1311, 1314, 1317, 1320, 1322, 1324, 1327, 1329, 1331,
     1333, 1335, 1337, 1339, 1341, 1344, 1346, 1348, 1350, 1352,
     1354, 1357, 1359, 1361, 1363, 1366, 1368, 1371, 1373, 1376,
     1378, 1380, 1382, 1384, 1385, 1387, 1388, 1390, 1391, 1392,
     1395, 1397, 1400, 1402, 1404, 1407, 1409, 1411, 1413, 1415,
     1417, 1420, 1422, 1425, 1427, 1429, 1431, 1433, 1435, 1438,
     1440, 1442, 1444, 1446, 1449, 1452, 1454, 1456, 1458, 1460,
     1463, 1466, 1468, 1470, 1472, 1474, 1476, 1477, 1478, 1479,
     1481, 1483, 1485, 1487, 1489, 1491, 1493, 1496, 1499, 1501,
     1503, 1506, 1508, 1511, 1513, 1515, 1518, 1521, 1523, 1525,

     1527, 1530, 1533, 1535, 1537, 1539, 1540, 1542, 1543, 1545,
     1547, 1549, 1551, 1553, 1556, 1559, 1562, 1565, 1567, 1569,
     1571, 1573, 1575, 1577, 1579, 1581, 1583, 1584, 1585, 1587,
     1590, 1592, 1594, 1596, 1598, 1600, 1602, 1604, 1606, 1608,
     1610, 1612, 1614, 1616, 1618, 1619, 1622, 1624, 1626, 1628,
     1631, 1634, 1636, 1638, 1640, 1642, 1645, 1647, 1650, 1653,
     1655, 1658, 1660, 1662, 1665, 1667, 1669, 1671, 1674, 1676,
     1678, 1681, 1683, 1685, 1687, 1689, 1691, 1693, 1696, 1699,
     1701, 1704, 1706, 1709, 1709
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    5,    1,    1,    1,    4,    6,
        6,    7,    8,    6,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   17,   17,   17,    6,    6,    6,
        6,    6,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   28,   29,   30,   31,   32,   33,
       28,   34,   35,   36,   37,   28,   28,   28,   28,   28,
        6,    1,    6,    1,   38,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,    6,    1,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    3,    4,
        1,    5,    5,    5,    5,    5,    5,    5,    6,    6,
        6,    6,    5,    6,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    6,    6,
        6,    6,    5,    6,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7
    } ;

static yyconst flex_int16_t yy_base[797] =
    {   0,
        0,    0, 1669, 1670,   63,   65, 1670,    0, 1670, 1670,
       59,   93,   58,   70,   69, 1606, 1658,   71,  129, 1628,
       77,  105,  112,   87,  162,  144,   69,  175,   74,   76,
       79,  163,  155,  190,  146,  204,  172,  130,  191,   78,
      164,   81,   95,    0,  256, 1603,  267,    0,  274,  283,
      295,  302, 1657,    0,    0, 1654,   75,  315,  322,  313,
       82,    0,  320,   92,  145,   84,   90,  177,  111,  187,
      148,  199,  206,  296,  213,  314,  150,  211,  337,  186,
      189,  315,  334,  339,  228,  250,  241,  338,  343,  347,
      348,  349,  234,  352, 1653,  350,  351, 1652,  355,  360,

      361,  362,  214,  368,  370,  364,  365,  374,  375, 1651,
      377,  379,  376,  389,  380,  222,  381,  396,  387,  394,
      393,  390,  401,  404,  412,  398,  403,  415,  420,  413,
      430,  438,  439,  440,  447,  455,  416,  452,  216,  456,
      497,  504,  516,  156,  462,    0,    0,  459, 1650, 1629,
     1630,  448, 1629, 1632, 1635,  467,  454, 1644,  469,  461,
      483,  491,  497,  473,  498,  481,  496,  531,  492,  494,
      532,  533,  535,  536,  534,  539,  543,  541,  544,  545,
      549,  551,  542,  548,  557,  546,  559,  547,  555,  567,
      560,  568,  565,  554, 1643, 1642, 1641,  561,  570,  571,

      552,  573,  604,  579,  606, 1640,  558,  612,  613, 1639,
      614, 1638, 1637,  615,  616,  617,  618,  619,  621,  620,
      625,  626,  622,  627,  623,  624,  628,  629,  630,  638,
      631,  632, 1636,  641,  637,  636,  633,  640,  652,  639,
      657,  644,  643,  649,  653,  658, 1635,  680,  694,  656,
      695,  697,  698, 1634, 1633,  650,  701,  702,  662,  703,
      704, 1632,  708,  706, 1633,  709,  711, 1632,  714, 1627,
      717, 1618, 1602, 1606, 1603, 1602, 1596, 1601,  710,  715,
     1621,  718,  719,  721,  720, 1620,  722, 1619, 1618,  723,
      724,  725,  726,  727,  730,  731,  738,  740,  733,  742,

      745,  743,  746, 1617,  748,  752,  755,  749,  761,  750,
      753,  754, 1616,  758, 1615,  766,  771,  773,  775,  777,
      778,  781, 1614,  779,  792,  794,  795,  798,  799,  797,
      800, 1613,  804,  806,  808, 1612,  810,  812, 1611,  818,
      815,  816,  819,  817,  822,  820,  821, 1610,  823,  825,
      829,  830,  831,  832, 1609,  834,  835,  836,  837,  841,
      843,  842,  857,  848,  862,  850, 1608, 1607,  852,  853,
     1606,  866,  867,  868,  869,  870,  872,  874, 1605,  877,
     1604,  875, 1603,  888,  883,  894,  895, 1670,  905,  910,
      912,  917, 1670, 1602, 1575, 1571, 1585, 1586, 1583, 1579,

     1581,  890, 1594,  891, 1593, 1592,  898, 1591, 1590, 1589,
     1588,  900, 1587,  905,  921,  923,  922,  925,  927,  928,
      933,  930,  937,  934,  938, 1586,  943,  935, 1585,  939,
      941,  944,  936,  947, 1584,  942, 1583,  949,  946,  945,
      950,  951,  954,  955,  956,  958,  957,  960,  961,  959,
      962,  963,  965,  966,  988, 1582,  991,  994,  997,  998,
     1581, 1001, 1005, 1003, 1580, 1006, 1010, 1579, 1007, 1009,
     1578, 1012, 1013, 1015, 1014, 1577, 1019, 1020, 1016, 1021,
     1023, 1576, 1575, 1022, 1025, 1574, 1024, 1027, 1573, 1028,
     1036, 1030, 1572, 1569, 1568, 1036, 1670, 1567, 1566, 1541,

     1537, 1536, 1537, 1534, 1539, 1535, 1041, 1560, 1559, 1033,
     1032, 1047, 1042, 1035, 1043, 1055, 1046, 1558, 1058, 1557,
     1060, 1556, 1062, 1071, 1048, 1076, 1555, 1081, 1083, 1085,
     1086, 1088, 1554, 1090, 1553, 1091, 1552, 1094, 1098, 1099,
     1551, 1550, 1100, 1549, 1548, 1104, 1106, 1093, 1107, 1096,
     1547, 1101, 1108, 1109, 1546, 1545, 1110, 1112, 1544, 1114,
     1543, 1542, 1541, 1540, 1111, 1539, 1113, 1102, 1538, 1115,
     1116, 1118, 1120, 1121, 1122, 1127, 1133, 1535, 1507,    0,
     1506, 1516, 1504, 1519, 1507, 1138, 1148, 1150, 1152, 1154,
     1156, 1153, 1530, 1529, 1158, 1528, 1162, 1167, 1166, 1160,

     1163, 1527, 1526, 1525, 1165, 1169, 1524, 1171, 1172, 1174,
     1177, 1173, 1178, 1179, 1523, 1181, 1175, 1176, 1185, 1180,
     1522, 1183, 1186, 1189, 1521, 1200, 1520, 1191, 1484, 1199,
     1202, 1203, 1211, 1425,    0, 1428,    0, 1421, 1439, 1447,
     1217, 1446, 1219, 1220, 1445, 1226, 1227, 1228, 1221, 1230,
     1443, 1231, 1442, 1234, 1235, 1237, 1238, 1239, 1441, 1240,
     1241, 1243, 1247, 1440, 1439, 1248, 1245, 1250, 1242, 1438,
     1437, 1252, 1254, 1260, 1255,    0, 1414, 1406, 1421, 1258,
     1259, 1261, 1262, 1263, 1264, 1266, 1432, 1431, 1265, 1272,
     1430, 1284, 1429, 1286, 1270, 1425, 1423, 1277, 1294, 1287,

     1422, 1421, 1295, 1296, 1301, 1388,    0, 1402, 1297, 1309,
     1308, 1311, 1312, 1415, 1411, 1408, 1403, 1317, 1318, 1319,
     1310, 1320, 1322, 1321, 1326, 1328, 1372, 1371, 1324, 1399,
     1329, 1330, 1331, 1332, 1334, 1337, 1333, 1341, 1336, 1339,
     1348, 1347, 1350,    0,  618,  645, 1359, 1357, 1360,  642,
      635, 1362, 1374, 1364, 1370,  562, 1373,  556,  553,    0,
      550, 1382, 1384,  482, 1375, 1376, 1385,  480, 1386, 1387,
      475, 1388, 1389, 1392, 1394, 1390, 1395,  268,  252, 1397,
       86, 1398,   80, 1670, 1461, 1465, 1468, 1473, 1477, 1484,
     1491, 1494, 1500, 1507, 1514, 1521

    } ;

static yyconst flex_int16_t yy_def[797] =
    {   0,
      784,    1,  784,  784,  784,  784,  784,  785,  784,  784,
      786,  787,  784,  784,  786,   15,  788,  788,  788,  789,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  784,  785,  784,   15,  784,  787,  787,  787,
      787,  784,  790,  791,  792,  788,  788,  784,  787,   25,
      788,  789,  789,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,

      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      784,  787,  787,  793,  794,  791,  792,  788,  788,  789,
      789,  789,  789,  789,  789,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,

      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  793,  795,  793,  794,  796,  784,
      788,  789,  789,  789,  789,  789,  789,  789,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,

      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  793,  793,  784,  793,  796,
      794,  794,  784,  788,  789,  789,  789,  789,  789,  789,

      789,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  784,  784,  794,  784,  784,  784,  789,

      789,  789,  789,  789,  789,  789,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  784,  789,  789,
      789,  789,  789,  789,  789,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,

      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  789,  789,  789,  789,  789,  789,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  789,  789,  789,  789,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,

      788,  788,  788,  788,  788,  789,  789,  789,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  789,  789,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  789,  789,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  789,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,    0,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784

    } ;

static yyconst flex_int16_t yy_nxt[1735] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   16,   16,   16,   16,   16,   17,   18,
       17,   17,   19,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   20,   21,   22,
       23,   24,   25,   26,   27,   17,   28,   29,   17,   30,
       31,   32,   33,   34,   17,   35,   36,   37,   38,   39,
       40,   41,   42,   17,   43,   43,   43,   43,   45,   52,
       52,   52,   52,   52,   52,   52,   53,   48,   45,   48,
       54,   47,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   47,   48,   57,   48,   48,   43,   43,   48,  148,

       48,   47,   49,  149,   50,   50,   50,   50,   50,   50,
       50,   47,   99,   48,  100,   51,   64,  102,   90,   48,
       48,   91,  101,  136,  137,  158,   65,  140,   66,   79,
       55,  103,   67,   68,  159,   51,   58,   59,   48,   80,
       60,   60,   60,   60,   60,   60,   60,   69,  156,   81,
       74,   70,   48,   48,   48,  162,   48,   71,   48,   61,
       72,   75,  266,   48,   76,   77,  267,   73,   78,   58,
       59,   48,   48,   60,   60,   60,   60,   60,   60,   60,
       48,  131,   85,   48,  117,   48,  132,   92,  118,   93,
       86,  157,   94,   87,   48,   48,   88,   48,   48,   48,

      164,  104,   89,  173,  119,  105,  108,   48,  109,  106,
      110,   82,   48,   83,   48,  107,  138,  128,   95,   48,
      139,   48,   48,   84,   48,   96,   97,  129,  111,  133,
       48,   98,  112,  160,  130,  113,   48,  134,  163,  161,
      179,  165,   48,  135,  178,  114,  120,  196,  115,   48,
      121,  169,  116,  122,  123,  207,  174,  263,   48,  222,
       48,  124,  125,  166,  126,  170,  127,   52,   52,   52,
       52,   52,   52,   52,   58,   58,   48,  188,  141,  141,
      141,  141,  141,  141,  141,  142,  142,  142,  142,  142,
      142,  142,   49,  190,   50,   50,   50,   50,   50,   50,

       50,  189,   58,   59,   48,   51,  143,  143,  143,  143,
      143,  143,  143,   52,   52,   52,   52,   52,   52,   52,
      784,   48,   48,   48,   47,   51,  141,  141,  141,  141,
      141,  141,  141,  143,  143,  143,  143,  143,  143,  143,
      150,  151,   48,  152,   47,   48,   48,   48,  153,  154,
      155,   48,  167,  168,  171,   48,   48,   48,   48,   48,
       48,  180,   56,   48,   56,  172,  195,  197,   48,   48,
       48,  181,   48,   48,   56,  182,   48,  175,   48,  185,
      176,  186,   48,   48,   48,   48,  177,   48,   48,   48,
      183,  199,  184,  191,  192,   48,  187,   48,   48,  193,

      200,   48,   48,  198,   48,  194,   48,  201,  202,   48,
      204,   48,   48,  212,  203,  206,  214,  205,  208,  221,
       48,   48,  213,   48,   48,  209,  229,  223,   48,  218,
      210,  211,  215,  216,  217,  219,  235,  224,   48,  236,
      225,  220,  237,  230,  240,  231,   48,   48,   48,  232,
      226,  233,  227,  228,  241,   48,  234,  242,  245,  238,
       48,  243,   48,   48,   48,  239,  248,   48,  269,   48,
      244,  249,  270,  261,  274,   48,  250,   48,  246,  251,
      254,   48,  247,   48,  275,  271,  252,  253,   48,   48,
       48,   48,  280,  257,  255,  256,  258,  259,  264,   48,

       48,  260,   48,  282,   48,   48,   48,  262,  141,  141,
      141,  141,  141,  141,  141,  142,  142,  142,  142,  142,
      142,  142,  286,  288,  279,  281,   51,  143,  143,  143,
      143,  143,  143,  143,  283,  285,  287,  284,  289,   48,
       48,   48,   48,   48,   48,  292,   51,   48,  291,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,  290,  296,   48,  297,   48,   48,  299,   48,   48,
      302,   48,  303,  298,  293,  300,  315,   48,  304,  294,
      295,  305,  307,  318,  308,  306,  301,  309,  313,  314,

      312,  316,  320,  317,  322,  319,  323,  310,  321,  328,
      324,  311,   48,  325,   48,  329,  333,  327,  331,  326,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,  330,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,  334,  760,  341,   48,   48,  335,
       48,   48,  338,  332,   48,   48,   48,  340,  351,  349,
       48,  336,  342,  339,  345,  337,  346,  344,  347,  348,
      343,  355,  350,  358,  352,  360,  362,  353,   48,  356,
      361,  357,  354,  359,  364,  367,  365,  366,  363,  368,

      371,  369,   48,   48,  370,   48,   48,  378,  374,   48,
       48,   48,   48,  381,   48,  387,   48,  266,   48,  388,
      392,  389,  372,   48,  393,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,  373,  375,   48,   48,
      380,   48,  379,  376,  377,  384,   48,  394,   48,  383,
       48,   48,  382,   48,   48,  385,   48,   48,   48,  405,
       48,   48,   48,   48,  412,  402,   48,  411,  409,   48,
      408,  403,  406,  404,   48,  407,  414,  415,  419,   48,
      410,   48,  416,   48,  413,   48,   48,   48,  417,   48,
      422,  420,  423,  418,  425,  426,  424,  427,  431,  421,

       48,  428,   48,   48,  429,   48,   48,   48,   48,  432,
      430,  433,   48,  435,   48,  438,   48,  434,   48,  440,
       48,  441,  436,   48,   48,   48,   48,   48,   48,   48,
       48,   48,  437,   48,  447,  439,  445,   48,   48,   48,
       48,  448,   48,   48,   48,   48,  444,  442,  452,   48,
       48,   48,  443,  449,  446,  454,   48,  457,   48,  458,
       48,   48,  450,  461,  453,   48,  455,  451,  459,  467,
       48,  463,  460,  456,   48,   48,   48,   48,   48,  462,
       48,  469,   48,   48,  468,   48,  466,  464,  470,  473,
      472,   48,  465,  474,  471,  478,   48,  475,   48,   48,

      266,  266,  477,  476,  494,  495,   48,  481,   48,  480,
      482,  266,  479,   48,  485,  389,  496,  489,  390,  483,
      497,  486,  498,  269,  493,  484,  490,  499,  507,   48,
       48,   48,  487,   48,  488,   48,   48,  510,   48,  491,
      492,   48,   48,   48,   48,   48,   48,   48,  508,   48,
       48,   48,   48,   48,   48,   48,  511,   48,   48,   48,
      509,  513,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,  512,   48,   48,  518,  519,  517,  515,  520,
      521,  522,  516,  523,  514,  525,  527,  526,  529,  531,
      524,  530,  532,  528,  533,  536,   48,  537,  541,   48,

      534,  539,   48,  542,  544,   48,   48,  538,  535,   48,
      540,   48,  543,   48,   48,   48,  546,   48,   48,  547,
       48,   48,   48,   48,   48,  545,  548,   48,   48,   48,
       48,   48,   48,   48,  550,   48,   48,  551,   48,  552,
       48,   48,  390,   48,   48,  555,  578,  558,  549,   48,
       48,   48,  559,  561,   48,   48,   48,  556,  553,  562,
      554,  557,  571,   48,  564,  568,   48,  567,   48,  560,
       48,  563,  566,  572,  575,  565,  570,  573,  569,   48,
      592,  586,  576,  577,   48,  574,  587,  589,  591,   48,
      588,   48,  590,   48,   48,  595,   48,  593,   48,   48,

      596,   48,   48,  594,   48,  599,   48,   48,   48,   48,
       48,  597,   48,  598,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,  600,   48,  601,   48,   48,
       48,  604,  606,  607,  608,   48,  609,  610,  611,  602,
      605,   48,  612,  614,  613,  625,   48,  603,  620,  615,
      618,  619,  622,  616,  621,  624,   48,  626,   48,  617,
       48,   48,   48,  623,   48,  627,   48,  628,   48,  629,
       48,   48,  631,   48,   48,   48,  632,   48,  630,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
      633,   48,  642,   48,   48,  640,  644,   48,  645,   48,

      648,  643,  651,  641,  646,  649,  650,   48,   48,  647,
       48,   48,  656,  655,  657,  652,  653,  658,  660,   48,
      654,  661,  659,  662,  663,   48,  665,   48,   48,   48,
      666,  664,  667,  671,   48,   48,   48,  668,   48,   48,
      669,  670,   48,   48,  673,   48,   48,   48,   48,   48,
       48,   48,  674,   48,  672,   48,   48,  675,   48,  680,
       48,  686,   48,   48,  683,  684,   48,   48,   48,   48,
       48,   48,   48,   48,   48,  687,  682,  681,   48,  691,
       48,  693,  688,  685,  696,   48,  692,  690,  694,  697,
      698,  689,   48,  699,   48,   48,  700,  695,  704,  701,

      710,  709,   48,   48,   48,   48,  714,  705,  702,   48,
      703,  715,  712,  713,  711,  717,   48,   48,   48,   48,
       48,  716,  718,  720,  719,   48,   48,   48,   48,   48,
       48,  722,   48,  721,   48,  725,   48,   48,   48,   48,
       48,   48,   48,  729,   48,   48,  731,   48,  724,   48,
      723,  730,  726,  732,  733,   48,   48,  736,   48,  741,
      738,  734,  735,  737,  740,   48,  743,   48,   48,  747,
       48,  753,   48,  739,  750,  742,  751,  752,   48,  754,
      756,   48,   48,   48,   48,  746,  748,  749,  757,  758,
       48,  755,   48,   48,   48,   48,   48,   48,   48,  759,

       48,  761,   48,   48,  764,   48,   48,   48,  745,  744,
      762,   48,  767,  763,  765,  768,   48,  771,  772,   48,
      769,  766,  770,   48,  728,  727,  774,  775,  773,   48,
       48,   48,  776,   48,  778,  777,  779,   48,   48,   48,
       48,  708,  780,  707,  706,   48,   48,   48,   48,   48,
       48,   48,  782,   48,   48,   48,  781,  679,  678,  677,
      783,   44,  676,   44,   44,   44,   44,   44,   46,   46,
       48,   48,   48,   48,   48,   56,   56,   56,   56,   56,
       62,   62,   62,   62,  144,  144,  144,  144,  144,  144,
      144,  146,   48,  146,  146,  146,  146,  146,  147,  147,

      265,  265,  265,  265,  265,  265,  265,  268,  268,  268,
      268,  268,  268,  268,  386,  386,  386,  386,  386,  386,
      386,  391,  391,  391,  391,  391,  391,  391,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,  639,
      638,  637,  636,  635,  634,  391,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,  585,
      584,  583,  582,  581,  580,  579,  391,  391,  386,  386,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,

       48,   48,   48,  506,  505,  504,  503,  502,  501,  500,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
      401,  400,  399,  398,  397,  396,  395,  391,  390,  266,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,  278,  277,  276,  273,  272,   48,   48,
       48,   48,   48,  145,  784,   63,   48,  784,  784,    3,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,

      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784
    } ;

static yyconst flex_int16_t yy_chk[1735] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    5,    5,    6,    6,   11,   13,
       13,   13,   13,   13,   13,   13,   14,   27,   15,   18,
       14,   11,   29,   57,   30,   21,   40,   31,  783,   42,
       61,   15,   66,   18,  781,   24,   43,   43,   67,   57,

       64,   11,   12,   61,   12,   12,   12,   12,   12,   12,
       12,   15,   29,   22,   30,   12,   21,   31,   27,   69,
       23,   27,   30,   40,   40,   66,   21,   42,   21,   24,
       15,   31,   21,   21,   67,   12,   19,   19,   38,   24,
       19,   19,   19,   19,   19,   19,   19,   22,   64,   24,
       23,   22,   26,   65,   35,   69,   71,   22,   77,   19,
       22,   23,  144,   33,   23,   23,  144,   22,   23,   25,
       25,   32,   41,   25,   25,   25,   25,   25,   25,   25,
       37,   38,   26,   28,   35,   68,   38,   28,   35,   28,
       26,   65,   28,   26,   80,   70,   26,   81,   34,   39,

       71,   32,   26,   77,   35,   32,   33,   72,   33,   32,
       33,   25,   36,   25,   73,   32,   41,   37,   28,   78,
       41,   75,  103,   25,  139,   28,   28,   37,   34,   39,
      116,   28,   34,   68,   37,   34,   85,   39,   70,   68,
       81,   72,   93,   39,   80,   34,   36,   93,   34,   87,
       36,   75,   34,   36,   36,  103,   78,  139,   86,  116,
      779,   36,   36,   73,   36,   75,   36,   45,   45,   45,
       45,   45,   45,   45,   47,   47,  778,   85,   47,   47,
       47,   47,   47,   47,   47,   49,   49,   49,   49,   49,
       49,   49,   50,   87,   50,   50,   50,   50,   50,   50,

       50,   86,   51,   51,   74,   50,   51,   51,   51,   51,
       51,   51,   51,   52,   52,   52,   52,   52,   52,   52,
       60,   60,   76,   82,   52,   50,   58,   58,   58,   58,
       58,   58,   58,   59,   59,   59,   59,   59,   59,   59,
       63,   63,   83,   63,   52,   79,   88,   84,   63,   63,
       63,   89,   74,   74,   76,   90,   91,   92,   96,   97,
       94,   82,   60,   99,   60,   76,   92,   94,  100,  101,
      102,   82,  106,  107,   60,   83,  104,   79,  105,   84,
       79,   84,  108,  109,  113,  111,   79,  112,  115,  117,
       83,   97,   83,   88,   89,  119,   84,  114,  122,   90,

       97,  121,  120,   96,  118,   91,  126,   97,   97,  123,
      100,  127,  124,  106,   99,  102,  108,  101,  104,  115,
      125,  130,  107,  128,  137,  104,  119,  117,  129,  113,
      105,  105,  109,  111,  112,  114,  122,  118,  131,  123,
      118,  114,  124,  120,  126,  120,  132,  133,  134,  120,
      118,  120,  118,  118,  127,  135,  121,  128,  129,  124,
      138,  128,  157,  136,  140,  125,  130,  148,  145,  160,
      128,  131,  145,  137,  152,  156,  131,  159,  129,  131,
      132,  164,  129,  771,  152,  148,  131,  131,  768,  166,
      764,  161,  157,  135,  133,  134,  135,  136,  140,  162,

      169,  136,  170,  160,  167,  163,  165,  138,  141,  141,
      141,  141,  141,  141,  141,  142,  142,  142,  142,  142,
      142,  142,  164,  166,  156,  159,  142,  143,  143,  143,
      143,  143,  143,  143,  161,  163,  165,  162,  167,  168,
      171,  172,  175,  173,  174,  170,  142,  176,  169,  178,
      183,  177,  179,  180,  186,  188,  184,  181,  761,  182,
      201,  759,  194,  189,  758,  185,  207,  187,  191,  198,
      756,  168,  173,  193,  174,  190,  192,  176,  199,  200,
      178,  202,  179,  175,  171,  177,  186,  204,  180,  172,
      172,  181,  182,  189,  182,  181,  177,  182,  184,  185,

      183,  187,  191,  188,  193,  190,  194,  182,  192,  201,
      198,  182,  203,  198,  205,  202,  207,  200,  204,  199,
      208,  209,  211,  214,  215,  216,  217,  218,  220,  219,
      223,  225,  226,  221,  222,  224,  227,  228,  229,  231,
      232,  237,  203,  751,  236,  235,  230,  240,  238,  234,
      750,  243,  242,  746,  208,  745,  218,  244,  256,  209,
      239,  245,  215,  205,  250,  241,  246,  217,  227,  225,
      259,  211,  219,  216,  221,  214,  222,  220,  223,  224,
      219,  230,  226,  234,  228,  236,  238,  228,  248,  231,
      237,  232,  229,  235,  239,  242,  240,  241,  238,  243,

      246,  244,  249,  251,  245,  252,  253,  256,  250,  257,
      258,  260,  261,  259,  264,  266,  263,  267,  279,  266,
      269,  267,  248,  280,  269,  271,  282,  283,  285,  284,
      287,  290,  291,  292,  293,  294,  249,  251,  295,  296,
      258,  299,  257,  252,  253,  263,  297,  271,  298,  261,
      300,  302,  260,  301,  303,  264,  305,  308,  310,  283,
      306,  311,  312,  307,  293,  279,  314,  292,  290,  309,
      287,  280,  284,  282,  316,  285,  295,  296,  298,  317,
      291,  318,  296,  319,  294,  320,  321,  324,  296,  322,
      301,  299,  302,  297,  305,  306,  303,  307,  311,  300,

      325,  308,  326,  327,  309,  330,  328,  329,  331,  312,
      310,  314,  333,  317,  334,  320,  335,  316,  337,  322,
      338,  324,  318,  341,  342,  344,  340,  343,  346,  347,
      345,  349,  319,  350,  330,  321,  328,  351,  352,  353,
      354,  331,  356,  357,  358,  359,  327,  325,  337,  360,
      362,  361,  326,  333,  329,  340,  364,  343,  366,  344,
      369,  370,  334,  347,  338,  363,  341,  335,  345,  354,
      365,  350,  346,  342,  372,  373,  374,  375,  376,  349,
      377,  357,  378,  382,  356,  380,  353,  351,  358,  361,
      360,  385,  352,  362,  359,  366,  384,  363,  402,  404,

      386,  387,  365,  364,  386,  387,  407,  372,  412,  370,
      373,  389,  369,  414,  376,  389,  390,  382,  391,  374,
      390,  377,  391,  392,  385,  375,  384,  392,  402,  415,
      417,  416,  378,  418,  380,  419,  420,  412,  422,  384,
      384,  421,  424,  428,  433,  423,  425,  430,  404,  431,
      436,  427,  432,  440,  439,  434,  414,  438,  441,  442,
      407,  416,  443,  444,  445,  447,  446,  450,  448,  449,
      451,  452,  415,  453,  454,  421,  422,  420,  418,  423,
      424,  425,  419,  427,  417,  430,  432,  431,  434,  438,
      428,  436,  439,  433,  440,  443,  455,  444,  448,  457,

      441,  446,  458,  449,  451,  459,  460,  445,  442,  462,
      447,  464,  450,  463,  466,  469,  453,  470,  467,  454,
      472,  473,  475,  474,  479,  452,  455,  477,  478,  480,
      484,  481,  487,  485,  458,  488,  490,  459,  492,  460,
      511,  510,  496,  514,  491,  464,  496,  469,  457,  507,
      513,  515,  470,  473,  517,  512,  525,  466,  462,  474,
      463,  467,  487,  516,  477,  481,  519,  480,  521,  472,
      523,  475,  479,  488,  491,  478,  485,  490,  484,  524,
      515,  507,  491,  492,  526,  490,  510,  512,  514,  528,
      511,  529,  513,  530,  531,  519,  532,  516,  534,  536,

      521,  548,  538,  517,  550,  525,  539,  540,  543,  552,
      568,  523,  546,  524,  547,  549,  553,  554,  557,  565,
      558,  567,  560,  570,  571,  526,  572,  528,  573,  574,
      575,  531,  534,  536,  538,  576,  539,  540,  543,  529,
      532,  577,  546,  548,  547,  568,  586,  530,  557,  549,
      553,  554,  560,  550,  558,  567,  587,  570,  588,  552,
      589,  592,  590,  565,  591,  571,  595,  572,  600,  573,
      597,  601,  575,  605,  599,  598,  576,  606,  574,  608,
      609,  612,  610,  617,  618,  611,  613,  614,  620,  616,
      577,  622,  588,  619,  623,  586,  590,  624,  591,  628,

      597,  589,  600,  587,  592,  598,  599,  630,  626,  595,
      631,  632,  609,  608,  610,  601,  605,  611,  613,  633,
      606,  614,  612,  616,  617,  641,  619,  643,  644,  649,
      620,  618,  622,  628,  646,  647,  648,  623,  650,  652,
      624,  626,  654,  655,  631,  656,  657,  658,  660,  661,
      669,  662,  632,  667,  630,  663,  666,  633,  668,  641,
      672,  649,  673,  675,  646,  647,  680,  681,  674,  682,
      683,  684,  685,  689,  686,  650,  644,  643,  695,  656,
      690,  658,  652,  648,  662,  698,  657,  655,  660,  663,
      666,  654,  692,  667,  694,  700,  668,  661,  674,  669,

      681,  680,  699,  703,  704,  709,  685,  675,  672,  705,
      673,  686,  683,  684,  682,  690,  711,  710,  721,  712,
      713,  689,  692,  695,  694,  718,  719,  720,  722,  724,
      723,  699,  729,  698,  725,  704,  726,  731,  732,  733,
      734,  737,  735,  709,  739,  736,  711,  740,  703,  738,
      700,  710,  705,  712,  713,  742,  741,  720,  743,  724,
      722,  718,  719,  721,  723,  748,  726,  747,  749,  731,
      752,  737,  754,  722,  734,  725,  735,  736,  755,  738,
      740,  757,  753,  765,  766,  729,  732,  733,  741,  742,
      762,  739,  763,  767,  769,  770,  772,  773,  776,  743,

      774,  747,  775,  777,  752,  780,  782,  730,  728,  727,
      748,  717,  755,  749,  753,  757,  716,  765,  766,  715,
      762,  754,  763,  714,  708,  706,  769,  770,  767,  702,
      701,  697,  772,  696,  774,  773,  775,  693,  691,  688,
      687,  679,  776,  678,  677,  671,  670,  665,  664,  659,
      653,  651,  780,  645,  642,  640,  777,  639,  638,  636,
      782,  785,  634,  785,  785,  785,  785,  785,  786,  786,
      787,  787,  787,  787,  787,  788,  788,  788,  788,  788,
      789,  789,  789,  789,  790,  790,  790,  790,  790,  790,
      790,  791,  629,  791,  791,  791,  791,  791,  792,  792,

      793,  793,  793,  793,  793,  793,  793,  794,  794,  794,
      794,  794,  794,  794,  795,  795,  795,  795,  795,  795,
      795,  796,  796,  796,  796,  796,  796,  796,  627,  625,
      621,  615,  607,  604,  603,  602,  596,  594,  593,  585,
      584,  583,  582,  581,  579,  578,  569,  566,  564,  563,
      562,  561,  559,  556,  555,  551,  545,  544,  542,  541,
      537,  535,  533,  527,  522,  520,  518,  509,  508,  506,
      505,  504,  503,  502,  501,  500,  499,  498,  495,  494,
      493,  489,  486,  483,  482,  476,  471,  468,  465,  461,
      456,  437,  435,  429,  426,  413,  411,  410,  409,  408,

      406,  405,  403,  401,  400,  399,  398,  397,  396,  395,
      394,  383,  381,  379,  371,  368,  367,  355,  348,  339,
      336,  332,  323,  315,  313,  304,  289,  288,  286,  281,
      278,  277,  276,  275,  274,  273,  272,  270,  268,  265,
      262,  255,  254,  247,  233,  213,  212,  210,  206,  197,
      196,  195,  158,  155,  154,  153,  151,  150,  149,  110,
       98,   95,   56,   53,   46,   20,   17,   16,    3,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,

      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[170] =
    {   0,
1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0,     };

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_offset = 0;
static int yy_prev_more_offset = 0;
#define yymore() ((yy_more_offset) = yy_flex_strlen( yytext ))
#define YY_NEED_STRLEN
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET \
	{ \
	(yy_more_offset) = (yy_prev_more_offset); \
	yyleng -= (yy_more_offset); \
	}
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * Thrift scanner.
 *
 * Tokenizes a thrift definition file.
 */

/* This is redundant with some of the flags in Makefile.am, but it works
 * when people override CXXFLAGS without being careful. The pragmas are
 * the 'right' way to do it, but don't work on old-enough GCC (in particular
 * the GCC that ship on Mac OS X 10.6.5, *counter* to what the GNU docs say)
 *
 * We should revert the Makefile.am changes once Apple ships a reasonable
 * GCC.
 */
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-label"

#include <string>
#include <cerrno>

#include "main.h"
#include "globals.h"
#include "parse/t_program.h"

/**
 * Must be included AFTER parse/t_program.h, but I can't remember why anymore
 * because I wrote this a while ago.
 */
#include "thrifty.h"

void thrift_reserved_keyword(char* keyword) {
  yyerror("Cannot use reserved language keyword: \"%s\"\n", keyword);
  exit(1);
}

void integer_overflow(char* text) {
  yyerror("This integer is too big: \"%s\"\n", text);
  exit(1);
}

void unexpected_token(char* text) {
  yyerror("Unexpected token in input: \"%s\"\n", text);
  exit(1);
}

/**
 * Provides the yylineno global, useful for debugging output
 */
/**
 * Our inputs are all single files, so no need for yywrap
 */
/**
 * We don't use it, and it fires up warnings at -Wall
 */
/**
 * Helper definitions, comments, constants, and whatnot
 */

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;




	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 785 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1670 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_prev_more_offset); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )

    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
{ /* do nothing */                 }
	YY_BREAK
case 2:
YY_RULE_SETUP
{ /* do nothing */                 }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
{ /* do nothing */                 }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ /* do nothing */                 }
	YY_BREAK
case 5:
YY_RULE_SETUP
{ /* do nothing */                 }
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return yytext[0];                }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return yytext[0];                }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ yylval.iconst=0; return tok_int_constant; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ yylval.iconst=1; return tok_int_constant; }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return tok_namespace;            }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return tok_cpp_namespace;        }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return tok_cpp_include;          }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return tok_cpp_type;             }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return tok_java_package;         }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return tok_cocoa_prefix;         }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return tok_csharp_namespace;     }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return tok_delphi_namespace;     }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return tok_php_namespace;        }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return tok_py_module;            }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return tok_perl_package;         }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return tok_ruby_namespace;       }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return tok_smalltalk_category;   }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return tok_smalltalk_prefix;     }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return tok_xsd_all;              }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return tok_xsd_optional;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return tok_xsd_nillable;         }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return tok_xsd_namespace;        }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return tok_xsd_attrs;            }
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return tok_include;              }
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return tok_void;                 }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return tok_bool;                 }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return tok_byte;                 }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return tok_i16;                  }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return tok_i32;                  }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return tok_i64;                  }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return tok_double;               }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return tok_string;               }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return tok_binary;               }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return tok_slist;                }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return tok_senum;                }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return tok_map;                  }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return tok_list;                 }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return tok_set;                  }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return tok_oneway;               }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return tok_typedef;              }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return tok_struct;               }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return tok_union;                }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return tok_xception;             }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return tok_extends;              }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return tok_throws;               }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return tok_service;              }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return tok_enum;                 }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return tok_const;                }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return tok_required;             }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return tok_optional;             }
	YY_BREAK
case 56:
YY_RULE_SETUP
{
  pwarning(0, "\"async\" is deprecated.  It is called \"oneway\" now.\n");
  return tok_oneway;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 73:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 74:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 77:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 79:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 80:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 81:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 82:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 83:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 84:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 85:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 86:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 87:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 88:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 89:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 90:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 91:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 92:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 93:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 94:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 95:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 96:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 97:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 98:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 99:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 100:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 101:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 102:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 103:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 104:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 105:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 106:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 107:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 108:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 109:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 110:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 111:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 112:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 113:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 114:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 115:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 116:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 117:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 118:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 119:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 120:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 121:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 122:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 123:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 124:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 125:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 126:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 127:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 128:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 129:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 130:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 131:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 132:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 133:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 134:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 135:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 136:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 137:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 138:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 139:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 140:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 141:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 142:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 143:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 144:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 145:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 146:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 147:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 148:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 149:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 150:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 151:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 152:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 153:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 154:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 155:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 156:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 157:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 158:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 159:
YY_RULE_SETUP
{ thrift_reserved_keyword(yytext); }
	YY_BREAK
case 160:
YY_RULE_SETUP
{
  errno = 0;
  yylval.iconst = strtoll(yytext, NULL, 10);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 161:
YY_RULE_SETUP
{
  errno = 0;
  yylval.iconst = strtoll(yytext+2, NULL, 16);
  if (errno == ERANGE) {
    integer_overflow(yytext);
  }
  return tok_int_constant;
}
	YY_BREAK
case 162:
YY_RULE_SETUP
{
  yylval.dconst = atof(yytext);
  return tok_dub_constant;
}
	YY_BREAK
case 163:
YY_RULE_SETUP
{
  yylval.id = strdup(yytext);
  return tok_identifier;
}
	YY_BREAK
case 164:
YY_RULE_SETUP
{
  yylval.id = strdup(yytext);
  return tok_st_identifier;
}
	YY_BREAK
case 165:
YY_RULE_SETUP
{
  char mark = yytext[0];
  std::string result;
  for(;;)
  {
    int ch = yyinput();
    switch (ch) {
      case EOF:
        yyerror("End of file while read string at %d\n", yylineno);
        exit(1);
      case '\n':
        yyerror("End of line while read string at %d\n", yylineno - 1);
        exit(1);
      case '\\':
        ch = yyinput();
        switch (ch) {
          case 'r':
            result.push_back('\r');
            continue;
          case 'n':
            result.push_back('\n');
            continue;
          case 't':
            result.push_back('\t');
            continue;
          case '"':
            result.push_back('"');
            continue;
          case '\'':
            result.push_back('\'');
            continue;
          case '\\':
            result.push_back('\\');
            continue;
          default:
            yyerror("Bad escape character\n");
            return -1;
        }
        break;
      default:
        if (ch == mark) {
          yylval.id = strdup(result.c_str());
          return tok_literal;
        } else {
          result.push_back(ch);
        }
    }
  }
}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
{
 /* This does not show up in the parse tree. */
 /* Rather, the parser will grab it out of the global. */
  if (g_parse_mode == PROGRAM) {
    clear_doctext();
    g_doctext = strdup(yytext + 3);
    g_doctext[strlen(g_doctext) - 2] = '\0';
    g_doctext = clean_up_doctext(g_doctext);
    g_doctext_lineno = yylineno;
  }
}
	YY_BREAK
case 167:
YY_RULE_SETUP
{
  unexpected_token(yytext);
}
	YY_BREAK
case 168:
YY_RULE_SETUP
{
  /* Catch-all to let us catch "*" in the parser. */
  return (int) yytext[0];
}
	YY_BREAK
case 169:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;

	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 785 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 785 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 784);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;

	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )

    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;

	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;

	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;

	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{

	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int yyget_lineno  (void)
{

    return yylineno;
}

/** Get the input stream.
 *
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 *
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 *
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 *
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 *
 */
void yyset_lineno (int  line_number )
{

    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 *
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"




/* vim: filetype=lex
*/

