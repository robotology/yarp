<module>
    <!-- module's name should match its executable file's name. -->
    <name>velocityObserver</name>
    <description>Estimates the first and second derivatives of incoming data vector through a least-squares algorithm based on an adpative window.</description>
    <version>1.0</version>

    <!-- <arguments> can have multiple <param> tags-->
    <arguments>
        <param desc="module name (serves as port prefix)" default="velObs"> name </param>
        <param desc="maximum window length for buffering the input data (used for the first derivative estimation)" default="16"> lenVel </param>
        <param desc="maximum window length for buffering the input data (used for the second derivative estimation)" default="25"> lenAcc </param>
        <param desc="maximum deviation threshold for the algorithm (used for the first derivative estimation)" default="" required="yes"> thrVel </param>
        <param desc="maximum deviation threshold for the algorithm (used for the second derivative estimation)" default="1.0"> thrAcc </param>
        <switch desc="display list of possible parameters"> help </switch>
    </arguments>

    <!-- <authors> can have multiple <author> tags. -->
    <authors>
        <author email="ugo.pattacini@iit.it"> Ugo Pattacini </author>
    </authors>

     <!-- <data> can have multiple <input> or <output> tags. -->
     <data>
        <!-- input data if available-->
        <input>
            <!-- <type> refers to nominal type of data (e.g. ImageFrame, String). -->
            <type>Vector</type>

            <!-- input port which receive the data. -->
            <port carrier="tcp">/velObs/pos:i</port>

            <!-- required input means the execution of module depends on
                 this input data. Notice that not all the input are required
                 for a module to perform its task (e.g. control input, status
                 request input). -->
            <required>yes</required>

            <!-- priority forces the execution of module to be delayed
                 until the required data becomes available on the port -->
            <priority>no</priority>
            <description>receives the input data vector</description>
        </input>
        <input>
            <type>Vector</type>
            <port carrier="tcp">/velObs/rpc</port>
            <required>no</required>
            <priority>no</priority>
            <description>RPC port, useful to shut down the module remotely by sending to this port the 'quit'
  command.</description>
        </input>

        <!-- output datas if available -->
        <output>
            <type>Vector</type>
            <port carrier="tcp">/velObs/vel:o</port>
            <description>provides the estimated first derivatives</description>
        </output>
        <output>
            <type>Vector</type>
            <port carrier="tcp">/velObs/acc:o</port>
            <description>provides the estimated second derivatives</description>
        </output>
    </data>

    <!-- physical and logical resource dependencies can be introduced in this
         section. Dependencies must follow resource conceptional models. Currently
         available resource models are 'memory', 'processor', 'storage', 'network',
         'yarp_port', 'platform' and 'gpu'. All resource dependencies should be introduced
         inside <computer></computer> tags. While resources described inside <computer>
         tags represent conjunctional dependency, resources from different <computer>
         tags can be seen as disjunctions. Meaning that If a module depend on either
         resource R1 or R2 they can be introduced inside two different <computer> tags.
         Resource dependencies should be introduced if they are really required. For
         example, if module's performance drops significantly in case of memory swapping,
         a memory resource dependency can be introduced with the required memory space. -->
    <dependencies>
        <computer>
        </computer>
    </dependencies>

    <!-- specific libraries or header files which are used for development -->
    <development>
        <header></header>
        <library>YARP</library>
        <library>ctrlLib</library>
    </development>

</module>
