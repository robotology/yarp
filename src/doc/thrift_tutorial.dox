/*
 * Copyright: (C) 2012 Robotics, Brain and Cognitive Sciences - Istituto Italiano di Tecnologia (IIT)
 * Copy Policy: Released under the terms of the LGPLv2.1 or later, see LGPL.TXT
 *
 */

/**
*
@page thrift_tutorial Thrift IDL (Interface Definition Language) in YARP

This tutorial shows how to use the Apache Thrift Interface Definition Language to serialize data sent over YARP ports and define interfaces for RPC-based services in YARP Modules.

\section thrift_tutorial_sec_intro Introduction

Apache Thrift allows to define data types and service interfaces in a simple definition file. Taking that file as input, a compiler generates source code which can be used by different client modules and a server.
<b>In order to use IDLs, YARP must be built setting the CREATE_IDLS and ENABLE_yarpidl_thrift options to ON in CMake.</b>

\section thrift_tutorial_sec_language Language Reference

The following is a summary of the Thrift language reference, with corresponding mapping to YARP (C++) code.
Most of it was adapted from\n
http://thrift.apache.org/ \n
http://diwakergupta.github.com/thrift-missing-guide/

The <b>Thrift type system</b> consists of pre-defined base types, user-defined structs, container types, and service definitions.
\subsection thrift_tutorial_subs_basetypes Base Types

\arg \c bool: A boolean value (true or false), one byte; mapped to \c bool
\arg \c byte: A signed byte; mapped to \c int8_t
\arg \c i16: A 16-bit signed integer; mapped to \c int16_t
\arg \c i32: A 32-bit signed integer; mapped to \c int32_t
\arg \c i64: A 64-bit signed integer; mapped to \c int64_t
\arg \c double: A 64-bit floating point number; mapped to \c double
\arg \c string: Encoding agnostic text or binary string; mapped to \c std::string

Note that Thrift does not support unsigned integers. 

\subsection thrift_tutorial_subs_containers Containers
\arg \c list<t1>: An ordered list of elements of type t1. May contain duplicates. Mapped to \c std::vector.
\arg \c set<t1>: An unordered set of unique elements of type t1. Mapped to \c  std::set<t1>.
\arg \c map<t1,t2>: A map of strictly unique keys of type t1 to values of type t2. Mapped to \c std::map<T1, T2>.

Types used in containers many be any valid Thrift type excluding services.

\subsection thrift_tutorial_subs_structs Structs
Structs are the basic building blocks in a Thrift IDL.  A struct is composed of fields; each field has a unique, positive integer identifier, a type, a name and an optional default value.
Example:
\code
struct PointD {
  1: i32 x;
  2: i32 y;
  3: i32 z;
}

struct PointDLists{
  1: string name ="pointLists";
  2: list<PointD> firstList;
  3: list<PointD> secondList; 
}
\endcode

Note that structs may contain other structs, and that multiple structs can be defined and referred to within the same Thrift file. 

Structs translate to C++ classes that inherit from the yarp::os::idl::WirePortable class. For each struct, a .h and a .cpp file are created, which contain a definition of the class and an implementation of the default constructor and of the read/write methods of the \em WirePortable interface.

In case a certain structure should be translated to an existing YARP type, this can be declared with \c yarp.name and, if needed, \c yarp.includefile annotations:
\code
struct Vector {
  1: list<double> content;
} (
  yarp.name = "yarp::sig::Vector"
  yarp.includefile="yarp/sig/Vector.h"
)
\endcode

\subsection thrift_tutorial_subs_typedef Typedefs
Thrift supports C/C++ style typedefs.

\code
typedef PointD Point3D
\endcode

Note that there is no trailing semi-colon, and that not only base types but also structs can be used in typedefs.
If any typedef or constant value (see \ref thrift_tutorial_subs_const) is defined, a <thriftFileName>_common.h file is generated, which contains all typedefs and constants; this file is automatically included by all the other generated files.


\subsection thrift_tutorial_subs_const Constants
Thrift lets you define constants for use across languages. Complex types and structs are specified using JSON notation.

\code
const i32 ANSWER = 42
\endcode

Note that semi-colon is optional; hex values are valid here. 
If any typedef (see \ref thrift_tutorial_subs_typedef) or constant value is defined, a <thriftFileName>_common.h file is generated, which contains all typedefs and constants; this file is automatically included by all other generated files.

\subsection thrift_tutorial_subs_enums Enums
Enums are specified C-style. Compiler assigns default values starting at 0, but specific integral values (in the range of postive 32-bit integers) can be specified for constants. Hex values are also acceptable.

\code
enum PointQuality{
  UNKNOWN = 0,
  GOOD = 1,
  BAD = 2
}

struct PointWithQuality{
  1: PointD point;
  2: PointQuality quality= PointQuality.UNKNOWN;
}
\endcode

Note that there is no trailing semi-colon, and that the fully qualified name of the constant must be used when assigning default values. 
For each enum, a .h and a .cpp file are created, which contain the definition of the enum and a helper class that handles number/string conversion for the enum elements.

\subsection thrift_tutorial_subs_namespace Namespaces
Namespaces in Thrift are akin to namespaces in C++ or packages in Java  -  they offer a convenient way of organizing (or isolating) your code. Namespaces may also be used to prevent name clashes between type definitions. Thrift allows you to customize the namespace behavior on a per-language basis. 
YARP example:
\code
namespace yarp yarp.test
\endcode
means that all the code in the generated files will be included in 
\code
namespace yarp { namespace test {
 ... all
 ... code
}}
\endcode

\subsection thrift_tutorial_subs_include Includes

It is often useful to split up Thrift definitions in separate files to ease maintainance, enable reuse and improve modularity/organization. Thrift allows files to include other Thrift files. Included files are looked up in the current directory and by searching relative to the path from which the \c yarp_idl_to_dir macro is executed (see \ref thrift_tutorial_sec_codegen ). 
\code
include "firstInterface/PointD.thrift"
\endcode

Included objects are accessed using the name of the Thrift file as a prefix (see example in \ref thrift_tutorial_subs_services ).
In generated files, the needed header files generated from the PointD.thrift file will be included with the same inclusion prefix (in this case, "firstInterface").

\subsection thrift_tutorial_subs_services Services

Service definitions are semantically equivalent to defining an interface (or a pure virtual abstract class) in object-oriented programming. The Thrift compiler generates fully functional client and server stubs that implement the communication routine for the interface.
Services contain a collection of method definitions.

\code
include "firstInterface/PointD.thrift"
...
service Demo {
  i32 get_answer();
  i32 add_one(1:i32 x = 0);
  i32 double_down(1: i32 x);
  PointD.PointD add_point(1: PointD.PointD x, 2: PointD.PointD y);
}

\endcode

A method definition has a return type and arguments, like C code. Note that argument lists are specified using the exact same syntax as field lists in structs. Return types can be primitive types or structs; the  \c oneway modifier can precede a \c void return type to indicate that the client only requests that the server execute the function, but does not wait for an acknowlegment that the execution has completed (asynchronous processing). Default values can be provided for tail arguments; clients can avoid providing values for those parameters, which is especially useful when sending RPC calls via command line, as will be shown in section \ref thrift_tutorial_sec_completex. 

Services support inheritance: a service may optionally inherit from another service using the \c extends keyword.

\code
service DemoExtended extends Demo {
  Point3D multiply_point (1: Point3D x, 2:double factor)
}
\endcode

For each service, a .h and a .cpp file are created, which contain the definition of the interface as a class derived from yarp::os::Wire. The implementation of the \c read method to receive commands over a YARP port is provided, as well as the implementation of the command transmission over YARP for function calls performed by a client. The description of how to use this generated code to create server and client modules is provided in sections \ref thrift_tutorial_sec_server and \ref thrift_tutorial_sec_client respectively.


\subsection thrift_tutorial_subs_comments Comments

Thrift supports shell-style, C-style multi-line as well as single-line Java/C++ style comments.
\verbatim
# This is a valid comment.

/*
 * This is a multi-line comment.
 * Just like in C.
 */

// C++/Java style single-line comments work just as well.
\endverbatim


\section thrift_tutorial_sec_codegen Code generation

Generation of code for a Thrift definition file PointD.thrift in the "firstInterface" directory can be automatically performed by CMake calling the \c yarp_idl_to_dir macro defined in the YARP configuration file "YarpIDL.cmake":
\code
list(APPEND CMAKE_MODULE_PATH ${YARP_MODULE_PATH})
include(YarpIDL)

yarp_idl_to_dir(firstInterface/PointD.thrift <desired_output_dir>)
\endcode

The macro defines a CMake "advanced" option, ALLOW_IDL_GENERATION, which is by default set to OFF. Code generation occurs at CMake-configure time only when this option is enabled, otherwise it is assumed that code has already been generated and/or committed. Of course, if the generated code is not present and the ALLOW_IDL_GENERATION option is disabled, the configuration of subsequent projects that make use of generated code will fail.
Upon execution of the macro, the code is generated by the yarp-thrift compiler and copied into the <desired_output_dir>. In particular, .h files get copied in the \c include subdirectory, while .cpp files go into the \c src subdirectory. The directory structure inside these subdirectories replicates the one of the definition file: since PointD.thrift is in the firstInterface directory, .h files will go to the <desired_output_dir>/include/firstInterface/ folder, and .cpp files will go to <desired_output_dir>/src/firstInterface/ folder.
Furthermore, a firstInterface_PointD_thrift.cmake file will be created in the <desired_output_dir>. The name reflects the first argument to the yarp_idl_to_dir macro, where all non-alphanumerical characters are replaced with underscores. This file can be included in the CMake configuration files of a project that uses the generated code to retrieve a list of all generated file names, relative to the <desired_output_dir> path. In particular, a \em headers and a \em sources CMake variables are set that contain respectively a list of all .h header files, and a list of all .cpp source files.

\section thrift_tutorial_sec_server Server implementation
The purpose of a server is to listen for commands on a YARP port, execute the method that each command refers to, and send back the reply. With Thrift, a server is created from a \c service interface class (generated as in section \ref thrift_tutorial_subs_services), creating an object that implementats the methods of that interface, and attaching it to a YARP port.

\code
#include <iostream>
#include <yarp/os/all.h>
#include <secondInterface/Demo.h>


class DemoServer : public yarp::test::Demo {
public:
  virtual int32_t get_answer()
  {
      std::cout<<"Server:get_answer called" <<std::endl;
      return ANSWER;
  }
  virtual int32_t add_one(const int32_t x = 0)
  {
     std::cout<<"Server::add_one called with "<< x <<std::endl;
      return x+1;
  }
  virtual int32_t double_down(const int32_t x)
  {
      std::cout<<"Server::double_down called with "<< x <<std::endl;
      return x*2;
  }
  virtual  ::yarp::test::PointD add_point(const  ::yarp::test::PointD& x, const  ::yarp::test::PointD& y)
  {
    std::cout<<"Server::add_point called"<<std::endl;
    ::yarp::test::PointD z;
    z.x = x.x + y.x;
    z.y = x.y + y.y;
    z.z = x.z + y.z;
    return z;
  }
};

int main(int argc, char *argv[]) {
    yarp::os::Network yarp;

    DemoServer demoServer;
    yarp::os::Port port;
    demoServer.yarp().attachAsServer(port);
    if (!port.open("/demoServer")) { return 1; }
    
    while (true) {
        printf("Server running happily\n");
        yarp::os::Time::delay(10);
    }
    port.close();
    return 0;
}
\endcode

An altenative solution is to create a YARP module that implements the service interface:

\code
#include <iostream>
#include <yarp/os/all.h>
#include <secondInterface/Demo.h>


class DemoServerModule : public yarp::test::Demo, public yarp::os::RFModule {
public:
  /* Thrift Interface Implementation */
 
  <snip> see above

  /* RFModule implementation */
  yarp::os::Port cmdPort;
  
  bool attach(yarp::os::Port &source)
  {
      return this->yarp().attachAsServer(source);
  }
  bool configure( yarp::os::ResourceFinder &rf )
    {
        std::string moduleName = rf.check("name", 
                yarp::os::Value("demoServerModule"), 
                "module name (string)").asString().c_str();
        setName(moduleName.c_str());
        
        std::string slash="/";
        
        attach(cmdPort);
        
        std::string cmdPortName= "/";
        cmdPortName+= getName();
        cmdPortName += "/cmd";
        if (!cmdPort.open(cmdPortName.c_str())) {           
            std::cout << getName() << ": Unable to open port " << cmdPortName << std::endl;  
            return false;
        }
        return true;
    }   
  bool updateModule()
  {
      return true;
  }
  bool close()
  {
      cmdPort.close(); 
      return true;
  }
};

int main(int argc, char *argv[]) {
    yarp::os::Network yarp;
    if (!yarp.checkNetwork())
    {
        std::cout<<"Error: yarp server does not seem available"<<std::endl;
        return -1;
    }
    
    yarp::os::ResourceFinder rf;
    rf.setVerbose(true);
    rf.configure(argc, argv);

    DemoServerModule demoMod; 

    if (!demoMod.configure(rf))
        return -1;

    return demoMod.runModule();
}
\endcode 

\section thrift_tutorial_sec_client Client use

Clients can invoke a remote procedure on the server by simply declaring the interface and attaching it to a YARP port connected to the server. 

Simple example:
\code
#include <iostream>
#include <yarp/os/all.h>
#include <secondInterface/Demo.h>

using namespace yarp::test;
using namespace yarp::os;

int main(int argc, char *argv[]) {
  Property config;
  config.fromCommand(argc,argv);

  Network yarp;
  Port client_port;

  std::string servername= config.find("server").asString().c_str();
  client_port.open("/demo/client");
  if (!yarp.connect("/demo/client",servername.c_str()))
  {
     std::cout << "Error! Could not connect to server " << servername << std::endl;
     return -1;
  }

  Demo demo;
  demo.yarp().attachAsClient(client_port);

  PointD point;
  point.x = 0;
  point.y = 0;
  point.z = 0;
  PointD offset;
  offset.x = 1;
  offset.y = 2;
  offset.z = 3;

  std::cout << "== get_answer ==" << std::endl;
  int answer=demo.get_answer();
  std::cout << answer << std::endl;

  std::cout<<"== add_one =="<<std::endl;
  answer = demo.add_one(answer);
  std::cout << answer << std::endl;

  std::cout<<"== double_down =="<<std::endl;
  answer = demo.double_down(answer);
  std::cout << answer << std::endl;

  std::cout<<"== add_point =="<<std::endl;
  point = demo.add_point(point,offset);
  std::cout<<("== done! ==\n");

  return 0;
}
\endcode

\section thrift_tutorial_sec_completex Complete example

A complete example of Thrift code generation and server/client creation with CMake is available in
\code
 [YARP_SOURCE]/example/idl/thrift/
\endcode

The server can be launched from command line (assuming a \em yarpserver is running):
\verbatim
$ cd <build_directory>
$ userImpl/DemoServer  
yarp: Port /demoServer active at tcp://10.xxx.xx.xx:10002
\endverbatim

From another terminal, the communication on the server port can be eavesdropped with this command:
\verbatim
yarp read /log tcp+log.in://demoServer
\endverbatim

From yet another terminal, the client can be run with the following command:
\verbatim
$ cd <build_directory>
$ userImpl/DemoClient --server /demoServer
yarp: Port /demo/client active at tcp://10.xxx.xx.xx:10004
yarp: Sending output from /demo/client to /demoServer using tcp
== get_answer ==
42
== add_one ==
43
== double_down ==
86
== add_point ==
== done! ==
yarp: Removing output from /demo/client to /demoServer
\endverbatim

Note that RPC calls can also be sent to the server from command line:
\verbatim
$ yarp rpc /demoServer
get answer
Response: 42
get_answer
Response: 42
add one 42
Response: 43
double down 43
Response: 86
add point 1 2 3 4 5 6
Response: 5 7 9
add one
1
\endverbatim


\author Elena Ceseracciu (RBCS-IIT)


**/
