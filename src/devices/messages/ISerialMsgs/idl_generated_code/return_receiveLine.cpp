/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <return_receiveLine.h>

// Constructor with field values
return_receiveLine::return_receiveLine(const yarp::dev::ReturnValue& retval,
                                       const std::vector<std::int8_t>& message) :
        WirePortable(),
        retval(retval),
        message(message)
{
}

// Read structure on a Wire
bool return_receiveLine::read(yarp::os::idl::WireReader& reader)
{
    if (!nested_read_retval(reader)) {
        return false;
    }
    if (!read_message(reader)) {
        return false;
    }
    if (reader.isError()) {
        return false;
    }
    return true;
}

// Read structure on a Connection
bool return_receiveLine::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(2)) {
        return false;
    }
    if (!read(reader)) {
        return false;
    }
    return true;
}

// Write structure on a Wire
bool return_receiveLine::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!nested_write_retval(writer)) {
        return false;
    }
    if (!write_message(writer)) {
        return false;
    }
    if (writer.isError()) {
        return false;
    }
    return true;
}

// Write structure on a Connection
bool return_receiveLine::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!write(writer)) {
        return false;
    }
    return true;
}

// Convert to a printable string
std::string return_receiveLine::toString() const
{
    yarp::os::Bottle b;
    if (!yarp::os::Portable::copyPortable(*this, b)) {
        return {};
    }
    return b.toString();
}

// read retval field
bool return_receiveLine::read_retval(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(retval)) {
        reader.fail();
        return false;
    }
    return true;
}

// write retval field
bool return_receiveLine::write_retval(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(retval)) {
        return false;
    }
    return true;
}

// read (nested) retval field
bool return_receiveLine::nested_read_retval(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(retval)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) retval field
bool return_receiveLine::nested_write_retval(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(retval)) {
        return false;
    }
    return true;
}

// read message field
bool return_receiveLine::read_message(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_INT8) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    message.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(message.data()), message.size() * sizeof(std::int8_t))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write message field
bool return_receiveLine::write_message(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_INT8, message.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(message.data()), message.size() * sizeof(std::int8_t))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) message field
bool return_receiveLine::nested_read_message(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_INT8) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    message.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(message.data()), message.size() * sizeof(std::int8_t))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write (nested) message field
bool return_receiveLine::nested_write_message(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_INT8, message.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(message.data()), message.size() * sizeof(std::int8_t))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}
