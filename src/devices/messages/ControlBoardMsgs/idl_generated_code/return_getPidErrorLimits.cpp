/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <return_getPidErrorLimits.h>

// Constructor with field values
return_getPidErrorLimits::return_getPidErrorLimits(const yarp::dev::ReturnValue& ret,
                                                   const std::vector<double>& lims) :
        WirePortable(),
        ret(ret),
        lims(lims)
{
}

// Read structure on a Wire
bool return_getPidErrorLimits::read(yarp::os::idl::WireReader& reader)
{
    if (!nested_read_ret(reader)) {
        return false;
    }
    if (!read_lims(reader)) {
        return false;
    }
    if (reader.isError()) {
        return false;
    }
    return true;
}

// Read structure on a Connection
bool return_getPidErrorLimits::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(2)) {
        return false;
    }
    if (!read(reader)) {
        return false;
    }
    return true;
}

// Write structure on a Wire
bool return_getPidErrorLimits::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!nested_write_ret(writer)) {
        return false;
    }
    if (!write_lims(writer)) {
        return false;
    }
    if (writer.isError()) {
        return false;
    }
    return true;
}

// Write structure on a Connection
bool return_getPidErrorLimits::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!write(writer)) {
        return false;
    }
    return true;
}

// Convert to a printable string
std::string return_getPidErrorLimits::toString() const
{
    yarp::os::Bottle b;
    if (!yarp::os::Portable::copyPortable(*this, b)) {
        return {};
    }
    return b.toString();
}

// read ret field
bool return_getPidErrorLimits::read_ret(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(ret)) {
        reader.fail();
        return false;
    }
    return true;
}

// write ret field
bool return_getPidErrorLimits::write_ret(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(ret)) {
        return false;
    }
    return true;
}

// read (nested) ret field
bool return_getPidErrorLimits::nested_read_ret(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(ret)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) ret field
bool return_getPidErrorLimits::nested_write_ret(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(ret)) {
        return false;
    }
    return true;
}

// read lims field
bool return_getPidErrorLimits::read_lims(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    lims.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(lims.data()), lims.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write lims field
bool return_getPidErrorLimits::write_lims(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, lims.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(lims.data()), lims.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) lims field
bool return_getPidErrorLimits::nested_read_lims(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    lims.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(lims.data()), lims.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write (nested) lims field
bool return_getPidErrorLimits::nested_write_lims(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, lims.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(lims.data()), lims.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}
