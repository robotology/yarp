/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <yarp/conf/version.h>
#include <ControlBoardMsgs.h>
#include <yarp/os/LogComponent.h>
#include <yarp/os/LogStream.h>

#include <yarp/os/idl/WireTypes.h>

#include <algorithm>

namespace
{
    YARP_LOG_COMPONENT(SERVICE_LOG_COMPONENT, "ControlBoardMsgs")
}

//ControlBoardMsgs_getRemoteProtocolVersion_helper declaration
class ControlBoardMsgs_getRemoteProtocolVersion_helper :
public yarp::os::Portable
{
public:
    ControlBoardMsgs_getRemoteProtocolVersion_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    yarp::os::ApplicationNetworkProtocolVersion helper_proto;
};

bool ControlBoardMsgs_getRemoteProtocolVersion_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeString("getRemoteProtocolVersion")) {
        return false;
    }
    return true;
}

bool ControlBoardMsgs_getRemoteProtocolVersion_helper ::read(yarp::os::ConnectionReader & connection)
 {
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    if (!helper_proto.read(connection)) {
        reader.fail();
        return false;
    }
    return true;
}

//ProtocolVersion, client side
yarp::os::ApplicationNetworkProtocolVersion ControlBoardMsgs::getRemoteProtocolVersion()
 {
    if(!yarp().canWrite()) {
        yError(" Missing server method ControlBoardMsgs::getRemoteProtocolVersion");
    }
    ControlBoardMsgs_getRemoteProtocolVersion_helper helper{};
    bool ok = yarp().write(helper, helper);
    if (ok) {
        return helper.helper_proto;}
    else {
        yarp::os::ApplicationNetworkProtocolVersion failureproto;
        return failureproto;}
}

//ProtocolVersion, client side
bool ControlBoardMsgs::checkProtocolVersion()
 {
        auto locproto = this->getLocalProtocolVersion();
        auto remproto = this->getRemoteProtocolVersion();
        if (remproto.protocol_version != locproto.protocol_version)
        {
            yCError(SERVICE_LOG_COMPONENT) << "Invalid communication protocol.";
            yCError(SERVICE_LOG_COMPONENT) << "Local Protocol Version: " << locproto.toString();
            yCError(SERVICE_LOG_COMPONENT) << "Remote Protocol Version: " << remproto.toString();
            return false;
        }
        return true;
}

//ProtocolVersion, server side
yarp::os::ApplicationNetworkProtocolVersion ControlBoardMsgs::getLocalProtocolVersion()
{
    yarp::os::ApplicationNetworkProtocolVersion myproto;
    //myproto.protocol_version using default value = 0
    //to change this value add the following line to the .thrift file:
    //const i16 protocol_version = <your_number_here>
    myproto.protocol_version = 0;
    myproto.yarp_major = YARP_VERSION_MAJOR;
    myproto.yarp_minor = YARP_VERSION_MINOR;
    myproto.yarp_patch = YARP_VERSION_PATCH;
    return myproto;
}

// isJointBrakedRPC helper class declaration
class ControlBoardMsgs_isJointBrakedRPC_helper :
        public yarp::os::Portable
{
public:
    ControlBoardMsgs_isJointBrakedRPC_helper() = default;
    explicit ControlBoardMsgs_isJointBrakedRPC_helper(const std::int16_t j);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::int16_t j);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int16_t j{0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_isJointBraked return_helper{};
    };

    using funcptr_t = return_isJointBraked (*)(const std::int16_t);
    void call(ControlBoardMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"isJointBrakedRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"return_isJointBraked ControlBoardMsgs::isJointBrakedRPC(const std::int16_t j) const"};
    static constexpr const char* s_help{""};
};

// setManualBrakeActiveRPC helper class declaration
class ControlBoardMsgs_setManualBrakeActiveRPC_helper :
        public yarp::os::Portable
{
public:
    ControlBoardMsgs_setManualBrakeActiveRPC_helper() = default;
    ControlBoardMsgs_setManualBrakeActiveRPC_helper(const std::int16_t j, const bool active);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const std::int16_t j, const bool active);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int16_t j{0};
        bool active{false};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)(const std::int16_t, const bool);
    void call(ControlBoardMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setManualBrakeActiveRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue ControlBoardMsgs::setManualBrakeActiveRPC(const std::int16_t j, const bool active)"};
    static constexpr const char* s_help{""};
};

// setAutoBrakeEnabledRPC helper class declaration
class ControlBoardMsgs_setAutoBrakeEnabledRPC_helper :
        public yarp::os::Portable
{
public:
    ControlBoardMsgs_setAutoBrakeEnabledRPC_helper() = default;
    ControlBoardMsgs_setAutoBrakeEnabledRPC_helper(const std::int16_t j, const bool enabled);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const std::int16_t j, const bool enabled);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int16_t j{0};
        bool enabled{false};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)(const std::int16_t, const bool);
    void call(ControlBoardMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setAutoBrakeEnabledRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue ControlBoardMsgs::setAutoBrakeEnabledRPC(const std::int16_t j, const bool enabled)"};
    static constexpr const char* s_help{""};
};

// getAutoBrakeEnabledRPC helper class declaration
class ControlBoardMsgs_getAutoBrakeEnabledRPC_helper :
        public yarp::os::Portable
{
public:
    ControlBoardMsgs_getAutoBrakeEnabledRPC_helper() = default;
    explicit ControlBoardMsgs_getAutoBrakeEnabledRPC_helper(const std::int16_t j);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::int16_t j);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int16_t j{0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_getAutoBrakeEnabled return_helper{};
    };

    using funcptr_t = return_getAutoBrakeEnabled (*)(const std::int16_t);
    void call(ControlBoardMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getAutoBrakeEnabledRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"return_getAutoBrakeEnabled ControlBoardMsgs::getAutoBrakeEnabledRPC(const std::int16_t j) const"};
    static constexpr const char* s_help{""};
};

// isJointBrakedRPC helper class implementation
ControlBoardMsgs_isJointBrakedRPC_helper::ControlBoardMsgs_isJointBrakedRPC_helper(const std::int16_t j) :
        cmd{j}
{
}

bool ControlBoardMsgs_isJointBrakedRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ControlBoardMsgs_isJointBrakedRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

ControlBoardMsgs_isJointBrakedRPC_helper::Command::Command(const std::int16_t j) :
        j{j}
{
}

bool ControlBoardMsgs_isJointBrakedRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ControlBoardMsgs_isJointBrakedRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ControlBoardMsgs_isJointBrakedRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ControlBoardMsgs_isJointBrakedRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ControlBoardMsgs_isJointBrakedRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI16(j)) {
        return false;
    }
    return true;
}

bool ControlBoardMsgs_isJointBrakedRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ControlBoardMsgs_isJointBrakedRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ControlBoardMsgs_isJointBrakedRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI16(j)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ControlBoardMsgs_isJointBrakedRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ControlBoardMsgs_isJointBrakedRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ControlBoardMsgs_isJointBrakedRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ControlBoardMsgs_isJointBrakedRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ControlBoardMsgs_isJointBrakedRPC_helper::call(ControlBoardMsgs* ptr)
{
    reply.return_helper = ptr->isJointBrakedRPC(cmd.j);
}

// setManualBrakeActiveRPC helper class implementation
ControlBoardMsgs_setManualBrakeActiveRPC_helper::ControlBoardMsgs_setManualBrakeActiveRPC_helper(const std::int16_t j, const bool active) :
        cmd{j, active}
{
}

bool ControlBoardMsgs_setManualBrakeActiveRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ControlBoardMsgs_setManualBrakeActiveRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

ControlBoardMsgs_setManualBrakeActiveRPC_helper::Command::Command(const std::int16_t j, const bool active) :
        j{j},
        active{active}
{
}

bool ControlBoardMsgs_setManualBrakeActiveRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ControlBoardMsgs_setManualBrakeActiveRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ControlBoardMsgs_setManualBrakeActiveRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ControlBoardMsgs_setManualBrakeActiveRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ControlBoardMsgs_setManualBrakeActiveRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI16(j)) {
        return false;
    }
    if (!writer.writeBool(active)) {
        return false;
    }
    return true;
}

bool ControlBoardMsgs_setManualBrakeActiveRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ControlBoardMsgs_setManualBrakeActiveRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ControlBoardMsgs_setManualBrakeActiveRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI16(j)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(active)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ControlBoardMsgs_setManualBrakeActiveRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ControlBoardMsgs_setManualBrakeActiveRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ControlBoardMsgs_setManualBrakeActiveRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ControlBoardMsgs_setManualBrakeActiveRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ControlBoardMsgs_setManualBrakeActiveRPC_helper::call(ControlBoardMsgs* ptr)
{
    reply.return_helper = ptr->setManualBrakeActiveRPC(cmd.j, cmd.active);
}

// setAutoBrakeEnabledRPC helper class implementation
ControlBoardMsgs_setAutoBrakeEnabledRPC_helper::ControlBoardMsgs_setAutoBrakeEnabledRPC_helper(const std::int16_t j, const bool enabled) :
        cmd{j, enabled}
{
}

bool ControlBoardMsgs_setAutoBrakeEnabledRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ControlBoardMsgs_setAutoBrakeEnabledRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

ControlBoardMsgs_setAutoBrakeEnabledRPC_helper::Command::Command(const std::int16_t j, const bool enabled) :
        j{j},
        enabled{enabled}
{
}

bool ControlBoardMsgs_setAutoBrakeEnabledRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ControlBoardMsgs_setAutoBrakeEnabledRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ControlBoardMsgs_setAutoBrakeEnabledRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ControlBoardMsgs_setAutoBrakeEnabledRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ControlBoardMsgs_setAutoBrakeEnabledRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI16(j)) {
        return false;
    }
    if (!writer.writeBool(enabled)) {
        return false;
    }
    return true;
}

bool ControlBoardMsgs_setAutoBrakeEnabledRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ControlBoardMsgs_setAutoBrakeEnabledRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ControlBoardMsgs_setAutoBrakeEnabledRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI16(j)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(enabled)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ControlBoardMsgs_setAutoBrakeEnabledRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ControlBoardMsgs_setAutoBrakeEnabledRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ControlBoardMsgs_setAutoBrakeEnabledRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ControlBoardMsgs_setAutoBrakeEnabledRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ControlBoardMsgs_setAutoBrakeEnabledRPC_helper::call(ControlBoardMsgs* ptr)
{
    reply.return_helper = ptr->setAutoBrakeEnabledRPC(cmd.j, cmd.enabled);
}

// getAutoBrakeEnabledRPC helper class implementation
ControlBoardMsgs_getAutoBrakeEnabledRPC_helper::ControlBoardMsgs_getAutoBrakeEnabledRPC_helper(const std::int16_t j) :
        cmd{j}
{
}

bool ControlBoardMsgs_getAutoBrakeEnabledRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ControlBoardMsgs_getAutoBrakeEnabledRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

ControlBoardMsgs_getAutoBrakeEnabledRPC_helper::Command::Command(const std::int16_t j) :
        j{j}
{
}

bool ControlBoardMsgs_getAutoBrakeEnabledRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ControlBoardMsgs_getAutoBrakeEnabledRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ControlBoardMsgs_getAutoBrakeEnabledRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ControlBoardMsgs_getAutoBrakeEnabledRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ControlBoardMsgs_getAutoBrakeEnabledRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI16(j)) {
        return false;
    }
    return true;
}

bool ControlBoardMsgs_getAutoBrakeEnabledRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ControlBoardMsgs_getAutoBrakeEnabledRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ControlBoardMsgs_getAutoBrakeEnabledRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI16(j)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ControlBoardMsgs_getAutoBrakeEnabledRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ControlBoardMsgs_getAutoBrakeEnabledRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ControlBoardMsgs_getAutoBrakeEnabledRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ControlBoardMsgs_getAutoBrakeEnabledRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ControlBoardMsgs_getAutoBrakeEnabledRPC_helper::call(ControlBoardMsgs* ptr)
{
    reply.return_helper = ptr->getAutoBrakeEnabledRPC(cmd.j);
}

// Constructor
ControlBoardMsgs::ControlBoardMsgs()
{
    yarp().setOwner(*this);
}

return_isJointBraked ControlBoardMsgs::isJointBrakedRPC(const std::int16_t j) const
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ControlBoardMsgs_isJointBrakedRPC_helper::s_prototype);
    }
    ControlBoardMsgs_isJointBrakedRPC_helper helper{j};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_isJointBraked{};
}

yarp::dev::ReturnValue ControlBoardMsgs::setManualBrakeActiveRPC(const std::int16_t j, const bool active)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ControlBoardMsgs_setManualBrakeActiveRPC_helper::s_prototype);
    }
    ControlBoardMsgs_setManualBrakeActiveRPC_helper helper{j, active};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

yarp::dev::ReturnValue ControlBoardMsgs::setAutoBrakeEnabledRPC(const std::int16_t j, const bool enabled)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ControlBoardMsgs_setAutoBrakeEnabledRPC_helper::s_prototype);
    }
    ControlBoardMsgs_setAutoBrakeEnabledRPC_helper helper{j, enabled};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

return_getAutoBrakeEnabled ControlBoardMsgs::getAutoBrakeEnabledRPC(const std::int16_t j) const
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ControlBoardMsgs_getAutoBrakeEnabledRPC_helper::s_prototype);
    }
    ControlBoardMsgs_getAutoBrakeEnabledRPC_helper helper{j};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_getAutoBrakeEnabled{};
}

// help method
std::vector<std::string> ControlBoardMsgs::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back(ControlBoardMsgs_isJointBrakedRPC_helper::s_tag);
        helpString.emplace_back(ControlBoardMsgs_setManualBrakeActiveRPC_helper::s_tag);
        helpString.emplace_back(ControlBoardMsgs_setAutoBrakeEnabledRPC_helper::s_tag);
        helpString.emplace_back(ControlBoardMsgs_getAutoBrakeEnabledRPC_helper::s_tag);
        helpString.emplace_back("help");
    } else {
        if (functionName == ControlBoardMsgs_isJointBrakedRPC_helper::s_tag) {
            helpString.emplace_back(ControlBoardMsgs_isJointBrakedRPC_helper::s_prototype);
        }
        if (functionName == ControlBoardMsgs_setManualBrakeActiveRPC_helper::s_tag) {
            helpString.emplace_back(ControlBoardMsgs_setManualBrakeActiveRPC_helper::s_prototype);
        }
        if (functionName == ControlBoardMsgs_setAutoBrakeEnabledRPC_helper::s_tag) {
            helpString.emplace_back(ControlBoardMsgs_setAutoBrakeEnabledRPC_helper::s_prototype);
        }
        if (functionName == ControlBoardMsgs_getAutoBrakeEnabledRPC_helper::s_tag) {
            helpString.emplace_back(ControlBoardMsgs_getAutoBrakeEnabledRPC_helper::s_prototype);
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool ControlBoardMsgs::read(yarp::os::ConnectionReader& connection)
{
    constexpr size_t max_tag_len = 1;
    size_t tag_len = 1;

    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag(1);
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag(1);
    }
    while (tag_len <= max_tag_len && !reader.isError()) {
        if(tag == "getRemoteProtocolVersion") {
            if (!reader.noMore()) {
                yError("Reader invalid protocol?! %s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                reader.fail();
                return false;
            }

            auto proto = getLocalProtocolVersion();

            yarp::os::idl::WireWriter writer(reader);
           if (!writer.writeListHeader(1)) {
                yWarning("Writer invalid protocol?! %s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
               return false;}
            if (!writer.write(proto)) {
                yWarning("Writer invalid protocol?! %s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ControlBoardMsgs_isJointBrakedRPC_helper::s_tag) {
            ControlBoardMsgs_isJointBrakedRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ControlBoardMsgs_setManualBrakeActiveRPC_helper::s_tag) {
            ControlBoardMsgs_setManualBrakeActiveRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ControlBoardMsgs_setAutoBrakeEnabledRPC_helper::s_tag) {
            ControlBoardMsgs_setAutoBrakeEnabledRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ControlBoardMsgs_getAutoBrakeEnabledRPC_helper::s_tag) {
            ControlBoardMsgs_getAutoBrakeEnabledRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(0, help_strings.size())) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag(1);
        if (next_tag.empty()) {
            break;
        }
        tag.append("_").append(next_tag);
        tag_len = std::count(tag.begin(), tag.end(), '_') + 1;
    }
    return false;
}
