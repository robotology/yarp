/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Mon Apr  8 10:24:20 2024


#ifndef JOYPADCONTROLSERVER_PARAMSPARSER_H
#define JOYPADCONTROLSERVER_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class JoypadControlServer.
*
* These are the used parameters:
* | Group name | Parameter name     | Type   | Units | Default Value     | Required | Description                                                                                                | Notes |
* |:----------:|:------------------:|:------:|:-----:|:-----------------:|:--------:|:----------------------------------------------------------------------------------------------------------:|:-----:|
* | -          | period             | double | s     | 0.01              | 0        | Refresh period (in s) of the broadcasted values through yarp ports                                         | -     |
* | -          | name               | string | -     | /robotName/joypad | 1        | Prefix name of the ports opened by the JoypadControlServer                                                 | -     |
* | -          | use_separate_ports | bool   | -     | true              | 0        | set it to 1 to use separate ports (buttons, axes, trackballs, hats) and 0 to stream all in one single port | -     |
* | -          | profile            | bool   | -     | false             | 0        | print the joypad data for debugging purpose                                                                | -     |
* | -          | use_single_thread  | bool   | -     | false             | 0        | If true, the device is updated when calling updateService rather than using a separate thread.             | -     |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device JoypadControlServer --period 0.01 --name /robotName/joypad --use_separate_ports true --profile false --use_single_thread false
* \endcode
*
* \code{.unparsed}
* yarpdev --device JoypadControlServer --name /robotName/joypad
* \endcode
*
*/

class JoypadControlServer_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    JoypadControlServer_ParamsParser();
    ~JoypadControlServer_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"JoypadControlServer"};
    const std::string m_device_name = {"JoypadControlServer"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_period_defaultValue = {"0.01"};
    const std::string m_name_defaultValue = {"/robotName/joypad"};
    const std::string m_use_separate_ports_defaultValue = {"true"};
    const std::string m_profile_defaultValue = {"false"};
    const std::string m_use_single_thread_defaultValue = {"false"};

    double m_period = {0.01};
    std::string m_name = {"/robotName/joypad"};
    bool m_use_separate_ports = {true};
    bool m_profile = {false};
    bool m_use_single_thread = {false};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
