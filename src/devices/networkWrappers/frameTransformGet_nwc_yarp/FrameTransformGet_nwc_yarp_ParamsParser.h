/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (2.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Mon May 26 10:28:39 2025


#ifndef FRAMETRANSFORMGET_NWC_YARP_PARAMSPARSER_H
#define FRAMETRANSFORMGET_NWC_YARP_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class FrameTransformGet_nwc_yarp.
*
* These are the used parameters:
* | Group name | Parameter name               | Type   | Units | Default Value | Required | Description                                                                                                                                                                          | Notes |
* |:----------:|:----------------------------:|:------:|:-----:|:-------------:|:--------:|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|:-----:|
* | -          | streaming_enabled            | bool   | -     | true          | 0        | tells whether or not the nwc is instantiated by the frameTransformClient device. If true, \"/frameTransformClient\" will appended to the port name prefix                            | -     |
* | -          | output_streaming_port_prefix | bool   | -     | true          | 0        | tells whether or not the nws is instantiated by the frameTransformServer device. If true, \"/frameTransformServer/frameTransformGet_nws_yarp\" will appended to the port name prefix | -     |
* | -          | input_streaming_port_prefix  | string | -     | -             | 0        | a prefix for the nwc thrift rpc port name                                                                                                                                            | -     |
* | -          | nws_thrift_port_prefix       | string | -     | -             | 0        | a prefix for the nws thrift rpc port name                                                                                                                                            | -     |
* | -          | nwc_thrift_port_prefix       | string | -     | -             | 0        | a prefix for the input streaming port name (if the port is enabled)                                                                                                                  | -     |
* | -          | default_server               | string | -     | -             | 0        | a prefix for the output streaming port name (if the port is enabled)                                                                                                                 | -     |
* | -          | default_client               | bool   | -     | false         | 0        | if enabled, tfs are received from the streaming port instead of using RPCs                                                                                                           | -     |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device frameTransformGet_nwc_yarp --streaming_enabled true --output_streaming_port_prefix true --input_streaming_port_prefix <optional_value> --nws_thrift_port_prefix <optional_value> --nwc_thrift_port_prefix <optional_value> --default_server <optional_value> --default_client false
* \endcode
*
* \code{.unparsed}
* yarpdev --device frameTransformGet_nwc_yarp
* \endcode
*
*/

class FrameTransformGet_nwc_yarp_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    FrameTransformGet_nwc_yarp_ParamsParser();
    ~FrameTransformGet_nwc_yarp_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"FrameTransformGet_nwc_yarp"};
    const std::string m_device_name = {"frameTransformGet_nwc_yarp"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 2;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    std::string m_provided_configuration;

    const std::string m_streaming_enabled_defaultValue = {"true"};
    const std::string m_output_streaming_port_prefix_defaultValue = {"true"};
    const std::string m_input_streaming_port_prefix_defaultValue = {""};
    const std::string m_nws_thrift_port_prefix_defaultValue = {""};
    const std::string m_nwc_thrift_port_prefix_defaultValue = {""};
    const std::string m_default_server_defaultValue = {""};
    const std::string m_default_client_defaultValue = {"false"};

    bool m_streaming_enabled = {true};
    bool m_output_streaming_port_prefix = {true};
    std::string m_input_streaming_port_prefix = {}; //This default value of this string is an empty string. It is highly recommended to provide a suggested value also for optional string parameters.
    std::string m_nws_thrift_port_prefix = {}; //This default value of this string is an empty string. It is highly recommended to provide a suggested value also for optional string parameters.
    std::string m_nwc_thrift_port_prefix = {}; //This default value of this string is an empty string. It is highly recommended to provide a suggested value also for optional string parameters.
    std::string m_default_server = {}; //This default value of this string is an empty string. It is highly recommended to provide a suggested value also for optional string parameters.
    bool m_default_client = {false};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
    bool getParamValue(const std::string& paramName, std::string& paramValue) const override;
    std::string   getConfiguration() const override;
};

#endif
