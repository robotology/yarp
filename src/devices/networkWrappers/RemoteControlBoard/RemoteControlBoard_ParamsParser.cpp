/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (2.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Thu Jul 24 17:45:33 2025


#include "RemoteControlBoard_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(RemoteControlBoardParamsCOMPONENT, "yarp.device.RemoteControlBoard")
}


RemoteControlBoard_ParamsParser::RemoteControlBoard_ParamsParser()
{
}


std::vector<std::string> RemoteControlBoard_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("remote");
    params.push_back("local");
    params.push_back("writeStrict");
    params.push_back("carrier");
    params.push_back("carrier_cmd");
    params.push_back("timeout");
    params.push_back("local_qos::enable");
    params.push_back("local_qos::thread_priority");
    params.push_back("local_qos::thread_policy");
    params.push_back("local_qos::packet_priority");
    params.push_back("remote_qos::enable");
    params.push_back("remote_qos::thread_priority");
    params.push_back("remote_qos::thread_policy");
    params.push_back("remote_qos::packet_priority");
    params.push_back("diagnostic");
    return params;
}


bool RemoteControlBoard_ParamsParser::getParamValue(const std::string& paramName, std::string& paramValue) const
{
    if (paramName =="remote")
    {
        paramValue = m_remote;
        return true;
    }
    if (paramName =="local")
    {
        paramValue = m_local;
        return true;
    }
    if (paramName =="writeStrict")
    {
        paramValue = m_writeStrict;
        return true;
    }
    if (paramName =="carrier")
    {
        paramValue = m_carrier;
        return true;
    }
    if (paramName =="carrier_cmd")
    {
        paramValue = m_carrier_cmd;
        return true;
    }
    if (paramName =="timeout")
    {
        paramValue = std::to_string(m_timeout);
        return true;
    }
    if (paramName =="local_qos::enable")
    {
        if (m_local_qos_enable==true) paramValue = "true";
        else paramValue = "false";
        return true;
    }
    if (paramName =="local_qos::thread_priority")
    {
        paramValue = std::to_string(m_local_qos_thread_priority);
        return true;
    }
    if (paramName =="local_qos::thread_policy")
    {
        paramValue = std::to_string(m_local_qos_thread_policy);
        return true;
    }
    if (paramName =="local_qos::packet_priority")
    {
        paramValue = m_local_qos_packet_priority;
        return true;
    }
    if (paramName =="remote_qos::enable")
    {
        if (m_remote_qos_enable==true) paramValue = "true";
        else paramValue = "false";
        return true;
    }
    if (paramName =="remote_qos::thread_priority")
    {
        paramValue = std::to_string(m_remote_qos_thread_priority);
        return true;
    }
    if (paramName =="remote_qos::thread_policy")
    {
        paramValue = std::to_string(m_remote_qos_thread_policy);
        return true;
    }
    if (paramName =="remote_qos::packet_priority")
    {
        paramValue = m_remote_qos_packet_priority;
        return true;
    }
    if (paramName =="diagnostic")
    {
        if (m_diagnostic==true) paramValue = "true";
        else paramValue = "false";
        return true;
    }

    yError() <<"parameter '" << paramName << "' was not found";
    return false;

}


std::string RemoteControlBoard_ParamsParser::getConfiguration() const
{
    //This is a sub-optimal solution.
    //Ideally getConfiguration() should return all parameters but it is currently
    //returning only user provided parameters (excluding default values)
    //This behaviour will be fixed in the near future.
    std::string s_cfg = m_provided_configuration;
    return s_cfg;
}

bool      RemoteControlBoard_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(RemoteControlBoardParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    m_provided_configuration = config.toString();
    yarp::os::Property prop_check(m_provided_configuration.c_str());
    //Parser of parameter remote
    {
        if (config.check("remote"))
        {
            m_remote = config.find("remote").asString();
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'remote' using value:" << m_remote;
        }
        else
        {
            yCError(RemoteControlBoardParamsCOMPONENT) << "Mandatory parameter 'remote' not found!";
            yCError(RemoteControlBoardParamsCOMPONENT) << "Description of the parameter: Prefix of the port to which to connect.";
            return false;
        }
        prop_check.unput("remote");
    }

    //Parser of parameter local
    {
        if (config.check("local"))
        {
            m_local = config.find("local").asString();
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'local' using value:" << m_local;
        }
        else
        {
            yCError(RemoteControlBoardParamsCOMPONENT) << "Mandatory parameter 'local' not found!";
            yCError(RemoteControlBoardParamsCOMPONENT) << "Description of the parameter: Port prefix of the port opened by this device.";
            return false;
        }
        prop_check.unput("local");
    }

    //Parser of parameter writeStrict
    {
        if (config.check("writeStrict"))
        {
            m_writeStrict = config.find("writeStrict").asString();
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'writeStrict' using value:" << m_writeStrict;
        }
        else
        {
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'writeStrict' using DEFAULT value:" << m_writeStrict;
        }
        prop_check.unput("writeStrict");
    }

    //Parser of parameter carrier
    {
        if (config.check("carrier"))
        {
            m_carrier = config.find("carrier").asString();
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'carrier' using value:" << m_carrier;
        }
        else
        {
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'carrier' using DEFAULT value:" << m_carrier;
        }
        prop_check.unput("carrier");
    }

    //Parser of parameter carrier_cmd
    {
        if (config.check("carrier_cmd"))
        {
            m_carrier_cmd = config.find("carrier_cmd").asString();
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'carrier_cmd' using value:" << m_carrier_cmd;
        }
        else
        {
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'carrier_cmd' using DEFAULT value:" << m_carrier_cmd;
        }
        prop_check.unput("carrier_cmd");
    }

    //Parser of parameter timeout
    {
        if (config.check("timeout"))
        {
            m_timeout = config.find("timeout").asFloat32();
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'timeout' using value:" << m_timeout;
        }
        else
        {
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'timeout' using DEFAULT value:" << m_timeout;
        }
        prop_check.unput("timeout");
    }

    //Parser of parameter local_qos::enable
    {
        yarp::os::Bottle sectionp;
        sectionp = config.findGroup("local_qos");
        if (sectionp.check("enable"))
        {
            m_local_qos_enable = sectionp.find("enable").asBool();
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'local_qos::enable' using value:" << m_local_qos_enable;
        }
        else
        {
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'local_qos::enable' using DEFAULT value:" << m_local_qos_enable;
        }
        prop_check.unput("local_qos::enable");
    }

    //Parser of parameter local_qos::thread_priority
    {
        yarp::os::Bottle sectionp;
        sectionp = config.findGroup("local_qos");
        if (sectionp.check("thread_priority"))
        {
            m_local_qos_thread_priority = sectionp.find("thread_priority").asInt64();
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'local_qos::thread_priority' using value:" << m_local_qos_thread_priority;
        }
        else
        {
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'local_qos::thread_priority' using DEFAULT value:" << m_local_qos_thread_priority;
        }
        prop_check.unput("local_qos::thread_priority");
    }

    //Parser of parameter local_qos::thread_policy
    {
        yarp::os::Bottle sectionp;
        sectionp = config.findGroup("local_qos");
        if (sectionp.check("thread_policy"))
        {
            m_local_qos_thread_policy = sectionp.find("thread_policy").asInt64();
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'local_qos::thread_policy' using value:" << m_local_qos_thread_policy;
        }
        else
        {
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'local_qos::thread_policy' using DEFAULT value:" << m_local_qos_thread_policy;
        }
        prop_check.unput("local_qos::thread_policy");
    }

    //Parser of parameter local_qos::packet_priority
    {
        yarp::os::Bottle sectionp;
        sectionp = config.findGroup("local_qos");
        if (sectionp.check("packet_priority"))
        {
            m_local_qos_packet_priority = sectionp.find("packet_priority").asString();
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'local_qos::packet_priority' using value:" << m_local_qos_packet_priority;
        }
        else
        {
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'local_qos::packet_priority' using DEFAULT value:" << m_local_qos_packet_priority;
        }
        prop_check.unput("local_qos::packet_priority");
    }

    //Parser of parameter remote_qos::enable
    {
        yarp::os::Bottle sectionp;
        sectionp = config.findGroup("remote_qos");
        if (sectionp.check("enable"))
        {
            m_remote_qos_enable = sectionp.find("enable").asBool();
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'remote_qos::enable' using value:" << m_remote_qos_enable;
        }
        else
        {
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'remote_qos::enable' using DEFAULT value:" << m_remote_qos_enable;
        }
        prop_check.unput("remote_qos::enable");
    }

    //Parser of parameter remote_qos::thread_priority
    {
        yarp::os::Bottle sectionp;
        sectionp = config.findGroup("remote_qos");
        if (sectionp.check("thread_priority"))
        {
            m_remote_qos_thread_priority = sectionp.find("thread_priority").asInt64();
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'remote_qos::thread_priority' using value:" << m_remote_qos_thread_priority;
        }
        else
        {
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'remote_qos::thread_priority' using DEFAULT value:" << m_remote_qos_thread_priority;
        }
        prop_check.unput("remote_qos::thread_priority");
    }

    //Parser of parameter remote_qos::thread_policy
    {
        yarp::os::Bottle sectionp;
        sectionp = config.findGroup("remote_qos");
        if (sectionp.check("thread_policy"))
        {
            m_remote_qos_thread_policy = sectionp.find("thread_policy").asInt64();
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'remote_qos::thread_policy' using value:" << m_remote_qos_thread_policy;
        }
        else
        {
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'remote_qos::thread_policy' using DEFAULT value:" << m_remote_qos_thread_policy;
        }
        prop_check.unput("remote_qos::thread_policy");
    }

    //Parser of parameter remote_qos::packet_priority
    {
        yarp::os::Bottle sectionp;
        sectionp = config.findGroup("remote_qos");
        if (sectionp.check("packet_priority"))
        {
            m_remote_qos_packet_priority = sectionp.find("packet_priority").asString();
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'remote_qos::packet_priority' using value:" << m_remote_qos_packet_priority;
        }
        else
        {
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'remote_qos::packet_priority' using DEFAULT value:" << m_remote_qos_packet_priority;
        }
        prop_check.unput("remote_qos::packet_priority");
    }

    //Parser of parameter diagnostic
    {
        if (config.check("diagnostic"))
        {
            m_diagnostic = config.find("diagnostic").asBool();
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'diagnostic' using value:" << m_diagnostic;
        }
        else
        {
            yCInfo(RemoteControlBoardParamsCOMPONENT) << "Parameter 'diagnostic' using DEFAULT value:" << m_diagnostic;
        }
        prop_check.unput("diagnostic");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(RemoteControlBoardParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(RemoteControlBoardParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      RemoteControlBoard_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: RemoteControlBoard\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'remote': Prefix of the port to which to connect.\n");
    doc = doc + std::string("'local': Port prefix of the port opened by this device.\n");
    doc = doc + std::string("'writeStrict': It can be 'on' or 'off'\n");
    doc = doc + std::string("'carrier': carrier used for receiving streamed robot state\n");
    doc = doc + std::string("'carrier_cmd': carrier used for sending streamed commands\n");
    doc = doc + std::string("'timeout': timeout for the input port which receives the streamed robot state\n");
    doc = doc + std::string("'local_qos::enable': Enable the usage of local Qos\n");
    doc = doc + std::string("'local_qos::thread_priority': Local Qos. See https://yarp.it/latest/channelprioritization.html\n");
    doc = doc + std::string("'local_qos::thread_policy': Local Qos. See https://yarp.it/latest/channelprioritization.html\n");
    doc = doc + std::string("'local_qos::packet_priority': Local Qos. See https://yarp.it/latest/channelprioritization.html\n");
    doc = doc + std::string("'remote_qos::enable': Enable the usage of remote Qos\n");
    doc = doc + std::string("'remote_qos::thread_priority': Remote Qos. See https://yarp.it/latest/channelprioritization.html\n");
    doc = doc + std::string("'remote_qos::thread_policy': Remote Qos. See https://yarp.it/latest/channelprioritization.html.\n");
    doc = doc + std::string("'remote_qos::packet_priority': Remote Qos. See https://yarp.it/latest/channelprioritization.html.\n");
    doc = doc + std::string("'diagnostic': For development purpose only\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device remote_controlboard --remote <mandatory_value> --local <mandatory_value> --writeStrict <optional_value> --carrier fast_tcp --carrier_cmd fast_tcp --timeout 0.5 --local_qos::enable false --local_qos::thread_priority 0 --local_qos::thread_policy 0 --local_qos::packet_priority <optional_value> --remote_qos::enable false --remote_qos::thread_priority 0 --remote_qos::thread_policy 0 --remote_qos::packet_priority <optional_value> --diagnostic false\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device remote_controlboard --remote <mandatory_value> --local <mandatory_value>\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
