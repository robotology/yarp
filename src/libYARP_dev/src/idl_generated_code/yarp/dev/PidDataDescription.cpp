/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <yarp/dev/PidDataDescription.h>

namespace yarp::dev {

// Constructor with field values
PidDataDescription::PidDataDescription(const std::string& pid_description,
                                       const std::string& input_data_description,
                                       const std::string& output_data_description) :
        WirePortable(),
        pid_description(pid_description),
        input_data_description(input_data_description),
        output_data_description(output_data_description)
{
}

// Read structure on a Wire
bool PidDataDescription::read(yarp::os::idl::WireReader& reader)
{
    if (!read_pid_description(reader)) {
        return false;
    }
    if (!read_input_data_description(reader)) {
        return false;
    }
    if (!read_output_data_description(reader)) {
        return false;
    }
    if (reader.isError()) {
        return false;
    }
    return true;
}

// Read structure on a Connection
bool PidDataDescription::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(3)) {
        return false;
    }
    if (!read(reader)) {
        return false;
    }
    return true;
}

// Write structure on a Wire
bool PidDataDescription::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_pid_description(writer)) {
        return false;
    }
    if (!write_input_data_description(writer)) {
        return false;
    }
    if (!write_output_data_description(writer)) {
        return false;
    }
    if (writer.isError()) {
        return false;
    }
    return true;
}

// Write structure on a Connection
bool PidDataDescription::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!write(writer)) {
        return false;
    }
    return true;
}

// Convert to a printable string
std::string PidDataDescription::toString() const
{
    yarp::os::Bottle b;
    if (!yarp::os::Portable::copyPortable(*this, b)) {
        return {};
    }
    return b.toString();
}

// read pid_description field
bool PidDataDescription::read_pid_description(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(pid_description)) {
        reader.fail();
        return false;
    }
    return true;
}

// write pid_description field
bool PidDataDescription::write_pid_description(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(pid_description)) {
        return false;
    }
    return true;
}

// read (nested) pid_description field
bool PidDataDescription::nested_read_pid_description(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(pid_description)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) pid_description field
bool PidDataDescription::nested_write_pid_description(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(pid_description)) {
        return false;
    }
    return true;
}

// read input_data_description field
bool PidDataDescription::read_input_data_description(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(input_data_description)) {
        reader.fail();
        return false;
    }
    return true;
}

// write input_data_description field
bool PidDataDescription::write_input_data_description(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(input_data_description)) {
        return false;
    }
    return true;
}

// read (nested) input_data_description field
bool PidDataDescription::nested_read_input_data_description(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(input_data_description)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) input_data_description field
bool PidDataDescription::nested_write_input_data_description(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(input_data_description)) {
        return false;
    }
    return true;
}

// read output_data_description field
bool PidDataDescription::read_output_data_description(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(output_data_description)) {
        reader.fail();
        return false;
    }
    return true;
}

// write output_data_description field
bool PidDataDescription::write_output_data_description(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(output_data_description)) {
        return false;
    }
    return true;
}

// read (nested) output_data_description field
bool PidDataDescription::nested_read_output_data_description(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(output_data_description)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) output_data_description field
bool PidDataDescription::nested_write_output_data_description(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(output_data_description)) {
        return false;
    }
    return true;
}

} // namespace yarp::dev
