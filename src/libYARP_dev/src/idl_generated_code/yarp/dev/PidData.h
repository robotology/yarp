/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#ifndef YARP_THRIFT_GENERATOR_STRUCT_PIDDATA_H
#define YARP_THRIFT_GENERATOR_STRUCT_PIDDATA_H

#include <yarp/dev/api.h>

#include <yarp/os/Wire.h>
#include <yarp/os/idl/WireTypes.h>

namespace yarp::dev {

class YARP_dev_API PidData :
        public yarp::os::idl::WirePortable
{
public:
    // Fields
    /**
     * proportional gain
     */
    double kp{0.0};
    /**
     * derivative gain
     */
    double kd{0.0};
    /**
     * integrative gain
     */
    double ki{0.0};
    /**
     * saturation threshold for the integrator
     */
    double max_int{0.0};
    /**
     * scale for the pid output
     */
    double scale{0.0};
    /**
     * max output
     */
    double max_output{0.0};
    /**
     * pwm offset added to the pid output
     */
    double offset{0.0};
    /**
     * up stiction offset added to the pid output
     */
    double stiction_up_val{0.0};
    /**
     * down stiction offset added to the pid output
     */
    double stiction_down_val{0.0};
    /**
     * feedforward gain
     */
    double kff{0.0};
    /**
     * name/description of the pid
     */
    std::string name{};

    // Default constructor
    PidData() = default;

    // Constructor with field values
    PidData(const double kp,
            const double kd,
            const double ki,
            const double max_int,
            const double scale,
            const double max_output,
            const double offset,
            const double stiction_up_val,
            const double stiction_down_val,
            const double kff,
            const std::string& name);

    // Read structure on a Wire
    bool read(yarp::os::idl::WireReader& reader) override;

    // Read structure on a Connection
    bool read(yarp::os::ConnectionReader& connection) override;

    // Write structure on a Wire
    bool write(const yarp::os::idl::WireWriter& writer) const override;

    // Write structure on a Connection
    bool write(yarp::os::ConnectionWriter& connection) const override;

    // Convert to a printable string
    std::string toString() const;

    // If you want to serialize this class without nesting, use this helper
    typedef yarp::os::idl::Unwrapped<PidData> unwrapped;

private:
    // read/write kp field
    bool read_kp(yarp::os::idl::WireReader& reader);
    bool write_kp(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_kp(yarp::os::idl::WireReader& reader);
    bool nested_write_kp(const yarp::os::idl::WireWriter& writer) const;

    // read/write kd field
    bool read_kd(yarp::os::idl::WireReader& reader);
    bool write_kd(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_kd(yarp::os::idl::WireReader& reader);
    bool nested_write_kd(const yarp::os::idl::WireWriter& writer) const;

    // read/write ki field
    bool read_ki(yarp::os::idl::WireReader& reader);
    bool write_ki(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_ki(yarp::os::idl::WireReader& reader);
    bool nested_write_ki(const yarp::os::idl::WireWriter& writer) const;

    // read/write max_int field
    bool read_max_int(yarp::os::idl::WireReader& reader);
    bool write_max_int(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_max_int(yarp::os::idl::WireReader& reader);
    bool nested_write_max_int(const yarp::os::idl::WireWriter& writer) const;

    // read/write scale field
    bool read_scale(yarp::os::idl::WireReader& reader);
    bool write_scale(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_scale(yarp::os::idl::WireReader& reader);
    bool nested_write_scale(const yarp::os::idl::WireWriter& writer) const;

    // read/write max_output field
    bool read_max_output(yarp::os::idl::WireReader& reader);
    bool write_max_output(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_max_output(yarp::os::idl::WireReader& reader);
    bool nested_write_max_output(const yarp::os::idl::WireWriter& writer) const;

    // read/write offset field
    bool read_offset(yarp::os::idl::WireReader& reader);
    bool write_offset(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_offset(yarp::os::idl::WireReader& reader);
    bool nested_write_offset(const yarp::os::idl::WireWriter& writer) const;

    // read/write stiction_up_val field
    bool read_stiction_up_val(yarp::os::idl::WireReader& reader);
    bool write_stiction_up_val(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_stiction_up_val(yarp::os::idl::WireReader& reader);
    bool nested_write_stiction_up_val(const yarp::os::idl::WireWriter& writer) const;

    // read/write stiction_down_val field
    bool read_stiction_down_val(yarp::os::idl::WireReader& reader);
    bool write_stiction_down_val(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_stiction_down_val(yarp::os::idl::WireReader& reader);
    bool nested_write_stiction_down_val(const yarp::os::idl::WireWriter& writer) const;

    // read/write kff field
    bool read_kff(yarp::os::idl::WireReader& reader);
    bool write_kff(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_kff(yarp::os::idl::WireReader& reader);
    bool nested_write_kff(const yarp::os::idl::WireWriter& writer) const;

    // read/write name field
    bool read_name(yarp::os::idl::WireReader& reader);
    bool write_name(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_name(yarp::os::idl::WireReader& reader);
    bool nested_write_name(const yarp::os::idl::WireWriter& writer) const;
};

} // namespace yarp::dev

#endif // YARP_THRIFT_GENERATOR_STRUCT_PIDDATA_H
