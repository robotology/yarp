/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <yarp/dev/PidDataExtraInfo.h>

namespace yarp::dev {

// Constructor with field values
PidDataExtraInfo::PidDataExtraInfo(const PidDataDescription& description,
                                   const PidDataUnits& units) :
        WirePortable(),
        description(description),
        units(units)
{
}

// Read structure on a Wire
bool PidDataExtraInfo::read(yarp::os::idl::WireReader& reader)
{
    if (!read_description(reader)) {
        return false;
    }
    if (!read_units(reader)) {
        return false;
    }
    if (reader.isError()) {
        return false;
    }
    return true;
}

// Read structure on a Connection
bool PidDataExtraInfo::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(13)) {
        return false;
    }
    if (!read(reader)) {
        return false;
    }
    return true;
}

// Write structure on a Wire
bool PidDataExtraInfo::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_description(writer)) {
        return false;
    }
    if (!write_units(writer)) {
        return false;
    }
    if (writer.isError()) {
        return false;
    }
    return true;
}

// Write structure on a Connection
bool PidDataExtraInfo::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(13)) {
        return false;
    }
    if (!write(writer)) {
        return false;
    }
    return true;
}

// Convert to a printable string
std::string PidDataExtraInfo::toString() const
{
    yarp::os::Bottle b;
    if (!yarp::os::Portable::copyPortable(*this, b)) {
        return {};
    }
    return b.toString();
}

// read description field
bool PidDataExtraInfo::read_description(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(description)) {
        reader.fail();
        return false;
    }
    return true;
}

// write description field
bool PidDataExtraInfo::write_description(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(description)) {
        return false;
    }
    return true;
}

// read (nested) description field
bool PidDataExtraInfo::nested_read_description(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(description)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) description field
bool PidDataExtraInfo::nested_write_description(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(description)) {
        return false;
    }
    return true;
}

// read units field
bool PidDataExtraInfo::read_units(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(units)) {
        reader.fail();
        return false;
    }
    return true;
}

// write units field
bool PidDataExtraInfo::write_units(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(units)) {
        return false;
    }
    return true;
}

// read (nested) units field
bool PidDataExtraInfo::nested_read_units(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(units)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) units field
bool PidDataExtraInfo::nested_write_units(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(units)) {
        return false;
    }
    return true;
}

} // namespace yarp::dev
