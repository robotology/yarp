/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <yarp/dev/SensorMeasurement.h>

namespace yarp::dev {

// Constructor with field values
SensorMeasurement::SensorMeasurement(const yarp::sig::Vector& measurement,
                                     const double timestamp) :
        WirePortable(),
        measurement(measurement),
        timestamp(timestamp)
{
}

// Read structure on a Wire
bool SensorMeasurement::read(yarp::os::idl::WireReader& reader)
{
    if (!nested_read_measurement(reader)) {
        return false;
    }
    if (!read_timestamp(reader)) {
        return false;
    }
    if (reader.isError()) {
        return false;
    }
    return true;
}

// Read structure on a Connection
bool SensorMeasurement::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(2)) {
        return false;
    }
    if (!read(reader)) {
        return false;
    }
    return true;
}

// Write structure on a Wire
bool SensorMeasurement::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!nested_write_measurement(writer)) {
        return false;
    }
    if (!write_timestamp(writer)) {
        return false;
    }
    if (writer.isError()) {
        return false;
    }
    return true;
}

// Write structure on a Connection
bool SensorMeasurement::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!write(writer)) {
        return false;
    }
    return true;
}

// Convert to a printable string
std::string SensorMeasurement::toString() const
{
    yarp::os::Bottle b;
    if (!yarp::os::Portable::copyPortable(*this, b)) {
        return {};
    }
    return b.toString();
}

// read measurement field
bool SensorMeasurement::read_measurement(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(measurement)) {
        reader.fail();
        return false;
    }
    return true;
}

// write measurement field
bool SensorMeasurement::write_measurement(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(measurement)) {
        return false;
    }
    return true;
}

// read (nested) measurement field
bool SensorMeasurement::nested_read_measurement(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(measurement)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) measurement field
bool SensorMeasurement::nested_write_measurement(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(measurement)) {
        return false;
    }
    return true;
}

// read timestamp field
bool SensorMeasurement::read_timestamp(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(timestamp)) {
        reader.fail();
        return false;
    }
    return true;
}

// write timestamp field
bool SensorMeasurement::write_timestamp(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(timestamp)) {
        return false;
    }
    return true;
}

// read (nested) timestamp field
bool SensorMeasurement::nested_read_timestamp(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(timestamp)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) timestamp field
bool SensorMeasurement::nested_write_timestamp(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(timestamp)) {
        return false;
    }
    return true;
}

} // namespace yarp::dev
