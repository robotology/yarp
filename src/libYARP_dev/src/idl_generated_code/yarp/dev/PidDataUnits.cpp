/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <yarp/dev/PidDataUnits.h>

namespace yarp::dev {

// Constructor with field values
PidDataUnits::PidDataUnits(const std::string& units_kp,
                           const std::string& units_kd,
                           const std::string& units_ki,
                           const std::string& units_max_int,
                           const std::string& units_scale,
                           const std::string& units_max_output,
                           const std::string& units_offset,
                           const std::string& units_stiction_up_val,
                           const std::string& units_stiction_down_val,
                           const std::string& units_kff) :
        WirePortable(),
        units_kp(units_kp),
        units_kd(units_kd),
        units_ki(units_ki),
        units_max_int(units_max_int),
        units_scale(units_scale),
        units_max_output(units_max_output),
        units_offset(units_offset),
        units_stiction_up_val(units_stiction_up_val),
        units_stiction_down_val(units_stiction_down_val),
        units_kff(units_kff)
{
}

// Read structure on a Wire
bool PidDataUnits::read(yarp::os::idl::WireReader& reader)
{
    if (!read_units_kp(reader)) {
        return false;
    }
    if (!read_units_kd(reader)) {
        return false;
    }
    if (!read_units_ki(reader)) {
        return false;
    }
    if (!read_units_max_int(reader)) {
        return false;
    }
    if (!read_units_scale(reader)) {
        return false;
    }
    if (!read_units_max_output(reader)) {
        return false;
    }
    if (!read_units_offset(reader)) {
        return false;
    }
    if (!read_units_stiction_up_val(reader)) {
        return false;
    }
    if (!read_units_stiction_down_val(reader)) {
        return false;
    }
    if (!read_units_kff(reader)) {
        return false;
    }
    if (reader.isError()) {
        return false;
    }
    return true;
}

// Read structure on a Connection
bool PidDataUnits::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(10)) {
        return false;
    }
    if (!read(reader)) {
        return false;
    }
    return true;
}

// Write structure on a Wire
bool PidDataUnits::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_units_kp(writer)) {
        return false;
    }
    if (!write_units_kd(writer)) {
        return false;
    }
    if (!write_units_ki(writer)) {
        return false;
    }
    if (!write_units_max_int(writer)) {
        return false;
    }
    if (!write_units_scale(writer)) {
        return false;
    }
    if (!write_units_max_output(writer)) {
        return false;
    }
    if (!write_units_offset(writer)) {
        return false;
    }
    if (!write_units_stiction_up_val(writer)) {
        return false;
    }
    if (!write_units_stiction_down_val(writer)) {
        return false;
    }
    if (!write_units_kff(writer)) {
        return false;
    }
    if (writer.isError()) {
        return false;
    }
    return true;
}

// Write structure on a Connection
bool PidDataUnits::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(10)) {
        return false;
    }
    if (!write(writer)) {
        return false;
    }
    return true;
}

// Convert to a printable string
std::string PidDataUnits::toString() const
{
    yarp::os::Bottle b;
    if (!yarp::os::Portable::copyPortable(*this, b)) {
        return {};
    }
    return b.toString();
}

// read units_kp field
bool PidDataUnits::read_units_kp(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(units_kp)) {
        reader.fail();
        return false;
    }
    return true;
}

// write units_kp field
bool PidDataUnits::write_units_kp(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(units_kp)) {
        return false;
    }
    return true;
}

// read (nested) units_kp field
bool PidDataUnits::nested_read_units_kp(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(units_kp)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) units_kp field
bool PidDataUnits::nested_write_units_kp(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(units_kp)) {
        return false;
    }
    return true;
}

// read units_kd field
bool PidDataUnits::read_units_kd(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(units_kd)) {
        reader.fail();
        return false;
    }
    return true;
}

// write units_kd field
bool PidDataUnits::write_units_kd(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(units_kd)) {
        return false;
    }
    return true;
}

// read (nested) units_kd field
bool PidDataUnits::nested_read_units_kd(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(units_kd)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) units_kd field
bool PidDataUnits::nested_write_units_kd(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(units_kd)) {
        return false;
    }
    return true;
}

// read units_ki field
bool PidDataUnits::read_units_ki(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(units_ki)) {
        reader.fail();
        return false;
    }
    return true;
}

// write units_ki field
bool PidDataUnits::write_units_ki(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(units_ki)) {
        return false;
    }
    return true;
}

// read (nested) units_ki field
bool PidDataUnits::nested_read_units_ki(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(units_ki)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) units_ki field
bool PidDataUnits::nested_write_units_ki(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(units_ki)) {
        return false;
    }
    return true;
}

// read units_max_int field
bool PidDataUnits::read_units_max_int(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(units_max_int)) {
        reader.fail();
        return false;
    }
    return true;
}

// write units_max_int field
bool PidDataUnits::write_units_max_int(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(units_max_int)) {
        return false;
    }
    return true;
}

// read (nested) units_max_int field
bool PidDataUnits::nested_read_units_max_int(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(units_max_int)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) units_max_int field
bool PidDataUnits::nested_write_units_max_int(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(units_max_int)) {
        return false;
    }
    return true;
}

// read units_scale field
bool PidDataUnits::read_units_scale(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(units_scale)) {
        reader.fail();
        return false;
    }
    return true;
}

// write units_scale field
bool PidDataUnits::write_units_scale(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(units_scale)) {
        return false;
    }
    return true;
}

// read (nested) units_scale field
bool PidDataUnits::nested_read_units_scale(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(units_scale)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) units_scale field
bool PidDataUnits::nested_write_units_scale(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(units_scale)) {
        return false;
    }
    return true;
}

// read units_max_output field
bool PidDataUnits::read_units_max_output(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(units_max_output)) {
        reader.fail();
        return false;
    }
    return true;
}

// write units_max_output field
bool PidDataUnits::write_units_max_output(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(units_max_output)) {
        return false;
    }
    return true;
}

// read (nested) units_max_output field
bool PidDataUnits::nested_read_units_max_output(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(units_max_output)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) units_max_output field
bool PidDataUnits::nested_write_units_max_output(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(units_max_output)) {
        return false;
    }
    return true;
}

// read units_offset field
bool PidDataUnits::read_units_offset(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(units_offset)) {
        reader.fail();
        return false;
    }
    return true;
}

// write units_offset field
bool PidDataUnits::write_units_offset(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(units_offset)) {
        return false;
    }
    return true;
}

// read (nested) units_offset field
bool PidDataUnits::nested_read_units_offset(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(units_offset)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) units_offset field
bool PidDataUnits::nested_write_units_offset(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(units_offset)) {
        return false;
    }
    return true;
}

// read units_stiction_up_val field
bool PidDataUnits::read_units_stiction_up_val(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(units_stiction_up_val)) {
        reader.fail();
        return false;
    }
    return true;
}

// write units_stiction_up_val field
bool PidDataUnits::write_units_stiction_up_val(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(units_stiction_up_val)) {
        return false;
    }
    return true;
}

// read (nested) units_stiction_up_val field
bool PidDataUnits::nested_read_units_stiction_up_val(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(units_stiction_up_val)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) units_stiction_up_val field
bool PidDataUnits::nested_write_units_stiction_up_val(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(units_stiction_up_val)) {
        return false;
    }
    return true;
}

// read units_stiction_down_val field
bool PidDataUnits::read_units_stiction_down_val(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(units_stiction_down_val)) {
        reader.fail();
        return false;
    }
    return true;
}

// write units_stiction_down_val field
bool PidDataUnits::write_units_stiction_down_val(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(units_stiction_down_val)) {
        return false;
    }
    return true;
}

// read (nested) units_stiction_down_val field
bool PidDataUnits::nested_read_units_stiction_down_val(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(units_stiction_down_val)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) units_stiction_down_val field
bool PidDataUnits::nested_write_units_stiction_down_val(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(units_stiction_down_val)) {
        return false;
    }
    return true;
}

// read units_kff field
bool PidDataUnits::read_units_kff(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(units_kff)) {
        reader.fail();
        return false;
    }
    return true;
}

// write units_kff field
bool PidDataUnits::write_units_kff(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(units_kff)) {
        return false;
    }
    return true;
}

// read (nested) units_kff field
bool PidDataUnits::nested_read_units_kff(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(units_kff)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) units_kff field
bool PidDataUnits::nested_write_units_kff(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(units_kff)) {
        return false;
    }
    return true;
}

} // namespace yarp::dev
