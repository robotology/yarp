/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#ifndef YARP_THRIFT_GENERATOR_STRUCT_PIDDATAUNITS_H
#define YARP_THRIFT_GENERATOR_STRUCT_PIDDATAUNITS_H

#include <yarp/dev/api.h>

#include <yarp/os/Wire.h>
#include <yarp/os/idl/WireTypes.h>

namespace yarp::dev {

class YARP_dev_API PidDataUnits :
        public yarp::os::idl::WirePortable
{
public:
    // Fields
    /**
     * proportional gain
     */
    std::string units_kp{};
    /**
     * derivative gain
     */
    std::string units_kd{};
    /**
     * integrative gain
     */
    std::string units_ki{};
    /**
     * saturation threshold for the integrator
     */
    std::string units_max_int{};
    /**
     * scale for the pid output
     */
    std::string units_scale{};
    /**
     * max output
     */
    std::string units_max_output{};
    /**
     * pwm offset added to the pid output
     */
    std::string units_offset{};
    /**
     * up stiction offset added to the pid output
     */
    std::string units_stiction_up_val{};
    /**
     * down stiction offset added to the pid output
     */
    std::string units_stiction_down_val{};
    /**
     * feedforward gain
     */
    std::string units_kff{};

    // Default constructor
    PidDataUnits() = default;

    // Constructor with field values
    PidDataUnits(const std::string& units_kp,
                 const std::string& units_kd,
                 const std::string& units_ki,
                 const std::string& units_max_int,
                 const std::string& units_scale,
                 const std::string& units_max_output,
                 const std::string& units_offset,
                 const std::string& units_stiction_up_val,
                 const std::string& units_stiction_down_val,
                 const std::string& units_kff);

    // Read structure on a Wire
    bool read(yarp::os::idl::WireReader& reader) override;

    // Read structure on a Connection
    bool read(yarp::os::ConnectionReader& connection) override;

    // Write structure on a Wire
    bool write(const yarp::os::idl::WireWriter& writer) const override;

    // Write structure on a Connection
    bool write(yarp::os::ConnectionWriter& connection) const override;

    // Convert to a printable string
    std::string toString() const;

    // If you want to serialize this class without nesting, use this helper
    typedef yarp::os::idl::Unwrapped<PidDataUnits> unwrapped;

private:
    // read/write units_kp field
    bool read_units_kp(yarp::os::idl::WireReader& reader);
    bool write_units_kp(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_units_kp(yarp::os::idl::WireReader& reader);
    bool nested_write_units_kp(const yarp::os::idl::WireWriter& writer) const;

    // read/write units_kd field
    bool read_units_kd(yarp::os::idl::WireReader& reader);
    bool write_units_kd(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_units_kd(yarp::os::idl::WireReader& reader);
    bool nested_write_units_kd(const yarp::os::idl::WireWriter& writer) const;

    // read/write units_ki field
    bool read_units_ki(yarp::os::idl::WireReader& reader);
    bool write_units_ki(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_units_ki(yarp::os::idl::WireReader& reader);
    bool nested_write_units_ki(const yarp::os::idl::WireWriter& writer) const;

    // read/write units_max_int field
    bool read_units_max_int(yarp::os::idl::WireReader& reader);
    bool write_units_max_int(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_units_max_int(yarp::os::idl::WireReader& reader);
    bool nested_write_units_max_int(const yarp::os::idl::WireWriter& writer) const;

    // read/write units_scale field
    bool read_units_scale(yarp::os::idl::WireReader& reader);
    bool write_units_scale(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_units_scale(yarp::os::idl::WireReader& reader);
    bool nested_write_units_scale(const yarp::os::idl::WireWriter& writer) const;

    // read/write units_max_output field
    bool read_units_max_output(yarp::os::idl::WireReader& reader);
    bool write_units_max_output(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_units_max_output(yarp::os::idl::WireReader& reader);
    bool nested_write_units_max_output(const yarp::os::idl::WireWriter& writer) const;

    // read/write units_offset field
    bool read_units_offset(yarp::os::idl::WireReader& reader);
    bool write_units_offset(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_units_offset(yarp::os::idl::WireReader& reader);
    bool nested_write_units_offset(const yarp::os::idl::WireWriter& writer) const;

    // read/write units_stiction_up_val field
    bool read_units_stiction_up_val(yarp::os::idl::WireReader& reader);
    bool write_units_stiction_up_val(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_units_stiction_up_val(yarp::os::idl::WireReader& reader);
    bool nested_write_units_stiction_up_val(const yarp::os::idl::WireWriter& writer) const;

    // read/write units_stiction_down_val field
    bool read_units_stiction_down_val(yarp::os::idl::WireReader& reader);
    bool write_units_stiction_down_val(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_units_stiction_down_val(yarp::os::idl::WireReader& reader);
    bool nested_write_units_stiction_down_val(const yarp::os::idl::WireWriter& writer) const;

    // read/write units_kff field
    bool read_units_kff(yarp::os::idl::WireReader& reader);
    bool write_units_kff(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_units_kff(yarp::os::idl::WireReader& reader);
    bool nested_write_units_kff(const yarp::os::idl::WireWriter& writer) const;
};

} // namespace yarp::dev

#endif // YARP_THRIFT_GENERATOR_STRUCT_PIDDATAUNITS_H
