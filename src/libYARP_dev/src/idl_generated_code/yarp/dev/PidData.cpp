/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <yarp/dev/PidData.h>

namespace yarp::dev {

// Constructor with field values
PidData::PidData(const double kp,
                 const double kd,
                 const double ki,
                 const double max_int,
                 const double scale,
                 const double max_output,
                 const double offset,
                 const double stiction_up_val,
                 const double stiction_down_val,
                 const double kff,
                 const std::string& name) :
        WirePortable(),
        kp(kp),
        kd(kd),
        ki(ki),
        max_int(max_int),
        scale(scale),
        max_output(max_output),
        offset(offset),
        stiction_up_val(stiction_up_val),
        stiction_down_val(stiction_down_val),
        kff(kff),
        name(name)
{
}

// Read structure on a Wire
bool PidData::read(yarp::os::idl::WireReader& reader)
{
    if (!read_kp(reader)) {
        return false;
    }
    if (!read_kd(reader)) {
        return false;
    }
    if (!read_ki(reader)) {
        return false;
    }
    if (!read_max_int(reader)) {
        return false;
    }
    if (!read_scale(reader)) {
        return false;
    }
    if (!read_max_output(reader)) {
        return false;
    }
    if (!read_offset(reader)) {
        return false;
    }
    if (!read_stiction_up_val(reader)) {
        return false;
    }
    if (!read_stiction_down_val(reader)) {
        return false;
    }
    if (!read_kff(reader)) {
        return false;
    }
    if (!read_name(reader)) {
        return false;
    }
    if (reader.isError()) {
        return false;
    }
    return true;
}

// Read structure on a Connection
bool PidData::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(11)) {
        return false;
    }
    if (!read(reader)) {
        return false;
    }
    return true;
}

// Write structure on a Wire
bool PidData::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_kp(writer)) {
        return false;
    }
    if (!write_kd(writer)) {
        return false;
    }
    if (!write_ki(writer)) {
        return false;
    }
    if (!write_max_int(writer)) {
        return false;
    }
    if (!write_scale(writer)) {
        return false;
    }
    if (!write_max_output(writer)) {
        return false;
    }
    if (!write_offset(writer)) {
        return false;
    }
    if (!write_stiction_up_val(writer)) {
        return false;
    }
    if (!write_stiction_down_val(writer)) {
        return false;
    }
    if (!write_kff(writer)) {
        return false;
    }
    if (!write_name(writer)) {
        return false;
    }
    if (writer.isError()) {
        return false;
    }
    return true;
}

// Write structure on a Connection
bool PidData::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(11)) {
        return false;
    }
    if (!write(writer)) {
        return false;
    }
    return true;
}

// Convert to a printable string
std::string PidData::toString() const
{
    yarp::os::Bottle b;
    if (!yarp::os::Portable::copyPortable(*this, b)) {
        return {};
    }
    return b.toString();
}

// read kp field
bool PidData::read_kp(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(kp)) {
        reader.fail();
        return false;
    }
    return true;
}

// write kp field
bool PidData::write_kp(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(kp)) {
        return false;
    }
    return true;
}

// read (nested) kp field
bool PidData::nested_read_kp(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(kp)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) kp field
bool PidData::nested_write_kp(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(kp)) {
        return false;
    }
    return true;
}

// read kd field
bool PidData::read_kd(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(kd)) {
        reader.fail();
        return false;
    }
    return true;
}

// write kd field
bool PidData::write_kd(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(kd)) {
        return false;
    }
    return true;
}

// read (nested) kd field
bool PidData::nested_read_kd(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(kd)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) kd field
bool PidData::nested_write_kd(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(kd)) {
        return false;
    }
    return true;
}

// read ki field
bool PidData::read_ki(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(ki)) {
        reader.fail();
        return false;
    }
    return true;
}

// write ki field
bool PidData::write_ki(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(ki)) {
        return false;
    }
    return true;
}

// read (nested) ki field
bool PidData::nested_read_ki(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(ki)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) ki field
bool PidData::nested_write_ki(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(ki)) {
        return false;
    }
    return true;
}

// read max_int field
bool PidData::read_max_int(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(max_int)) {
        reader.fail();
        return false;
    }
    return true;
}

// write max_int field
bool PidData::write_max_int(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(max_int)) {
        return false;
    }
    return true;
}

// read (nested) max_int field
bool PidData::nested_read_max_int(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(max_int)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) max_int field
bool PidData::nested_write_max_int(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(max_int)) {
        return false;
    }
    return true;
}

// read scale field
bool PidData::read_scale(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(scale)) {
        reader.fail();
        return false;
    }
    return true;
}

// write scale field
bool PidData::write_scale(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(scale)) {
        return false;
    }
    return true;
}

// read (nested) scale field
bool PidData::nested_read_scale(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(scale)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) scale field
bool PidData::nested_write_scale(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(scale)) {
        return false;
    }
    return true;
}

// read max_output field
bool PidData::read_max_output(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(max_output)) {
        reader.fail();
        return false;
    }
    return true;
}

// write max_output field
bool PidData::write_max_output(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(max_output)) {
        return false;
    }
    return true;
}

// read (nested) max_output field
bool PidData::nested_read_max_output(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(max_output)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) max_output field
bool PidData::nested_write_max_output(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(max_output)) {
        return false;
    }
    return true;
}

// read offset field
bool PidData::read_offset(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(offset)) {
        reader.fail();
        return false;
    }
    return true;
}

// write offset field
bool PidData::write_offset(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(offset)) {
        return false;
    }
    return true;
}

// read (nested) offset field
bool PidData::nested_read_offset(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(offset)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) offset field
bool PidData::nested_write_offset(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(offset)) {
        return false;
    }
    return true;
}

// read stiction_up_val field
bool PidData::read_stiction_up_val(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(stiction_up_val)) {
        reader.fail();
        return false;
    }
    return true;
}

// write stiction_up_val field
bool PidData::write_stiction_up_val(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(stiction_up_val)) {
        return false;
    }
    return true;
}

// read (nested) stiction_up_val field
bool PidData::nested_read_stiction_up_val(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(stiction_up_val)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) stiction_up_val field
bool PidData::nested_write_stiction_up_val(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(stiction_up_val)) {
        return false;
    }
    return true;
}

// read stiction_down_val field
bool PidData::read_stiction_down_val(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(stiction_down_val)) {
        reader.fail();
        return false;
    }
    return true;
}

// write stiction_down_val field
bool PidData::write_stiction_down_val(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(stiction_down_val)) {
        return false;
    }
    return true;
}

// read (nested) stiction_down_val field
bool PidData::nested_read_stiction_down_val(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(stiction_down_val)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) stiction_down_val field
bool PidData::nested_write_stiction_down_val(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(stiction_down_val)) {
        return false;
    }
    return true;
}

// read kff field
bool PidData::read_kff(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(kff)) {
        reader.fail();
        return false;
    }
    return true;
}

// write kff field
bool PidData::write_kff(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(kff)) {
        return false;
    }
    return true;
}

// read (nested) kff field
bool PidData::nested_read_kff(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(kff)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) kff field
bool PidData::nested_write_kff(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(kff)) {
        return false;
    }
    return true;
}

// read name field
bool PidData::read_name(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(name)) {
        reader.fail();
        return false;
    }
    return true;
}

// write name field
bool PidData::write_name(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(name)) {
        return false;
    }
    return true;
}

// read (nested) name field
bool PidData::nested_read_name(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(name)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) name field
bool PidData::nested_write_name(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(name)) {
        return false;
    }
    return true;
}

} // namespace yarp::dev
