/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#ifndef YARP_THRIFT_GENERATOR_SERVICE_YARPACTIONSPLAYER_IDL_H
#define YARP_THRIFT_GENERATOR_SERVICE_YARPACTIONSPLAYER_IDL_H

#include <yarp/os/Wire.h>
#include <yarp/os/idl/WireTypes.h>
#include <yarp/os/ApplicationNetworkProtocolVersion.h>

/**
 * yarpActionsPlayer_IDL
 * Interface.
 */
class yarpActionsPlayer_IDL :
        public yarp::os::Wire
{
public:
    //ProtocolVersion
    virtual yarp::os::ApplicationNetworkProtocolVersion getLocalProtocolVersion();
    virtual yarp::os::ApplicationNetworkProtocolVersion getRemoteProtocolVersion();
    virtual bool checkProtocolVersion();

    // Constructor
    yarpActionsPlayer_IDL();

    //Service methods
    /**
     * Start (or resumes, if stopped) the currently selected action.
     * It will stop when the last frame is reached.
     * @return true/false on success/failure
     */
    virtual bool start();

    /**
     * Stops the currently selected (running) action. Can be resumed by start.
     * @return true/false on success/failure
     */
    virtual bool stop();

    /**
     * Rewinds the currently selected action.
     * @return true/false on success/failure
     */
    virtual bool reset();

    /**
     * Similar to play, but it will automatically restart the playback when the last
     * frame is reached.
     * @return true/false on success/failure
     */
    virtual bool forever();

    /**
     * Prints all the frames of the currently selected action.
     * @return true/false on success/failure
     */
    virtual bool print_frames();

    /**
     * Sets the playback speed factor for the currently selected action (default value: 1.0).
     * @return true/false on success/failure
     */
    virtual bool speed_factor(const double value);

    /**
     * Resamples the currently selected action (in seconds, recommended value 0.010s).
     * @return true/false on success/failure
     */
    virtual bool resample(const double value);

    /**
     * Choose the current action and wait for further commands.
     * @return true/false on success/failure
     */
    virtual bool choose_action(const std::string& action_name);

    /**
     * Play an action one single time. The call blocks untils the playback is complete.
     * @return true/false on success/failure
     */
    virtual bool play_action(const std::string& action_name);

    /**
     * Prints all the loaded actions.
     * @return true/false on success/failure
     */
    virtual bool show_actions();

    /**
     * Sets the period of the sampling thread (for advanced use only, default value: 0.010s).
     * @return true/false on success/failure
     */
    virtual bool set_thread_period(const double value);

    /**
     * Sets the uration for the initial homing movement (for advanced use only, default value: 2s).
     * @return true/false on success/failure
     */
    virtual bool set_initial_move_time(const double value);

    // help method
    virtual std::vector<std::string> help(const std::string& functionName = "--all");

    // read from ConnectionReader
    bool read(yarp::os::ConnectionReader& connection) override;
};

#endif // YARP_THRIFT_GENERATOR_SERVICE_YARPACTIONSPLAYER_IDL_H
